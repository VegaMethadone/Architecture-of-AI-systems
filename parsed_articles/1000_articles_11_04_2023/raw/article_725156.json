{
    "article_id": "725156",
    "article_name": "Градация Навыков в Embedded Программировании",
    "content": "В программировании микроконтроллеров (MK) нет как таковой общепринятой градации на Junior->Middle->Senior. \nДавайте попробуем вместе разобраться, где же проходит водораздел между Junior->Middle->Senior программистом МК и что справедливо требовать от каждого из них? \nДалее речь пойдет в основном про программирование микроконтроллеров. Тут не будет затронут Embedded Linux и разработка на FPGA.\nШкольник из кружка робототехники (8ой-класс)\nОн умеет запустить примеры для PCB Arduino (UNO/Mega) в Arduino IDE на Windows. Может поменять константу в сорцах и прошить проект из-под IDE. При условии, что солнце под углом к горизонту примерно 38 градуcов. Всю программу пишет в одном лишь только main.c файле в котором уже 1000+ строк. C-код толком не понимает. Схемотехникой не интересуется. \nJunior Embedded Рrogrammer\nJunior может работать только в какой-нибудь рафинированной проприетарной user friendly IDE (IAR, Keil, Atolic True Studio, Code Composer Studio). Поэтому его рабочее место стоит на 3k-4k EUR больше чем у Middl(a). Обычно умеет программировать только один единственный микроконтроллер из одного семейства. Например STM32F2xxxx. И всё. Он не догадывается о существовании *.ld *.o *.elf файликов. Он знает только про *.с, *.cpp и *.h. Причем Junior(ы) они такие смешные у них даже IDE открыта не на весь экран, а на 70-80% площади монитора.\nМаксимум, что можно доверить Junior(у) это написать драйвер GPIO, SPI, UART и прочее BSP. Или написать простой драйвер, например для микросхемы RTC где 7-12 регистров. причем чтобы написать драйвер GPIO (400 строк) Junior(у) понадобится 3-4 месяца.  Причем всё потом придется проверить Middle(у). \nJunior может пошагово отлаживать прошивку только в IDE. Будь то IAR или Keil. Junior(у) очень тяжело даже освоить IDE Eclipse. У Junior(а) начинается паника, если IDE не может открыть поврежденный *.xml или *.ewp файл с проектом для IDE.  \nДля него не существует ничего вне и за пределом IDE. Он видит только то, что в радиусе 2-3х сантиметров вокруг да около курсора. Он не представляет как можно работать за компьютером без мышки, курсора и GUI(ни). Мечта Junior(а) это чтобы в следующую версию IDE добавили  \nMickey Mouse\n(а), который будет давать подсказки по разработке прошивки.\nJunior может максимум писать однопоточный код. Junior не догадывается от том, что существует модульные тесты.\nJunior плохо знает английский язык и поэтому пишет транслитом в комментариях и в компанейских чатах (KAН, ватчдог, юзать, инлайн, хедер, дифайн, тула). Junior убежден, что транслит в его исполнении - это самый правильный вариант транслита.\nJunior не умеет читать схемотехнику. Если ему порекомендовать найти что-то в файле топологии, то он сочтет, что его оскорбили.  У него на жестком диске даже *.PDF со схемотехникой для платы, что на его столе тоже нет.\nJunior также не открывает datasheet(ы). Он просто ковыряет пример прошивки в IDE из интернета. \nПро то как Junior пишет код можно сочинять анекдоты:\n--У Junior(а) на диске только один проект. Одна сборка. И он собирает её одновременно для всех плат меняя что-то в *.h файлике. При этом собирается всё, как то, что нужно так и то, что не нужно. При этом Junior убежден, что это его решение c *.h файликом гениальное. \n--Еще Junior любит вставлять #include(ом) *.с файлики. \n--У Junior(а) 80...90 % кода сохранены в папке utils(utility/helpers). Он просто не может классифицировать код по логическим компонентам.\n--Junior передает конфиги в сборку через (про)hard code(женые) константы разбросанные по всей прошивке.\n--Вот так Junior  вставляет и исключает код в проекте\nif(1){\n... some code...\n}\n\nif(0){\n... some code...\n}\nКогда Junior(у) надо найти конкретную функцию, то он открывает встроенный в IDE поиск и набирает ключевое слово.\nJunior не догадывается, что существует консоль и утилиты консоли. Он даже слов таких как \"консоль\" ещё не слышал, разве, что на курсе сопромата в ВУЗ(е). А если ему кто-то из смежников будет доказывать пользу UART Shell(а) в прошивке, то Junior будет резко агрессивно осуждать это. Будет утверждать, что ему, якобы, полностью хватает пошаговой отладки в IDE. На самом деле Jun просто понятия не имеет как  реализовать TUI(UART-CLI ) в прошивке. К слову,  Jun частенько пользуется printf отладкой в UART и выглядит это как ниагарский водопад из белых логов, к котором даже прочитать ничего не успеваешь. А то, что это его художество нагружает процессор его не волнует.\nJunior не понимает 80% акронимов, которые слышит на работе и его это даже не беспокоит.\nJunior умеет создавать проекты только путем скачивания примеров из интернета и ковыряния в них. \nВ мире Junior(а) микроконтроллер это просто \"волшебная коробочка, которая исполняет мой С-код\".\nJunior работает с кодом только локально. Junior  не умеет пользоваться системами контроля версий как SVN или GIT.  А когда надо передать сорцы другому разработчику, то Junior скопает всё на USB-флешку, весь SDK c объектниками гигабайт на 16+. Или отправит этот много гигабайтный *.zip архив по e-mail почте. В лучшем случае положит архив в DropBox.  \nДаже если бы Junior вдруг узнал про GIT, то но бы подвергал версионному контролю только *.с и *.h файлики.  А пользуется GITом Junior только из GIT GUI.\nЧто можно доверить Junior(у)?\n \nНаписать BSP драйвер для какого-н аппаратного контроллера на SoC(е). Это может быть драйвер для GPIO, SPI, ADC, DAC, I2C, UART, AES, RTC для конкретного чипа.\nJunior  не пишет постов так как ничего толком ещё не знает.\nMiddle Embedded Programmer\nКогда Middle приходит на работу, он первым делом открывает сервер сборки Jenkins и смотрит, что поломалось в результате ночных тестов. Далее он чинит что-то, делает fix -коммиты и приступает к задачам из backlog(а).  \nMiddle пишет на С или С++, умеет читать аssembler и четко понимает какой путь проходят сорцы в пищеварительной системе данного ToolChain(а) с момента написания до исполнения во flash микроконтроллера. Middle умеет писать не только С-код, но и скрипты сборки на Make, Ninja и СMake. \nОн также покрывает код модульными тестами и умеет пользоваться интерфейсом командной строки поверх UART. \nhttps://habr.com/ru/post/698092/\nОн умеет написать хороший загрузчик с шифрованием и аутентификацией. Умеет пользоваться GIT(ом). Может отличить аппаратную ошибку от программной. Может выполнить bring-up платы с производства.\nMiddle  отлично ориентируется в схемотехнике цифровых электронных цепей. Он даже может найти в топологии оптимальное место, чтобы установить туда щуп осциллографа для верификации сигнала.\nMiddle  использует clang-format для автоматического выравнивания отступов. Код у него аккуратный и и чистый.\nMiddle собирает код из общей пере используемой кодовой базы. Добавление новой сборки у него сводится к тому, чтобы просто написать крохотный makefile (12 строк) c конфигами. Вся сборка у него из makefile \nhttps://habr.com/ru/post/723054/\nУ Middle(а) в репозитории много сборок. На все случаи жизни. Сборки появляются и исчезают как вспышки на слонце. Для каждой платы в отдельности у него есть загрузчик, mbr, generic, assembly test, debug, release. Каждая сборка собирает только то, что нужно здесь и сейчас и в ней нет ничего лишнего. Так он гарантирует модульность кодовой базы. Всё собирается и никто ни с кем не конфликтует. \nhttps://habr.com/ru/post/689542/\nMiddle может не просто написать код. Он может оформить код в аппаратно-независимый программный компонент. Далее этот компонент можно будет легко конфигурировать, мигрировать, масштабировать и, что важно - тестировать. \nhttps://habr.com/ru/articles/683762/\nУ Middle(а) в прошивке всегда есть NVRAM для хранения параметров. Это позволяет ему уменьшить количество сборок. \nhttps://habr.com/ru/post/706972/\nMiddle хорошо понимает архитектуру одного процессорного ядра до уровня ALU (чаще всего ARM Cortex-M4) и знает, что происходит с микроконтроллером между подачей питания и запуском функции main(). Также Middle четно представляет, что происходит с микропроцессором между нажатием на кнопку в PCB и запуском прерывания по внешнему аппаратному прерыванию, и как процессор потом возвращается обратно в функцию main().\nMiddle активно пользуется консольными утилитами из CygWin(а): grep, find, cat, awk, sed, sort, curl, wc, uniq. Он также умеет составлять и применять нетривиальные регулярные выражения. Middle пользуется GIT исключительно из командной строки. Находит ступенчатым grep(ом), что нужно и делает очень прицельные коммиты.\ngit и grep всегда работают в тандеме\nMiddle практически не использует пошаговую отладку через SWD/JTAG. Разве, что для запуска и отладки UART. Далее он ориентируется на интерфейс командной строки CLI поверх UART и модульные тесты, которые он добавил в сборку и вызвал из командной строки поверх UART. \nhttps://habr.com/ru/post/694408/\nMiddle  может модифицировать существующую сборку с RTOS, но сам завести любую RTOS - нет.\nMiddle может проектировать конечный автомат и реализовать его в прошивке.\nОн может отладить платформа-независимый код на laptop(е) в отдельной сборке прошивки для x86.\nMiddle может добавить Job(ы) на сервер сборки Jenkins.\nMiddle передает конфиги в сборку через *.mk файлы.\nУ Middle может быть склонность в какую-нибудь конкретную предметную область и глубокая экспертиза в ней. Будь-то GNSS навигация, беспроводные радио интерфейсы, ЦОС, сетевые протоколы, аудиотехника, управление электродвигателями, баллистические вычислители, ТАУ, криптография и т. п.\nВ целом Middle прекрасно понимает, что такое нормальная прошивка \nhttps://habr.com/ru/post/655641/\n и следует лучшим традициям в разработке firmware.\nЧто можно доверить Middle(у)?\n Настроить toolchain для очередного чипа. Выполнить bring up платы с производства, написать загрузчик с обновлением по воздуху, написать драйвер сложного spi чипа, проектировать конечный автомат для подавления дребезга, реализовать цифровой фильтр, написать модульные тесты для драйвера. Перенести код на другую аппаратную платформу или перевести на MISRA совместимость. Реализовать бинарный протокол для общения между платками. Написать парсер nmea пакетов. Реализовать cli.\nMiddle в основном не пишет постов на habr так как опасается делиться экспертизой. Middle боится конкуренции как огня. \nSenior Embedded programmer\nSenior чётко понимает отличия всех известных процессорных архитектур 8051, ARM, SPARC, PowerPC, MIPS, RISC-V, Xtensa между собой.   \nSenior спокойно пишет прошивки с RTOS(ами): RTEMS, Zephyr RTOS, TI-RTOS, FreeRTOS. Причем он может завести любую существующую RTOS на любом существующем MCU любого вендора с чистого листа, а не взяв примеры из интернета. \nОн собирает код сразу двумя-тремя компиляторами: GCC, Clang, GHS и т.п. Cборка двумя-тремя компиляторами позволяет ему найти больше ошибок.  \nhttps://habr.com/ru/post/656449/\nSenior передает конфиги в сборку gпрошивки через linux(овые) механизмы, такие как Device Tree и Kconfig.\nSenior(у) не нужна мышка для работы на компьютере. Он всё может быстро сделать из консолей или утилит типа far manager.\nSenior понимает, что происходит на уровне ABI. Senior может, например, добавлять в прошивку функционал путем добавления бинарей в RAM память из SD-карты прямо в run-time без пере сборки всего проекта, подобно тому как в Linux подгружаются модули. \nОн умеет на пустом месте настраивать полный DevOps, например в Jenkins. Причем OS не имеет особого значения, что Linux, что Windows. Он пишет скрипты для автосборки на Python, скрипты авто развертывания через загрузчики и скрипты запуска автотестов из CLI.  Между платами передает данные по \nProtobuff\n. \nhttps://habr.com/ru/post/695978/\nSenior пишет код генераторы, например, для синтаксического разбора CAN пакетов, или карты регистров сложных SPI/I2C/MDIO чипов. \nSenior может построить таблицу-отчет сколько времени компилировался каждый *.с файлик.  Он умеет снимать code coverage после прохождения модульных тестов. Находит сколько раз прошивка прошла по каждой строчке, находит код, который не исполняется и удаляет его.\nSenior знает как работает JTAG под капотом (установка точки останова). Senior может пошагово отлаживать прошивку прямо из командной строки, вообще без какой-либо IDE.  \nttps://habr.com/ru/post/694708/\nSenior пишет embedded код учитывая индустриальные стандарты MISRA, CERT, ISO26262, DO-178C, AUTOSAR.\nЧто можно доверить senior(у)?\n \nНастроить надёжную makefile сборку с какой-н RTOS, с диагностикой, с тестами с конфигурацией из  Device Tree и Kconfig, под пару компиляторов. Настроить загрузку бинарных модулей для микроконтроллера. Развернуть полный DevOps в организации на отдельном NetTop компьютере. Настроить среду Gerrit для инспекции программ. Снять code coverage после тестов. Написать кодогенератор для разбора пакетов. Проводить ежедневные короткие планёрки среди программистов. Содействовать при найме программистов.\nSenior пишет посты на habr. Он заинтересован, чтобы его окружение было способными и чтобы с ними было комфортно работать. \nВывод\nВот так я себе \nпримерно\n представляю градацию навыков в разработке микроконтроллеров. Повторюсь, что конечно же всё \nочень условно\n. \nВажно ещё отметить, что функция Jun ->Mid ->Sen никак не привязана к опыту работы и стажу. В РФ я видел как 27-летних Senior(ов) так и 43-летних Junior(ов). Причём и первый и второй не меняли профессии начиная с 22х лет.\nЕсли вам известны другие атрибуты водораздела Junior->Middle->Senior программиста микроконтроллеров, то пишите, пожалуйста, их в комментариях.\nА вот \nв этом реестре\n я привёл суммарный разбор Junior->Middle->Senior, который буду пополнять по ходу времени. \nСловарь\nАкроним\nРасшифровка\nMK\nмикроконтроллер\nMCU\nmicrocontroller\nALU\narithmetic logic unit\nTUI\nText User Interface\nЦОС (DSP  )\nЦифровая обработка сигналов (digital signal processing)\nIDE   \nIntegrated development environment \nARM\nAdvanced RISC Machine\nMISRA\nMotor Industry Software Reliability Association\nRTC\nReal Time Clock\nТАУ\nТеория автоматического управления\nPCB\nPrinted circuit board\nSTM\nSocietà Thomson Microelectronics\nUART   \nuniversal asynchronous receiver-transmitter\nMIPS  \nMicroprocessor without Interlocked Pipelined Stages\nAUTOSAR\nAUTomotive Open System ARchitecture\nABI\nApplication binary interface\nRTOS\nreal-time operating system\nhttps://habr.com/ru/articles/668368/\nhttps://habr.com/ru/articles/555498/\n \n ",
    "tags": [
        "С",
        "embedded",
        "MCU",
        "junior",
        "middle",
        "senior",
        "сатира"
    ]
}