{
    "article_id": "728772",
    "article_name": "Интеграция Yandex MapKit в SwiftUI проект. Часть 1",
    "content": "Всех приветствую. \nСовсем недавно поступила задача заменить стандартные карты от Apple на Яндекс карты. Ниже немного о Yandex MapKit.\nYandex MapKit — это кроссплатформенная библиотека, которая позволяет использовать возможности Яндекс.Карт в мобильных приложениях для iOS и Android.\nОсновная проблема заключалась в том, что библиотека Yandex MapKit создана для UIKit, но наша цель поставить все это дело на SwiftUI. Поэтому прибегаем к старой доброй пикче:\nБудем считать, что вы получили ключ у Яндекса и установили библиотеку в проект, для ознакомления с установкой прикрепляю \nссылку\n. \nПервым делом создаем класс AppDelegate, подробнее как реализовать этот класс в SwiftUI проекте \nздесь\n.\nЗатем идем в таргет проекта -> Info и прописываем Privacy\nВ классе AppDelegate импортируем библиотеку Яндекса и устанавливаем ваш API ключ из кабинета разработчика Яндекса\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool {\n    YMKMapKit.setApiKey(\"Ваш API-ключ\")\n    YMKMapKit.sharedInstance()\n}\nСоздадим класс LocationManager, в который импортируем следующее: \nimport Foundation\nimport CoreLocation\nimport YandexMapsMobile\nimport Combine\nLocationManager будет отвечать за всю логику взаимодействия с картами, объявим в нем саму карту и приватную переменную manager, которая наследуется от класса CLLocationManager, для работы с местоположением пользователя\nclass LocationManager: NSObject{\n\n    lazy var map : YMKMap = {\n        return mapView.mapWindow.map\n    }()\n\n    private let manager = CLLocationManager()\n\n    let mapView = YMKMapView(frame: CGRect.zero)\n    override init(){\n        super.init()\n    }\n}\nУнаследуем класс от протокола CLLocationManagerDelegate и в init() подпишем делегат объявленного менеджера и вызовем у него функции нахождения геопозиции. \nclass LocationManager: NSObject, CLLocationManagerDelegate\n override init(){\n        super.init()\n        manager.delegate = self\n        manager.startUpdatingLocation()\n    }\nРеализуем в классе LocationManager функцию делегата для проверки статуса и начала использования геопозиции\nfunc locationManager(_ manager: CLLocationManager, didChangeAuthorization status: CLAuthorizationStatus) {\n        if status == .authorizedWhenInUse {\n            self.manager.startUpdatingLocation()\n        }\n    }\nЗатем создадим переменную в которую будем записывать последнее местоположение пользователя:\n@Published var lastUserLocation: CLLocation? = nil\nРеализуем функцию протокола для того, чтобы слушать изменение локации пользователя и записывать в переменную: \n  func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n      self.lastUserLocation = locations.last\n }\nПриступим написанию UI части. Создадим SwiftUIView с названием MapView и обернем в ZStack. Объявим экземпляр класса LocationManager\n  @ObservedObject var locationManager = LocationManager()\nТак как Yandex MapKit работает с UIKit, создадим структуру YandexMapView и наследуемся от протокола UIViewRepresentable. \nОбъявим EnviromentObject переменную от класса LocationManager и реализуем функцию makeUIView(), в котором вернем как View ранее созданные mapView в классе LocationManager\nimport SwiftUI\nimport YandexMapsMobile\nimport Combine\n\nstruct YandexMapView: UIViewRepresentable {\n    @EnvironmentObject var locationManager : YaLocationManager\n    func makeUIView(context: Context) -> YMKMapView {\n        return locationManager.mapView\n    }  \n    func updateUIView(_ mapView: YMKMapView, context: Context) {}\n}\n\nВернемся в LocationManager и создадим приватную функцию centerMapLocation, которая на вход будет принимать параметр target, в который будем подавать долготу и широту, и параметр map, который принимает Яндекс карту.\n  func centerMapLocation(target location: YMKPoint?, map: YMKMapView) {\n         guard let location = location else { print(\"Failed to get user location\"); return }\n         map.mapWindow.map.move(\n             with: YMKCameraPosition(target: location, zoom: 18, azimuth: 0, tilt: 0),\n             animationType: YMKAnimation(type: YMKAnimationType.smooth, duration: 0.5)\n         )\n     }\nИ теперь реализуем функцию для показа текущей геопозиции пользователя, она будет брать lastUserLocation и передавать в метод centerMapLocation, описанный выше.\n func currentUserLocation(){\n        if let myLocation = lastKnownLocation {\n             centerMapLocation(target: YMKPoint(latitude: myLocation.coordinate.latitude, longitude: myLocation.coordinate.longitude), map: mapView)\n      }\n }\nОбъявим в ZStack YandexMapView и передадим ей объявленный класс\n ZStack{\n    YandexMapView()\n    .edgesIgnoringSafeArea(.all)\n    .environmentObject(locationManager)\n}\nОсталось лишь в OnAppear вызвать метод currentUserLocation\n.onAppear{\n        locationManager.currentUserLocation()\n}\nВ результате получаем, работающую Яндекс Карту в вашем SwiftUI проекте\nРезультат\nНиже прикрепляю код всех классов: \nLocationManager\nclass LocationManager: NSObject, CLLocationManagerDelegate, ObservableObject{\n    \n    private let manager = CLLocationManager()\n    let mapView = YMKMapView(frame: CGRect.zero)\n    @Published var lastUserLocation: CLLocation? = nil\n    lazy var map : YMKMap = {\n        return mapView.mapWindow.map\n    }()\n    \n    override init() {\n        super.init()\n        self.manager.delegate = self\n    }\n    \n    func currentUserLocation(){\n        if let myLocation = lastUserLocation {\n            centerMapLocation(target: YMKPoint(latitude: myLocation.coordinate.latitude, longitude: myLocation.coordinate.longitude), map: mapView )\n        }\n    }\n    \n    func centerMapLocation(target location: YMKPoint?, map: YMKMapView) {\n        \n        guard let location = location else { print(\"Failed to get user location\"); return }\n        \n        map.mapWindow.map.move(\n            with: YMKCameraPosition(target: location, zoom: 18, azimuth: 0, tilt: 0),\n            animationType: YMKAnimation(type: YMKAnimationType.smooth, duration: 0.5)\n        )\n    }\n    \n    func locationManager(_ manager: CLLocationManager, didChangeAuthorization status: CLAuthorizationStatus) {\n        if status == .authorizedWhenInUse {\n            self.manager.startUpdatingLocation()\n        }\n    }\n    \n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        // Notify listeners that the user has a new location\n        self.lastUserLocation = locations.last\n    }\n}\n\n\nMapView\nstruct MapView: View {\n    @ObservedObject var locationManager = LocationManager()\n    var body: some View {\n        ZStack{\n            YandexMapsView().edgesIgnoringSafeArea(.all).environmentObject(locationManager)\n        }.onAppear{\n            locationManager.currentUserLocation()\n        }\n    }\n}\n\nYandexMapView\nstruct YandexMapView: UIViewRepresentable {\n    @EnvironmentObject var locationManager : YaLocationManager\n    func makeUIView(context: Context) -> YMKMapView {\n        return locationManager.mapView\n    }\n         \n    func updateUIView(_ mapView: YMKMapView, context: Context) {}\n}\nВ следующей части будет реализован поиск по адресу, позиция на карте, выбранного адреса и обновление адреса по координатам из центра камеры.\nВсем спасибо за внимание. \n \n ",
    "tags": [
        "яндекс карты",
        "swiftui",
        "swift",
        "yandex map",
        "yandex map kit",
        "xcode",
        "ios"
    ]
}