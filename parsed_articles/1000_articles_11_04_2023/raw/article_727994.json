{
    "article_id": "727994",
    "article_name": "Дружим chatGPT 3.5 с выдачей Google в Telegram боте",
    "content": "Если коротко, то идея в следующем:\nА что если перед ответом на вопрос к chatGPT дать ему информацию с первого сайта в выдаче Google по этому же запросу?\nИ вот что из этого получается:\nДля реализации данной идеи нам нужно научить наш Telegram бот подключаться к Google поисковой выдаче и извлекать информацию с первого сайта.\nВот функция для получения выдачи Google без необходимости получения Google API KEY:\nimport requests\nimport urllib\nimport pandas as pd\nfrom requests_html import HTML\nfrom requests_html import HTMLSession\n\ndef get_source(url):\n    \"\"\"Return the source code for the provided URL. \n    Args: \n        url (string): URL of the page to scrape.\n    Returns:\n        response (object): HTTP response object from requests_html. \n    \"\"\"\n    try:\n        session = HTMLSession()\n        response = session.get(url)\n        return response\n    except requests.exceptions.RequestException as e:\n        print(e)\n        \ndef scrape_google(query, start):\n    query = urllib.parse.quote_plus(query)\n    response = get_source(\"https://www.google.ru/search?start=\"+str(start)+\"&q=\" + query)\n    links = list(response.html.absolute_links)\n    google_domains = ('https://www.google.', \n                      'https://google.', \n                      'https://webcache.googleusercontent.', \n                      'http://webcache.googleusercontent.', \n                      'https://policies.google.',\n                      'https://support.google.',\n                      'https://maps.google.')\n\n    for url in links[:]:\n        if url.startswith(google_domains):\n            links.remove(url)\n    return links\nПосле того, как мы получили URL первого сайта из выдачи Google, мы можем обработать текст с помощью chatGPT 3.5 и получить искомый ответ на вопрос пользователя.\nДалее, мы можем связать обработку текста с полученного сайта и ответ chatGPT 3.5 в Telegram боте, который будет отображать ответ пользователю в чате.\nВот такой получился код Telegram бота:\nimport os\nimport json\nfrom telebot import types\n\nimport requests\nfrom urllib.parse import urlparse\nfrom idna import encode\nimport urllib\nimport time\n\nimport scrape_google as sg\n\nimport openai\n\nos.environ[\"OPENAI_API_KEY\"] = openai.api_key\n\nimport telebot\nbot = telebot.TeleBot('XXXXXX:XXXXXXXXXXXXXXXXXXXXXXX')\n\nimport construct_index\n\nclass Context:\n    LOG = {}\n\n@bot.message_handler(content_types=['text'])\ndef start(message):\n    \n    if '/g' in message.text:\n        res = ai_search(message)\n        bot.send_message(message.chat.id, res)\n        return\n    \n\ndef ai_search(message):\n    query = message.text\n    promt = query\n    links = sg.scrape_google(query, 0)\n    res = ''\n    count = 0\n    for l in links:\n        print('Анализируем сайт:', l, promt)\n        bot.send_message(message.chat.id, 'Анализируем сайт: ' + l)\n        ai_reply = custom_promt_AI(l, promt)\n        if ai_reply != [] and 'Нет ответа' not in ai_reply[0]:\n            res += ai_reply[0] + f' (Источник: {l})' + '\\n---\\n'\n            if len(res.split('\\n---\\n')) > 0:\n                return res\n        time.sleep(10)\n        count += 1\n        if count > 2:\n            return 'Не удалось найти ответ'\n    return 'Не удалось найти ответ'\n\n\nbot.infinity_polling(timeout=10, long_polling_timeout = 5)\nА теперь давайте на примере одного запроса сравним ответ нашего бота и ответ самого chatGPT.\nВот тестовый запрос: “\nЧто такое ORM и как она работает в приложениях на Ruby on Rails?\n”\nВот ответ нашего бота:\n/g - означает команду поиска в Гугл и отправку результатов для анализа в chatGPT\nORM (Object-Relational Mapping) в Ruby on Rails является инструментом, который позволяет разработчикам работать с базами данных, используя объекты и методы Ruby вместо языка SQL. \n\nORM в Rails работает следующим образом: \n\n1. Создание модели: Для каждой таблицы в базе данных создается соответствующая модель в Rails. \n\n2. Определение атрибутов: Каждая модель состоит из атрибутов, которые соответствуют столбцам в базе данных. \n\n3. Установка связей: Если имеются связи между таблицами, они могут быть определены в модели при помощи различных методов, таких как has_many и belongs_to. \n\n4. Создание объектов модели: Объекты модели могут быть созданы с помощью конструктора модели, который принимает хэш атрибутов и создает новую запись в базе данных. \n\n5. Выполнение запросов: ORM позволяет выполнить запросы к базе данных, используя методы модели, такие как find, where и order. \n\n6. Изменение объектов: Объекты модели могут быть изменены при помощи методов, таких как update или save. \n\n7. Удаление объектов: Объекты модели могут быть удалены из базы данных с помощью метода destroy. \n\nORM в Rails обеспечивает более простой и интуитивно понятный способ работы с базами данных, что повышает эффективность и скорость разработки приложений.\n\n---\nИсточник: https://coderlessons.com/articles/ruby/orm-v-ruby-vvedenie\n А вот ответ непосредственно chatGPT:  \nORM (Object-Relational Mapping) представляет собой программное обеспечение, которое позволяет построить связь между объектно-ориентированным языком программирования и реляционной базой данных. \n\nВ приложениях на Ruby on Rails ORM представлено в виде ActiveRecord - это один из компонентов фреймворка, который обеспечивает удобные возможности для работы с базой данных, необходимые для создания приложения.\n\nORM ActiveRecord предоставляет удобный способ для выполнения таких задач, как создание, чтение, обновление и удаление данных в базе данных, используя объекты Ruby. Он также позволяет создавать ассоциации между таблицами базы данных, что делает его более интуитивно понятным для разработчиков, не имеющих специализированного образования в области баз данных.\n\nВ приложениях на Ruby on Rails, связь между моделями данных и базой данных настраивается через миграции, которые создают и обновляют таблицы в базе данных. ActiveRecord также позволяет создавать сложные запросы к базе данных, используя язык SQL или его альтернативные API.\n\nТаким образом, ORM ActiveRecord позволяет разработчикам Ruby on Rails создавать приложения, взаимодействующие с базой данных, через удобные и простые средства объектно-ориентированного программирования, сокращая время и усилия, необходимые для разработки и поддержки приложения.\nКак мы видим ответы сильно отличаются. Главная особенность первого варианта в том, что chatGPT ориентируется на реальную информацию и ничего не фантазирует от себя.\nДавайте еще посмотрим некоторые примеры запросов и ответов такого бота:\n/g изменения в гражданском кодексе в 2023 году\nВ гражданском кодексе, начиная с 1 марта 2023 года, появятся новые главы о недвижимости, которые должны урегулировать отношения в этой сфере. Ожидается, что эти изменения дадут возможность упорядочить рынок недвижимости, защитить права потребителей и улучшить условия для всех участников сделок. Также будут введены новые требования по договорам аренды, правам собственности на объекты недвижимости и регулированию споров в этой сфере. В целом, эти изменения позволят существенно усилить защиту прав собственности и интересов граждан в сфере недвижимости.\n\n---\nИсточник: https://elcode.ru/service/news/obzory-zakonodatelstva-dlya-sudey/28-12-21-s-1-marta-2023-goda-v-gk-rf-poyavyatsya-n\n/g Как реализовать аутентификацию с помощью Google OAuth 2.0 в приложении на Python?\nДля реализации аутентификации с помощью Google OAuth 2.0 в приложении на Python, вы должны выполнить следующие шаги:\n\n1. Создайте новое учетную запись проекта на Google Developers Console.\n2. В разделе \"api и сервисы\" выберите \"Учетные данные\" и нажмите кнопку \"Создать учетные данные\".\n3. Выберите \"OAuth-клиент ID\" и выберите тип приложения \"Другое\".\n4. Введите название приложения и нажмите кнопку \"Создать\".\n5. Пройдите по шагам настройки OAuth 2.0, включая настройки полномочий, добавления списка авторизованных URI-адресов и создание конфигурационного файла с секретным ключом и клиентским идентификатором.\n6. Установите библиотеку Python `google-auth` и используйте ее для выполнения аутентификации в вашем приложении.\n\nВот простой пример кода для аутентификации с помощью Google OAuth 2.0 в вашем приложении на Python:\n\n```python\nfrom google.oauth2 import service_account\n\n# Загрузка секретного ключа в переменную credentials\ncredentials = service_account.Credentials.from_service_account_file(\n    'path/to/config.json')\n\n# Использование credentials для выполнения запросов к API\n# ...\n```\n\nВ этом примере вы должны заменить путь к файлу конфигурации вашего проекта на Google Developers Console. Также помните о необходимости настройки параметров авторизации OAuth 2.0 для вашего приложения.\n\n---\nИсточник: https://developers.google.com/analytics/devguides/config/mgmt/v3/mgmtPython?hl=ru\n/g где посидеть в Санкт-Петербурге в пятницу?\nВ Санкт-Петербурге множество мест, где можно провести пятничный вечер. Ниже представлены несколько вариантов:\n\n1. Бар \"Малая Колокольная\". Уютное заведение с широким выбором коктейлей и пива, атмосферой спокойствия и комфорта.\n\n2. Ресторан \"Terrassa\". Это заведение находится на крыше здания с панорамным видом на город. Здесь можно насладиться не только вкусной едой, но и прекрасным видом на Санкт-Петербург.\n\n3. Клуб \"Мутабор\". Один из самых популярных ночных клубов в городе с оригинальным интерьером и качественной музыкой.\n\n4. Крафтовый паб \"Jaws\". Здесь можно попробовать разнообразное пиво, а также перекусить вкусными закусками.\n\n5. \"Бархаты\". Это место подходит для тех, кто любит роскошь и элегантность. Здесь представлен широкий выбор коктейлей и блюд высокой кухни.\n\n6. Ресторан \"Felix\". Это заведение с многолетней историей и знаменитым интерьером. Здесь можно насладиться вкусной едой и атмосферой старой Европы.\n\n---\nИсточник: https://www.tourister.ru/world/europe/russia/city/saint_petersburg/tips/7418\n/g Как сделать распознавание голоса на Python?\nДля распознавания речи на Python можно использовать библиотеку SpeechRecognition, которая поддерживает несколько API распознавания речи, включая Google, Microsoft и другие. \n\nВот пример кода для распознавания речи с помощью библиотеки SpeechRecognition:\n\n```\nimport speech_recognition as sr\n\n# Создаем объект Recognizer\nr = sr.Recognizer()\n\n# Открываем файл с записью речи (или используем Microphone для записи в реальном времени)\nwith sr.AudioFile('audio_file.wav') as source:\n    audio_data = r.record(source)\n\n# Используем Google Speech Recognition для распознавания текста на основе аудио\ntext = r.recognize_google(audio_data, language='ru-RU')\n\n# Выводим результат распознавания\nprint(text)\n```\n\nВ этом примере мы создаем объект `Recognizer`, который позволяет нам работать с записями звука. Затем мы открываем аудио файл и записываем данные аудио в переменную `audio_data`. Затем мы используем функцию `recognize_google` для распознавания текста на основе аудио. В результате мы получаем распознанный текст.\n\nБиблиотека SpeechRecognition также поддерживает распознавание речи в реальном времени с помощью микрофона, что может быть полезно для создания приложений для голосового управления.\n\n---\nИсточник: https://vc.ru/dev/286441-raspoznavanie-i-analiz-rechi-s-pomoshchyu-biblioteki-speech-recognition-pyaudio-i-librosa\n/g Что такое геокэшинг и как начать заниматься этим видом активного отдыха?\nГеокэшинг - это игра на открытом воздухе, в которой участники отыскивают спрятанные на заданных координатах контейнеры, содержащие записки или жетоны, которые можно обменять на другие призы. Это интересный способ активного отдыха и занятий спортом.\n\nЧтобы начать заниматься геокэшингом, необходимо:\n\n1. Зарегистрироваться на сайте геокэшинга (например, на geocaching.com или geocaching.su);\n2. Найти тайник с помощью координат, указанных на сайте;\n3. Найти контейнер и сделать запись в его блокноте или ответить на виртуальный вопрос;\n4. Обменять найденный жетон или записку на другой приз;\n5. Пополнить \"коллекцию\" найденных тайников и получить удовольствие от активного отдыха на свежем воздухе.\n\nДля занятий геокэшингом можно использовать смартфон или GPS-навигатор для определения координат и поиска тайников. Кроме того, можно присоединиться к группе геокэшеров и участвовать в организованных поисках и соревнованиях.\n\nЗанятия геокэшингом отлично подходят для всех, кто любит проводить время на природе и в поисках приключений. Попробуйте это увлекательное занятие и получайте удовольствие от новых открытий и знакомств!\n\n---\nИсточник: https://geocaching.su/?pn=110\n \n/g  Какие есть способы уменьшения уровня стресса в жизни?\n  \nСуществует множество способов, которые помогают уменьшить уровень стресса в жизни, вот некоторые из них:\n\n1. Физическая активность: регулярные занятия спортом или физическими упражнениями помогают выпустить накопившееся напряжение и снизить уровень стресса.\n\n2. Расслабляющие практики: медитация, йога, глубокое дыхание и другие расслабляющие практики помогают снять напряжение и улучшить качество сна.\n\n3. Питание: здоровое и сбалансированное питание может помочь снизить уровень стресса.\n\n4. Сон: достаточное количество качественного сна (около 7-8 часов в день) помогает организму восстановиться и справиться со стрессом.\n\n5. Планирование: планирование своего времени и задач помогает снизить уровень стресса, предотвращая перегрузку и неожиданные ситуации.\n\n6. Техники управления стрессом: такие техники, как позитивный подход к жизни, умение принимать решения и управлять своими эмоциями, могут помочь справиться со стрессом в повседневной жизни.\n\n7. Общение: поддержка со стороны семьи, друзей или коллег может помочь снять стресс и преодолеть трудности.\n\n---\nИсточник: https://www.wrike.com/ru/blog/13-sposobov-bystrogo-snyatiya-stressa-na-rabochem-meste/\nВыводы:\nИспользуя такой подход к запросам к chatGPT мы получаем принципиально другие ответы. Думаю в каких-то случаях это может сократить время на поиск информации.\nА что думаете Вы о таком подходе к поиску информации?\nЕсли будут вопросы по реализации бота, пишите в мой \nТГ\n.\n \n ",
    "tags": [
        "chatgpt",
        "python",
        "search",
        "google",
        "telegram",
        "telegrambot"
    ]
}