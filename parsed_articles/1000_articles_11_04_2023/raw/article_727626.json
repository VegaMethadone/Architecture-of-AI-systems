{
    "article_id": "727626",
    "article_name": "Релиз Django LTS 4.2: обзор изменений и необходимости обновления",
    "content": "В апреле 2023 года \nвышла новая LTS-версия Django Web Framework\n, одного из самых популярных фреймворков для веб-разработки на Python.\n«Вышла новая версия! Почему вы до сих пор не перешли на неё?» — такой вопрос часто возникает у студентов, изучающих этот фреймворк на курсах программирования. Аналогичный вопрос можно услышать и от начинающего специалиста, который недавно приступил к выполнению своих обязанностей в качестве бэкенд-разработчика.\nА стоит ли сейчас вообще начинать новый проект на Django или изучать этот фреймворк?\n В этой статье я помогу разобраться с этими и другими вопросами. Мы поговорим о разных типах релизов Django, посмотрим на главные изменения в новом и затронем основные аспекты, которые следует учитывать при обновлении версии Django в проекте.\nЕвгений Бартенев\nтехлид и автор курса \n«Python-разработчик»\n в Яндекс Практикуме\nРазличие релизов\nДля начала разберёмся в различных типах обновлений фреймворка, которые доступны разработчикам. Они делятся на три основные категории:\nФича-релизы (Feature releases).\n Это обновления, которые обычно выходят каждые восемь месяцев. Они включают в себя новые функции, возможности, оптимизации и улучшения существующих компонентов.\nРелизы исправлений (Patch releases).\n Эти обновления выпускаются по мере необходимости и предназначены для устранения ошибок, проблем с безопасностью и других недоработок, обнаруженных в рамках соответствующих фича-релизов. Релизы исправлений позволяют разработчикам поддерживать стабильность и безопасность своих продуктов.\nLTS-релизы (Long-term support releases).\n Некоторые фича-релизы получают статус LTS, что означает «долгосрочная поддержка». В таких релизах исправления, связанные с безопасностью и стабильностью работы, гарантированно будут выходить на протяжении определённого периода времени, который обычно составляет три года. Это обеспечивает разработчикам возможность использовать стабильные версии фреймворка для своих проектов, не опасаясь быстрого устаревания выбранной версии или прекращения поддержки со стороны команды разработчиков.\nВсе выпущенные релизы всегда доступны к загрузке. На практике это означает, что можно установить и использовать любую опубликованную версию, например Django 1.4.22, но получить к ней обновления уже не получится.\nНа момент написания статьи самой новой LTS-версией является 4.2 LTS, расширенная поддержка которой прекратится в апреле 2026 года. Обновления к предыдущей LTS-версии Django 3.2 перестанут выходить в апреле 2024 года.\nЕсли в вашем проекте используется именно версия 3.2, то переживать не стоит. После даты окончания поддержки проект не «превратится в тыкву»: просто для этой версии фреймворка перестанут выходить патч-релизы.\nОбзор ключевых изменений Django в версии 4.2 LTS\nКаждый раз, когда выпускается новая версия программного обеспечения, она сопровождается детальным обзором всех внесённых изменений. Давайте посмотрим, что изменилось в версии 4.2, основываясь на \nофициальной документации\n.\nПоявилась поддержка библиотеки Psycopg 3\ndjango.db.backends.postgresql\n — это адаптер базы данных Django для работы с PostgreSQL. Этот адаптер предоставляет реализацию специфических функций PostgreSQL и позволяет использовать эту базу данных в Django-приложении.\nТеперь он поддерживает библиотеку psycopg версии 3.1.8 или выше. Чтобы воспользоваться новой возможностью — достаточно установить библиотеку psycopg, а сам адаптер в настройках менять не надо. Стоит также помнить и о том, что поддержка psycopg2, вероятно, в будущем будет прекращена.\nПоявилась возможность добавлять комментарии к таблице и её столбцам при описании модели\nТакие новые параметры, как \nField.db_comment\n и \nMeta.db_table_comment\n , позволяют добавлять комментарии к столбцам и таблицам соответственно. Например, вот так:\nfrom django.db import models\n\n\nclass Post(models.Model):\n    text = models.TextField(db_comment='Post text')\n    pub_date = models.DateTimeField(\n        db_comment='Date and time when the post was published',\n    )\n\n    class Meta:\n        db_table_comment = 'Post details'\n\n\nЭта возможность может оказаться полезной для того, чтобы документировать поля для коллег, у которых есть доступ к базе данных, а к вашему коду — нет.\nУсовершенствована защита от BREACH-атаки\nАббревиатура BREACH расшифровывается как \nBrowser Reconnaissance and Exfiltration via Adaptive Compression of Hypertext\n. Это атака на веб-приложения, которая эксплуатирует сжатие данных и криптографию, чтобы получить доступ к конфиденциальной информации. Звучит сложно, но на практике всё проще.\nВеб-сайты и браузеры обычно используют сжатие данных (например Gzip) для уменьшения объёма передаваемых данных и ускорения загрузки страниц. Они также почти всегда используют протокол HTTPS (шифрование) для защиты передаваемых данных от перехвата злоумышленниками.\nBREACH-атака использует сочетание сжатия и шифрования для получения доступа к секретным данным путём анализа трафика между пользователем и веб-сайтом. Атака осуществляется с помощью многократной отправки запросов к целевому веб-сайту и анализа различий в размере сжатых ответов. Это позволяет злоумышленнику постепенно получить информацию о зашифрованных данных, таких как токены или пароли.\nРазработчики Django усложнили жизнь взломщикам: промежуточный слой GZipMiddleware добавляет до 100 случайных байтов в gzip-ответы, чтобы затруднить подобные атаки.\nСтало доступно хранилище файлов в памяти\ndjango.core.files.storage\n — это модуль в Django, который предоставляет механизмы для работы с файловым хранилищем. Он определяет базовый класс \nStorage\n и несколько стандартных реализаций, которые позволяют обрабатывать и хранить файлы на разных системах хранения.\nНовый класс \ndjango.core.files.storage.InMemoryStorage\n предоставляет возможность хранить файлы в оперативной памяти. Такую возможность удобно использовать для разных задач, например для тестировании кода. За счёт отказа от обращения к диску можно ускорить работу автоматических тестов, которые должны взаимодействовать с файлами.\nЭто лишь некоторые существенные нововведения; помимо них есть ещё и \nогромное количество минорных изменений\n, а также изменений, связанных с отключением устаревших возможностей.\nСтоит отметить и некоторые другие обновления, опубликованные после выпуска версии 3.2 LTS. В частности, в версиях 4.0 и 4.1 разработчики выделяют следующее:\nСовместимость с Python\nНачиная с версии 4.0 Django не гарантирует совместимость с версиями Python 3.7 и ниже.\nРабота с часовыми поясами\nВ Django 4.0 и выше для поддержки часовых поясов используется модуль \nzoneinfo\n, входящий в стандартную библиотеку Python 3.9. Если используется Python 3.8, то вместе с Django теперь автоматически устанавливается пакет \nbackports.zoneinfo\n.\nПоддержка Redis\nДобавлен новый бэкенд \ndjango.core.cache.backends.redis.RedisCache\n, предоставляющий поддержку кэширования с использованием Redis «из коробки».\nАсинхронный интерфейс для ORM\nРазработчики Django постепенно внедряют во фреймворк поддержку асинхронности. Асинхронные представления и middleware появились в Django 3.1, а с версии 4.1 Django ORM может обрабатывать и асинхронные запросы, хотя сам ORM остаётся синхронным.\nПоддержка асинхронных методов для классов-представлений (Class Based Views)\nНачиная с версии 4.1, при описании класса-представления, помимо синхронных допускаются и асинхронные методы. Но миксовать их нельзя: все методы должны быть либо синхронными (определены с помощью \ndef\n), либо асинхронными (определены с помощью \nasync def\n). Django автоматически определит асинхронные представления и выполнит их в асинхронном контексте.\nКогда нужно переходить на новую версию?\nВ большинстве реализованных Django-проектов сейчас используется версия фреймворка 3.2. Если на работе вам достанется Django-проект, то с большой вероятностью его версия будет \nниже или равна 3.2\n.\nПри выходе новой версии фреймворка разработчики, как правило, не пытаются сразу перевести свои проекты на неё:\nзачастую это технически сложная задача, которая стоит времени и денег,\nпереводить работающий проект на новую версию фреймворка бывает нерационально: добавленные возможности не стоят затрат, которых потребует переход на новую версию.\nИ это относится не только к фреймворкам, а, например, и к версии интерпретатора. Вы удивитесь, но довольно много проектов всё ещё разрабатываются на Python второй версии.\nРешение об обновлении версии Django в действующем проекте должно основываться на ряде факторов. Рассмотрим несколько ситуаций, когда стоит и не стоит обновлять версию Django.\nКогда стоит обновлять:\nУстранение уязвимостей и поддержка.\n Если ваш проект популярен и подвержен постоянным атакам, а ваша текущая версия Django перестала поддерживаться официально, то обновление до поддерживаемой версии может быть критически важным. Например, если выйдет какой-то отчёт о новой серьёзной уязвимости, то вы должны иметь возможность быстро установить обновление безопасности. А если у вас используется старая версия Django, то его просто не будет.\nСуществует период, когда две поддерживаемые LTS версии пересекаются во времени — это срок продолжительностью в один год, когда надо завершить переход от одной LTS версии на другую. В этом случае вы сможете продолжать получать исправления ошибок и другие обновления безопасности.\nНовые возможности.\n Если новая версия Django предлагает улучшения, которые вам действительно нужны, а их реализация собственными силами невозможна или нецелесообразна, то вам нужно обновиться до требуемой версии.\nСовместимость с другими решениями.\n Обновление Django может быть необходимым, если другие пакеты или зависимости в вашем проекте требуют более новой версии Django и другого способа обеспечить их совместимость нет.\nКогда не стоит обновлять:\nСтабильность.\n Если ваш проект стабилен, работает без проблем, не является критичным для бизнеса, да и просто не нуждается в новых возможностях, то обновляться, как правило, нет смысла. Исключением будет лишь ситуация, когда в использованной версии обнаружена уязвимость, несовместимая с безопасным продолжением работы проекта.\nРиски совместимости.\n Обновление версии Django может привести к проблемам совместимости со сторонними библиотеками, подключёнными к проекту. Например, если новая версия несёт в себе изменения, несовместимые с вашим проектом, то ни к чему хорошему это точно не приведёт.\nОграниченные трудовые ресурсы.\n Обновление Django может потребовать времени и усилий на исправление проблем совместимости, тестирование и развёртывание изменений. Если заняты все разработчики или есть более приоритетные задачи, то, возможно, стоит отложить обновление.\nВ целом решение о том, стоит ли обновлять версию Django в действующем проекте, должно основываться на балансе между потенциальными преимуществами и рисками, а также доступными трудовыми ресурсами. Перед обновлением всегда тщательно изучайте документацию и список изменений, чтобы понять, какие изменения могут повлиять на ваш проект.\nА какую версию Django лучше использовать на этапе изучения фреймворка?\nВ учебном курсе \n«Python-разработчик»\n в Практикуме, в теоретических уроках, практических заданиях на тренажёре, а также при создании и сдаче проектов используется \nDjango версии 3.2\n LTS.\nОднако стоит отметить, что результат обучения не зависит от конкретной версии Django, использованной в рамках учебных проектов. Ведь основная цель курса заключается в том, чтобы предоставить учащимся фундаментальные знания и ключевые принципы работы с фреймворком. Между разными версиями Django эти принципы практически не меняются, а если изменения и происходят, то это случается редко и касается только отдельных деталей, вроде тех, что были описаны выше.\nПо завершении курса учащиеся вооружены достаточными знаниями для успешной работы — в том числе и с новыми версиями фреймворка, включая те, которые ещё не были выпущены. Понимание основных принципов Django позволит перейти к новым версиям фреймворка без значительных усилий.\nЧтобы ознакомиться со списком актуальных версий Django на данный момент, вы можете \nпосетить официальную документацию\n.\nСтоит ли вообще начинать новый проект на Django?\nСогласно различным исследованиям, \nнапример от JetBrains\n, существенная часть действующих веб-проектов на Python написана с использованием одного из трёх фреймворков: Django, Flask или FastAPI.\nПри этом от года к году ключевые игроки не меняются, меняется только процентное распределение между ними. Это означает, что Django может быть хорошим выбором для реализации нового проекта. А наличие хорошей документации, огромного сообщества разработчиков и регулярные обновления являются тому подтверждением.\nЕсли в итоге ваш выбор пал на Django, то мой совет — использовать именно версию LTS. Но в любом случае, итоговый выбор фреймворка и его версии всегда остаётся за командой разработчиков.\n \n ",
    "tags": [
        "яндекс практикум",
        "python",
        "django",
        "django framework"
    ]
}