{
    "article_id": "727592",
    "article_name": "Особенности использования файла конфигурации тестового приложения геометрического ядра C3D",
    "content": "В ходе \nмастер-класса\n по возможностям модуля обмена C3D Converter, прошедшего в рамках конференции C3Days 2022, было продемонстрировано, как сформировать двойник модельного документа для того, чтобы упростить работу по ошибкам экспорта. Предложенный подход требует пересборки тестового приложения для активации и настройки отладочной функциональности. Для программистов это может показаться не критичным, но конечным пользователям, которые не связаны с разработкой, может создать немалые трудности.\nДаже нам, разработчикам ядра C3D, не всегда удобно заниматься внесением правок в тестовые приложения, когда к нам приходят специфичные запросы. Поэтому мы решили облегчить работу с приложением, изменив некоторые его настройки так, чтобы они не требовали пересборки приложения и реализации многочисленных диалогов, которые в какой-то момент начинают досаждать пользователям.\nПример ввода данных, необходимых регулярно, уже реализован в приложении — это ввод ключа активации. Подобным образом мы решили подойти и к решению ежедневных задач, а именно - реализовать хранение настроек в конфигурационном файле тестового приложения, который мог бы загружаться при запуске. \nТестовое приложение в качестве такого файла рассматривает c3d_test.config, размещённый в домашнем каталоге пользователя.\nПервым блоком настроек, ввод которых создавал наибольшую проблему, стали опции плагинов для чтения, не поддерживаемых ядром C3D форматов. Эта функциональность зависит от поставщика плагинов и не входит в комплект поставки, поэтому в исходных кодах тестового (демонстрационного) приложения ей явно не было места. Для работы плагина необходимо знать, как минимум, путь к нему и специфичные для него настройки. И здесь будет уместно сказать о формате конфигурационного файла.\nКак устроен файл конфигурации\nВ отличие от файла с ключом активации перечень настроек может варьироваться в широких пределах, поэтому форма файла из двух строк, каждая из которых имеет своё назначение, явно является неподходящей. В то же время стандартные де-факто форматы - json или xml требуют некоторых усилий по внедрению. Поэтому было выбрано компромиссное решение: файл представляет собой набор строк вида \nключ\n=\nзначение\n, где подстрока \nключ \nформируется по специальным правилам, чтобы можно было однозначно идентифицировать, какой настройке она отвечает, и выбрать правильный способ распознавания подстроки \nзначение\n.\nНапример, в случае с настройками плагина ключи имеют следующий вид:\nconverter.plugin.FULL_PATH=plugin_decorator.dll\nconverter.plugin.settings.C3D_PLUGIN_DECORATOR_TWIN_SAVE_TO=C:/temp\nИтак, все ключи начинаются с \nconverter.plugin. \n.\n \nС одной стороны это облегчает чтение и правку конфигурационного файла человеком, а с другой - не слишком обременительно в плане интерпретации ключа в коде, т.к. это фиксированные строки, которые перечислены в заголовочном файле test_variables.h. Среди этих настроек есть как фиксированное значение (нет точки в конце) \nconverter.plugin.FULL_PATH\n, так и настраиваемое (оканчивается точкой) \nconverter.plugin.settings.\n . В приведённом примере \nC3D_PLUGIN_DECORATOR_TWIN_SAVE_TO\n - настройка, специфичная для плагина \nplugin_decorator.dll\n, и только эта библиотека знает, как правильно её применять, если применять вообще.\nКакие ещё есть настройки\nОтладочные настройки\nНа мастер-классе упоминалось, что для передачи отладочных настроек в конвертеры сформирована специальная структура \nC3DConverterDebugSettings\n, а также продемонстрирована работа с ней на примере записи двойника модельного документа. Активировать запись модельного документа теперь можно с помощью ключа \nconverter.settings.debug.saveModelTwin\n, а запись журнала трансляции – с помощью ключа \nconverter.settings.debug.enableCERRout\n.\nОтладочная отрисовка\nВозможность передачи тестовому приложению в качестве аргумента пути к модели, которую нужно открыть при старте, неожиданно стала источником неудобств, по крайней мере, при работе конвертеров. Дело в том, что у тестового приложения есть отладочная отрисовка, к которой нет обращений при чтении формата c3d, однако она активно задействуется при импорте. Исторически эта вспомогательная функциональность включена по умолчанию, что отвечает требованиям разработчиков компонента C3D Modeler, в котором чтение файла формата c3d считается само собой разумеющимся, а визуализация отладочных данных нужна только при выполнении операций моделирования. У разработчиков компонента C3D Converter, наоборот, самые интересные события происходят именно в процессе чтения, и отладочная отрисовка гарантированно снижает производительность, поскольку, работая неизбирательно, усложняет процесс отладки. Поэтому для чтения моделей из форматов, отличных от c3d, как правило, выставляется настройка \napp.debug.draw\n=\nfalse\n.\nМногопоточность\nСхожая ситуация имеет место и с многопоточностью. По умолчанию \napp.multithreading_mode\n=\n31\n, но в особых случаях задаётся требуемое значение.\nНастройки импорта\nПри импорте моделей в зависимости от конфигурации диалоги, уточняющие настройки импорта, могут как вызываться, так и не вызываться. Это решение является компромиссным, поскольку, с одной стороны, предоставляет наиболее часто используемые настройки импорта разработчикам, а с другой — сохраняется возможность сравнительно легко избавиться от необходимости на них реагировать в случае применения настроек по умолчанию.\nТеперь управление сшивкой и объединение подобных граней также перенесено в конфигурационый файл. Для выключения сшивки и объединения подобных граней нужно задать \nconverter.settings.stitch_on\n=\ntrue\n и \nconverter.settings.join_similar_faces\n=\nfalse\n.\nНа иллюстрации виден результат работы алгоритмов сшивки и объединения подобных граней.\nКак вернуть привычный режим работы\nВсе настройки (за исключением отладочных настроек конвертеров), которые задаются через файл конфигурации, по-прежнему можно изменять в меню пользовательского приложения или в диалогах. Если для решения какой-то задачи нужно работать с настройками приложения по умолчанию, необязательно удалять или переименовывать сам файл.\nНапример, если в одном сеансе работы нужно управлять объединением подобных граней, можно вернуть диалоговое окно. Для этого достаточно в начале строки, где задаётся опция, поставить решётку:\n#converter.settings.join_similar_faces=true\nТаким образом тестовое приложение проигнорирует строку целиком и не будет пытаться найти несуществующую опцию.\nЗаключение\nНам, как разработчикам, некоторые операции при работе с ядром кажутся настолько привычными и очевидными, что некоторые вопросы пользователей ставят в тупик точно так же, как порой предлагаемые нами решения не учитывают особенности наших рабочих мест.\nИспользование файла конфигурации позволит минимизировать количество диалогов - препятствий на пути к получению результата. Кроме того, хранимые таким образом настройки избавят наших пользователей от необходимости объяснять, какие значения они вводили и в какие поля, особенно если языки интерфейсов будут отличаться.\nАлександр Спиваков\nРуководитель отдела разработки модуля обмена данными C3D Labs\n \n ",
    "tags": [
        "converter",
        "c3dkernel",
        "c3d toolkit",
        "c3d labs"
    ]
}