{
    "article_id": "727562",
    "article_name": "Опыт портирования Eclipse 4diac на KasperskyOS CE",
    "content": "В настоящий момент в промышленности активно внедряется высокотехнологичная стратегия развития, называемая индустрией 4.0, которая предполагает активное внедрение информационных технологий в промышленное производство, а также масштабную автоматизацию бизнес процессов и использование систем искусственного интеллекта. Перспективным подходом к построению гибких систем управления для автоматизированных систем, разрабатываемых для индустрии 4.0, является использование языков программирования стандарта IEC 61499.\nIEC 61499 – это международный открытый стандарт на языки программирования для разработки распределенных систем управления и автоматизации. Данный стандарт предлагает вести разработку алгоритмов управления в виде связанного графа функциональных блоков, реализующих алгоритм управления. Существуют как проприетарные, так и открытые реализации среды исполнения IEC 61499. Среди реализаций среды исполнения IEC 61499 с открытым исходным кодом, одной из наиболее функциональных является среда Eclipse 4diac forte, а разработка алгоритма управления для этой среды производится в интегрированной среде разработки Eclipse 4diac IDE. Дополнительная информация по архитектуре Eclipse 4diac была представлена в нашей предыдущей статье (смотри источник №3).\nАвтоматизация производственных процессов помимо очевидных преимуществ имеет и ряд сложностей. Одной из проблем является риск подвергнуться кибератакам. Возможным решением является  разработка защищенной реализации для среды исполнения IEC 61499 для KasperskyOS. Для этого требуется реализовать киберимунную систему управления путем портирования среды исполнения IEC 61499 Eclipse 4diac forte на операционную систему KasperskyOS. Процесс портации Eclipse 4diac forte включает:\nПроектирование архитектуры\nСоздание проекта для сборки forte на KasperskyOS CE\nМодификация 4diac forte\nРазработка специфичных для KasperskyOS функциональных блоков: \nРабота с GPIO\nУправление моторами для Alphabot\nРазработка слоя взаимодействия для KasperskyOS IPC\nОбщая информация о Eclipse 4diac\nВ состав Eclipse 4diac входят:\nСреда разработке Eclipse 4diac\nНабор библиотек функциональных блоков\nСреда исполнения\nСреда исполнения Eclipse 4diac forte представляет из себя бинарный файл, который работает как прикладное приложение. Она содержит в себе функционал всех функциональных блоков, представленных в стандартной библиотеке. В ходе развертывания разработанной программы управления, производится конвертация программы в загрузочный файл с расширением .fboot, который содержит лишь информацию о том, какие функциональные блоки используются в программе, и какие связи между ними  заданы. Далее этот загрузочный файл передается среде исполнения 4diac forte, которая считывая его, исполняет функционал соответствующих функциональных блоков в соответствующем порядке.\nСуществует возможность расширения возможностей среды исполнения Eclipse 4diac forte при помощи добавления новых функциональных блоков. Новые функциональные блоки могут быть разработаны в среде разработки Eclipse 4diac IDE, после чего они могут быть импортированы в файлы исходного кода на языке программирования C++, а затем скомпилированы вместе с исходным кодом остальных функциональных блоков в среду исполнения Eclipse 4diac forte.\nKaspersky Operation System (KasperskyOS) – это защищенная, микроядерная операционная система, разработку которой ведет компания «Лаборатория Касперского». KOS позволяет пользоваться POSIX вызовами при разработке программ. При проектировании этой ОС применялись проверенные и хорошо описанные архитектурные подходы MILS (Multiple Independent Levels of Security) и FLASK (Flux Advanced Security Kernel)\nВ соответствии с архитектурным подходом MILS компоненты системы изолированы друг от друга. Все межпроцессные взаимодействия происходят только через монитор безопасности (Kaspersky Security System) и через типизированные интерфейсы. Таким образом изолированные программные компоненты могут содержать уязвимости или даже вредоносный код, но система в любом случае остается безопасной.\nОписание решения\nРассматриваемая в статье задача заключается в реализации киберимунной системы управления путем портирования среды исполнения IEC 61499 Eclipse 4diac forte на операционную систему KasperskyOS и демонстрация возможности расширение функционала среды исполнения для обеспечения возможности работы с GPIO путем добавления новых функциональных блоков.\nДля портирования forte на KasperskyOS необходимо опрделить 4diac forte в качестве отдельной сущности. Для этого нам следует модифицировать исходную систему сборки 4diac forte для сборки forte в составе образа решения KasperskyOS теми средствами компиляции, что поставляются в составе SDK разработчика KasperskyOS Community Edition[6]. Помимо сущности Forte в нашем решении также присутствует служебная сущность Einit и модуль безопасности KSM-module. За основу решения был взят образец embedded_vfs из SDK разработчика KasperskyOS. Архитектура решения представлена на рисунке 1.\n Рис. 1. Архитектура проекта forte для KasperskyOS \nЗдесь сущность Forte слинкована с библиотеками для работы с файловой системой, сетевым стеком и драйвером GPIO.\nПротестируем наше решение. Для демонстрации работы с вводом выводом в KasperskyOS был разработан  функционального блок для управления моторами AlphaBot[7] через GPIO. Контакты GPIO конфигурируются, и могут выступать как в роли входа, так и в роли выхода. Фото робота AlphaBot представлено на рисунке 2.\n Рис. 2. Робот Alpha bot \nИнтерфейс функционального блока для управления двигателями представлен на рисунке 3.\n \n Рис. 3. Интерфейс функционального блока для управления моторами Alphabot. \nФункционал, который содержит наш новый функциональный блок позволяет выполнять команды (значение на вход CMD) Остановиться, Двигаться вперед (оба колеса крутятся вперед), Двигаться назад (оба колеса крутятся назад),  Поворот налево (правое колесо крутится вперед, а левое остановлено), Поворот направо (левое колесо крутится вперед, а правое остановлено) в течении заданного времени в милисекундах(значение на вход DURATION).\nРеализация команд осуществляется путем выдачи команд на GPIO порт\n \n Рис. 4. Команды для управления моторами Alphabot. \nИнициализируем нужные нам пины и включаем моторчики. После этого в зависимости от поданной команды альфабот либо стоит на месте либо движется вперед/назад либо поворачивает направо/налево в течении определенного количества миллисекунд, которое тоже задается. В самом конце, после выполнения всех действий, мы выключаем моторчики и закрываем GPIO порт.\nДля тестирования решения на практике возможно запрограммировать альфабота двигаться по определенной траектории при помощи нашего нового функционального блока. В качестве траектории выберем прямоугольник. Описание траектории представлено на рисунке 5.\n Рис. 5. Траектория движения альфабота \nСоответствующая программа для задания траектории движения альфабота при помощи нового функционального блока в среде разработки Eclipse 4diac IDE показана на на рисунке 6.\n \n Рис. 6. Программа управления для альфабота для езды по замкнутому маршруту \nИсходный код решения доступен по ссылке \nhttps://gitflic.ru/project/slavikmai/deep-forte-on-kos-with-fboot\n В этом же репозитории можно найти изображения с эталонным выводом решения на базе KasperskyOS.\nМинимальное приложение управления Alphabot с приемом команд по MQTT\n4diac позволяет передавать команды в среду исполнения по различным сетевым протоколам. Например, может быть использован протокол MQTT, для которого есть библиотеки в SDK KasperskyOS CE. Минимальное приложение для получение команд управления (вперед, стоп, налево, направо, назад) Alphabot в 4diac имеет вид:\n \n Рис. 7. Программа управления для альфабота c возможностью получения команд по MQTT \nВ минимальном приложении используются разработанные нами функциональные блоки для управления моторами (AB_FORWARD, AB_LEFT, AB_RIGTH, AB_STOP для управления моторами), функциональный блок для разбора JSON сообщения и выделения команды AB_CMDPARSER и стандартный функциональный блоке SUBSCRIBER, который позволяет работать с различными протоколами. В минимальном приложении используется протокол MQTT, которые есть в составе forte.\nМодульное приложение управления Alphabot с приемом команд по MQTT в изолированной программе\nРазработчики KasperskyOS рекомендуют разделять функциональность приложения на модули для повышения устойчивости приложения к взлому. Мы выделили сетевое взаимодействие по MQTT в отдельное приложение, которое взаимодействует с forte только по IPC. Это позволяет уменьшить вероятность взлом программы forte. Архитектура приложения 4diac в этом случае буде аналогична представленной в предыдущем случае:\n \n Рис. 8. Программа управления для альфабота c возможностью получения команд по MQTT \nВ этом случае взаимосвязь сущностей в KasperskyOS будет выглядеть следующим образом:\n \n Рис. 9. Программа управления для альфабота c изолированной сущностью для получения команд по сети \nДля взаимодействия forte по KasperskyOS IPC был реализован с программой MQTT клиентом был реализован специальный сетевой слой в 4diac forte, который позволяет реализовывать получение команд при помощи стандартного сетевого блока SUBSCRIBER. Архитектура сетевого слоя показана на рис. 10.\n \n Рис. 10. Архитектура сетевого слоя для получения команд по KasperskyOS IPC. \nБолее детальное описание приложения управления Alphabot с приемом команд по MQTT будет дано в следующей статье вместе с ссылкой на исходный код.\nЗаключение\nАнализируя полученный результат можно сделать вывод о том, что имеется принципиальная возможность создания киберимунной системы управления путем портирования среды исполнения IEC 61499, в частности Eclipse 4diac forte на операционную систему KasperskyOS. Использование 4diac forte позволяет в значителной мере скрыть от разработчика прикладного ПО сложность работы с KasperskyOS. При этом есть возможность разрабатывать защищенные приложения, использовать разбиение задач на независимые компоненты и конфигурировать правила взаимодействия.\nСписок источников\nROS documentation. URL: \nhttps://docs.ros.org/en/foxy/index.html\n (дата обращения: 05.09.2022).\nNode-RED documentation. URL: \nhttps://nodered.org/docs/\n (дата обращения: 05.09.2022).\nIEC 61499 и решения с открытым исходным кодом для разработки систем управления URL: \nhttps://habr.com/ru/post/676392/\n  (дата обращения: 05.09.2022).\nZoitl, A., Strasser, T., editors. Distributed control applications: guidelines, design patterns, and application examples with the IEC 61499. Boca Raton, FL: CRC Press Taylor & Francis Group; 2016. ISBN 978-1-4822-5905-6.\nА.Н. Максимов, А.А. Александров, В.Д. Романов МЕТОД ЧТЕНИЯ КАДРОВ С ВИДЕОКАМЕР И РЕАЛИЗАЦИИ АЛГОРИТМОВ ОБРАБОТКИ ВИДЕОИЗОБРАЖЕНИЙ В ПРОГРАММАХ НА ЯЗЫКАХ СТАНДАРТА IEC 61499.// Научно-технический вестник Поволжья,№4 2022. С.96-98\nKasperskyOS Community Edition 1.0. URL: \nhttps://support.kaspersky.com/help/KCE/1.0/ru-RU/KasperskyOS-CE.pdf\n   (дата обращения: 05.09.2022).\nAlphaBot documentation. URL: \nhttps://www.waveshare.com/wiki/AlphaBot\n  (дата обращения: 05.09.2022).\n \n ",
    "tags": [
        "eclipse",
        "4diac",
        "kasperskyos",
        "gpio",
        "alphabot",
        "mqtt"
    ]
}