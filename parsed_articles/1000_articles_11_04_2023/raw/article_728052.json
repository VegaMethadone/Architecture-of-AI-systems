{
    "article_id": "728052",
    "article_name": "Два типа разработчиков ПО",
    "content": "\r\nВ моей голове несколько недель вертелась мысль, крошечная теория о том, как люди воспринимают разработку ПО.\n\r\n\n\r\nСогласно моей теории, есть два типа разработчиков ПО:\n\r\n\n\r\nКогда тип 1 узнаёт о задаче, он думает: «Это легко, люди просто могут делать X».\n\r\n\n\r\nКогда о той же задаче узнаёт тип 2, он думает: «Это очень сложно, ведь для этого нужно, чтобы люди делали X».\n\r\n\n\r\nТип 1 предполагает, что задача проста, если она не техническая, потому что «можно просто попросить людей делать X». Тип 2 считает, что она сложна, \nпотому что\n она не техническая.\n\r\n\n\r\nПример. Тип 1: «Это легко, мы можем просто попросить людей не выполнять развёртывание в это время».\n\r\n\n\r\nТип 2: «Постойте-ка, но что нам делать, \nкогда\n люди будут выполнять развёртывание в это время?»\n\r\n\n\r\nДругой пример. Тип 1: «Это легко, мы просто задокументируем этот процесс и попросим людей следовать документации».\n\r\n\n\r\nТип 2: «Как мы можем гарантировать, что люди вообще это прочитают?»\n\r\n\n\r\nИ ещё один пример. Тип 1: «Это легко, просто создадим систему, которую будут использовать эти четыре стороны, и которая гарантирует, что никто не будет жульничать друг с другом».\n\r\n\n\r\nТип 2: «Это очень сложно, потому что нам нужно сделать так, чтобы четыре стороны использовали одну систему».\n\r\n\n\r\nЯ пока не совсем уверен, как чётко прочертить границу между типами 1 и 2, или как дать им точное определение. Как я и говорил, это \nкрошечная\n теория.\n\r\n\n\r\nОднако если объяснять вкратце, то я бы сказал, что тип 1 не учитывает людей, а тип 2 знает, что в основе всей работы по разработке (и её задач) находятся люди.\n\r\n\n\r\nТип 1 верит в Разработку в большой буквы Р, в которой есть только холодные и непреложные истины; в ней есть математика и физика; это прикладная \nнаука\n. Это то, что мы видим в фильме \n«Марсианин»\n.\n\r\n\n\r\nТип 2 задаст вопрос: «Хорошо, но что, если главному герою „Марсианина“ пришлось бы строить всё это не для себя, а для других?»\n\r\n\n\r\nКак вы могли заметить, я прозрачно намекаю на тот факт, что инженер второго типа знает чуть больше. В то же время, \nвозможно\n, вы почуяли привкус цинизма, как будто мы признаём поражение: невозможно создавать красивые вещи, потому что как только дело касается людей, всё превращается в хаос.\n\r\n\n\r\nОднако на самом деле всё наоборот! Это не цинизм, разработка второго типа \nпринимает\n тот факт, что мы создаём системы с людьми и для людей, и берётся за ещё более серьёзную задачу: выполнять работу, несмотря на создаваемый этим хаос.\n\r\n\n\r\nПотому что когда всё становится хаотичным, начинается \nреальность\n; здесь начинается настоящая работа, когда ты переходишь от маркерной доски к выпуску чего-то действительно ценного, оказывающего влияние на кого-то.\n\r\n\n\r\nТакие разработчики принимают тот факт, что люди не машины, и сколько бы они не говорили, что они рационально мыслят, ты всё равно знаешь, что даже самые упорные защитники принципа «выбирай для работы лучший инструмент» иногда выбирают его из-за красивой GIF в README. Тип 2 знает, что никто не будет читать документацию, если она не увлекает и её сложно читать. Он использует тот факт, что люди установят обновления безопасности, чтобы получить новые эмодзи. Он учитывает, что не все будут следовать рекомендациям, потому что у каждого бывает такой полдень четверга, который ощущается как вечер пятницы.\n\r\n\n\r\nИ добавлю ещё кое-что: мне кажется, что \nименно из-за того, насколько хаотичны\n наши продукты, они становятся такими прекрасными.\n \n ",
    "tags": [
        "разработка программного обеспечения",
        "хаос",
        "люди"
    ]
}