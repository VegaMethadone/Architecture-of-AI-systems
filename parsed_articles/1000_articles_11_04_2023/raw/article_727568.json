{
    "article_id": "727568",
    "article_name": "DevOps Governance в Enterprise. Что такое матрица зрелости?",
    "content": "Всем доброе утро!\nМеня зовут Крылов Александр. \nПрежде, чем мы с Вами познакомимся, следует сказать о чём пойдёт наш сегодняшний диалог и кому он может быть полезен. \nТак же, следует добавить, что данная статья является уточнением и углубление темы доклада с конференции DevOpsConf 2023 - DevOps Governance в Enterprise.\nС видео выступлением конференции можно ознакомиться \nтут\n. \nПерейдём к описанию.\nВ современных реалиях не так просто прийти к бизнесу и сказать: \"Давайте всё автоматизируем, и всё будет хорошо!\" Нет, это так не работает, особенно в крупных компаниях. А если у вас ещё и нет единого процесса внесения изменений, то каждый будет кто в лес по грибы, кто домой за скатертью-самобранкой приходить и навязывать свои идеи.\nНеобходимо выстроить процессы, составить набор базовых требований и договориться со всеми участниками цикла разработки. Для этого должен быть механизм, некий процесс, позволяющий выстроить прозрачный путь и показать всем участникам цикла разработки, в том числе и бизнесу, полезность автоматизации в компании — с использованием понятных для всех метрик, на основе зрелости систем.\nЯ расскажу вам о том, как мы внедряли матрицу зрелости, сколько внедряли и к каким результатам это привело за несколько лет. Мы с вами пройдём путь от появления идеи до получения осязаемых результатов, с учётом трудностей внедрения и появления побочных процессов, вроде базовых требований на старте проектов при работе с вендорами.  \nКому может быть полезна данная статья, спросите Вы? Ответ прост - Представители Enterprise, руководители направлений и управлений, head of DevOps, лидеры центров компетенций и экспертизы, техлиды, тимлиды, CTO.  \nЕсли честно, но статей про smmi много, и они покрывают не малый спектр вопросов и процессов компаний, но подробно описанных кейсов, или чтобы кто-то делился своим опытом в подобном ключе, найти сходу не вышло. Поэтому я решил поделиться этим опытом с Вами.\nА теперь, давайте познакомимся.\nЯ Lead DevOps. За 10 лет работы в ИТ прошёл полный путь от первой линии поддержки до начальника службы devops. \nКрылов Александр\nLead DevOps\nсоавтор и ведущий подкаста \nProITStand\nоснователь телеграмм канала по техническим мануалам \nt.me/devopslove\nпостоянный спикер конференций DevOpsСonf, HighLoad++, Team Lead Сonf с 2020 года\nВсё наше повествование пройдёт по следующему сценарию:\nИсторическая справка\nRnD-решения\nЧто такое матрица зрелости\nЭтапы внедрения матрицы\nРезультат внедрения\nПрежде, чем мы перейдём к теме, нам необходимо погрузиться в контекст, без которого будет не просто окунаться в мир Enterprise со всеми вытекающими. Не просто так было упомянуто, что ближе всего данное повествование будет к людям, близким к Enterprise. По этой причине, считаю необходимым, добавить контекста. В этом нам поможет первый блок нашего повествования - Историческая справка.\nНашу историческую справку мы начнём с того, что у мы Enterprise. И вот некоторые из признаков этого:\nНам 100 лет\nУ нас есть CIO вместо CTO\nГос. регулирование\nVendor engineering\nTop — down решения\nCost center vs profit center\nBuild vs buy-решения\nСогласование ресурсов\nАббревиатуры систем\nУ нас есть «коллеги»\nЧто представляет собой наше ИТ:\nДеление на развитие и поддержку\nНаличие DevOps-культуры\nИспользование Agile, Scrum, Kanban практик\nНаличие внутренней разработки\nИспользование новейших технологий\nБолее 500 человек в ИТ\n~ 70 проектов в год\nFullstack-команда на систему  4-8 человек\nНа крупные проекты более  200 из внешних и внутренних\nМы используем внутренний глоссарий:\nГлоссарий, который мы используем\nСистема - обособленная АС, приносящая бизнес пользу.\nБизнес-критичные системы - АС, которые приносят прибыль компании.\nПроект - активность, затрагивающая одну или более систем с неким бизнес value.\nКоманды - участники цикла разработки: аналитики, разработчики, DevOps, тестирования, лиды.\nРаботы - некая активность, целью которой что-то улучшить в существующих системах.\nТехрук - технический руководитель проекта или системы.\nВладелец системы - заказчик или ответственный за систему, может быть, как со стороны ИТ, так и бизнеса.\nЛид направления - человек, отвечающий за некую орг структуру - тестирование, аналитика, DevOps.\nКуратор - ответственный за проведение каких-либо работ.\nВнутренний ресурс - участники цикла разработки, работающие в стенах компании.\nВнешний ресурс - вендора или подрядчики, консалтинг.\nЦелевая система - та система, которая будет в компании ещё минимум 5 лет.\nНе целевая система - та система, которая заканчивает свой ЖЦ (о нём немного позднее), или планируется выводиться из эксплуатации в ближайшее время, не планирует развиваться.\nБизнес - заказчики работ на доработки систем с целью принесения прибыли компании.\nDevOps as services - подход DevOps, как сервис. В нашем случае сквозная сервисная служба.\nFTE (Full-time employee) - ресурсная единица в проектном офисе - 1 FTE = 1 человек на full time нагрузку на проект/систему/активность.\nЖизненный цикл наших систем представляет собой следующий набор этапов\nЖЦ систем РГС\nПроблемы, которые встали перед нами, которые могут возникнуть и у Вас в при схожем построении процессов, и которые мы решать по ходу повествования:\nПредвестник проблем\nНаличие внутренних и внешних команд (vendor engineering): ~ 60% внутри, 40% внешние\nОтсутствие аудита и реаудита систем\nОтсутствие плана (контроля) развития систем\nНет прозрачности процессов ИТ\nНет понимания ценообразования проектов\n~ 30 % нецелевых систем\nМы понимали, что есть различные пути решения, что мы можем пойти по одному из 3 путей и получить некое что-то, что поможет нам решить эти проблемы.\nВарианты решения сложившихся проблем\nПрежде, чем действовать, стоит изучить более детально предмет вопроса и понять, какие решения на рынке могут быть, какие были кем-то освещены, для решения схожих задач. Поэтому, мы плавно переходим к RnD решения и тому алгоритму, котором мы руководствовались, когда пришли к тому, к чему в итоге пришли. А начали мы наш путь с \nМодель DevOps от Gartner: технологии, люди, процессы, культура\n;\nМодель DevOps от Gartner: технологии, люди, процессы, культура\nИнтересно, бодро, но весьма устарело и лишь немного могло бы подойти по процессам, но не более того, поэтому нам это не подошло. Тут важно понимать, что данный подход сильно устарел, но для своего 2014 года это был прорыв, поэтому, мы пошли дальше. И пришли к \nDORA capabilities\n;\nDORA capabilities;\nУже намного интересней, но, к сожалению, не покрывает всех наших вопросов. \nМетрики эффективности разработки DORA - это полезный инструмент, который может пригодиться, особенно в небольших компаниях или командах для замера базовых метрик эффективности разработки, поэтому рекомендую обратить на него внимание, как и на следующий подход, с которым мы столкнулись, а именно\nDASA DevOps\n;\nDASA DevOps;\nНа самом деле, это один из самых распространённых подходов к процессам DevOps последние 5 лет. Если Ваша компания уже не является стартапом и Ваши процессы не в зачаточном уровне, то этот подход Вам подойдёт. В нашей же ситуации, это выглядит намного теплее, но всё ещё не достаточно, плюс, нужен невероятных размеров напильник, т.к. уже есть много построенных процессов, которые не просто будет сломать и заменить новыми, а потому, мы перешли к следующему варианту:\nОценка аудита со стороны;\nВозможно, что для многих такой вариант окажется ближе всего, но важно понимать, что лучше всего, на мой взгляд, это то, когда это лишь разовая оценка, а после неё надо либо своими силами продолжать развитие, либо силами консалтинга вносить правки. \nВажный поинт, заключается в том, что тут можно подсесть на иглу консалтинга и бесконечных трат, ничего так и не организовав самим. А после ухода консалтинга или отказа от него по каким-то причинам, Вы обречены остаться у разбитого корыта. Отсюда возникает мысль, а что же тогда? Зачастую мы слепы, и не видим очевидного, у нас есть коллеги, которые так же имеют опыт работы в различных компаниях. Вдруг они уже встречались с чем-то подобным и решали схожие проблемы? Поэтому мы начали рассматривать путь:\nОпыт коллег из прошлых компаний:\nделали ли они аудит систем?\nделали ли они это сами?\nкак делали?\nкакие метрики использовали?\nИнтересно, но хватит ли нам знаний? Напрашивается вполне очевидный вопрос. Но, кто не пытается, тот не пьёт шампанское.\nЕсли суммировать выводы всех изысканий, в том числе после уточнения ценников по консалтингу, получили такой результат:\nКонсалтинг — дорого;\nГотового решения на рынке под нас — нет; (понимайте, что и под Вас их так же может не быть, т.к. каждая компания по своему уникальна)\nВыгодней идти своим путём.\nРешение было таково - Создаём своё решение под названием «матрица зрелости систем» на базе существующего опыта коллег с использованием изученных практик. Стартом активности стал февраль 2020 года.\nИ мы плавно переходим к определению того, что же такое матрица зрелости.\nМатрица зрелости систем\n – прозрачный процесс аудита и реаудита систем компании с использованием:\n- практик гибкой разработки;\n- культуры DevOps;\n- современных подходов к автоматизации;\n- современных инструментов CI/CD.\n©  Крылов Александр\nС тем, что такое матрица, определились, теперь перейдём к описанию этапов внедрения. \nВ нашем случае таких этапов получилось 12:\nСбор списка систем\nОпределение ресурсов команды\nДетализация блоков и методологии\nСоставление глоссария по разделам\nСогласование кол-ва уровней зрелости\nОтбор первичных метрик\nПриоритизация работ по системам\nАудит по согласованным метрикам\nПланирование работ\nРеализация\nКонтроль работ\nРеаудит раз в год\n1.\nСбор списка систем\nНа данном этапе происходит обзор всего парка по системам, в нашем случае, их точное количество составило - 34.\nСформировали список и состав команд с разделением на внешние и внутренние.\n2.\nОпределение ресурсов команды\nНа данном этапе надо понять составы команд по ранее собранному списку систем.\nFTE\nАллокация FTE:\nDevOps внутри;\nDevOps снаружи;\nКоманды внутри;\nКоманды снаружи;\nГде есть ресурсы у команд?\n3.\nДетализация блоков и методологии\nНа данном этапе Вам следует понять, какие практики и методологии Вы будете использовать в вашей матрице. В нашем случае, за основу блоков и сабблоков мы взяли:\n-Разработка:\nкодирование;\nмодульное тестирование;\nстатический анализ;\nсборка;\nанализ на уязвимости;\nCI/CD.\n-Тестирование:\nметодология;\nинструменты;\nкоманда.\n-Сопровождение:\nинфраструктура;\nлогирование;\nмониторинг.\n4.\nСоставление глоссария по разделам\nДанный этап один из самых важных, Вам надо определить язык, на котором вы будете говорить в рамках данного процесса. Построить единую систему координат, в рамках которой  Вы будете осуществлять аудит и улучшение ваших процессов разработки.\nТерминология для команд (общий язык);\nОписание процессов (обязано быть);\nОписание инструментов (должно быть);\nОписание методологии (что должно быть и чего не должно).\nВ основу был взят подход, описанный тут - \nhttps://www.rfc-editor.org/rfc/rfc2119\nВсё это начало преобразовываться в некую визуальную форму и стало иметь такой вид, который Вы можете увидеть ниже. При этом, подчеркну, что пустые блоки, это те, что ещё в проработке.\nГлоссарий блока сопровождения матрицы зрелости\n5.\nСогласование кол-ва уровней зрелости\nНа данном Вы определяете подход градации уровней зрелости Ваших систем и определяйте количество уровней, по которым эта зрелость будет определяться. \nУровни зрелости на базе CMMI\nМы поняли, что лучше всего взять модель уровней зрелости на базе \nCMMI\n и это нам подошло. Уровней было выбрано 5. Отмечу, что уровней может быть 3, 5, 7, 10. 3 Для нас оказалось мало, 10 и 7 избыточно, поэтому, мы остановились на 5.\n6.\nОтбор первичных метрик\nНа данном этапе Вам необходимо определить метрики, на основе которых Вы сможете понимать текущее положение дел, текущую зрелость, и то, куда Вы можете и хотите стремиться.\nДля того, чтобы наши достижения могли иметь индикативность, мы вернулись к тому, с чем столкнулись на стадии RnD, а именно обратились к \nметрикам DORA\n, а так же нашли \nagile метрики\n, которые используют atlassian, совместив это с информацией по \nсостоянию devops в 2020 году\nМетрики DORA, agile metrics atlassian, состояние devops в 2020г\nПосле чего глоссарий матрицы начал преображаться. Появились уровни зрелости, метрики, более явная градация на блоки и сабблоки, ниже я выделил это в явном виде.\nНаличие уровней зрелости в глоссарии матрицы зрелости\nРазбиение на блоки и сабблоки глоссария матрицы зрелости\nПоявление индикативных метрик в глоссарии матрицы зрелости\nМетрики лучше всего вынести немного отдельно от глоссария, т.к. они при внедрении и стабилизации процесса, могут часто претерпевать изменения. На текущий момент времени, у нас в наличии имеются следующие метрики:\nНазвание практики\nНазвание метрики\nМодульное тестирование\n% покрытия модульными тестами\nCI/CD\nвремя на сборку при непрерывной интеграции\n% успешных сборок непрерывной интеграции\nвремя на поставку \n% успешных поставок \nМетодология тестирования\nвремя на прохождение смок-тестов\nвремя на прохождение регресс-тестов\n% автоматизации тестовых сценариев\n% ложных срабатываний у автотестов\n% пропущенных дефектов в   интеграционные среды \n% успешно пройденных тестов\nИнфраструктура\nвремя на подготовку нового окружения\nПонятно, что список может меняться, пополняться, а что-то и вовсе потом уйдёт в небытие, но, на мой взгляд, это базовый набор, чуть более шире, чем DORA, но с которого можно начинать.\n7.\nПриоритизация работ по системам\nПолагаю, что данный уровень комментировать избыточно. Берём весь список наших систем и приоритизируем их от 1 до последней цифры.\n8.\nАудит по согласованным метрикам\nНачался этап аудита. Данный этап, на старте, будет самым объёмным. И Вам надо быть готовым к тому, что он не пройдёт гладко и у коллег могут появляться к Вам вопросы, вроде таких:\nЗачем нам это надо?;\nЧто это такое?;\nУ нас нет ресурсов;\nСогласуйте ресурсы;\nИ т.д.\nИ это справедливо, мы внедряем некий монструозный процесс, о котором пока знают ещё не все, не смотря на презентацию. И, конечно же, куда уж тут без сопротивление сторонников чего-либо нового, живущих по принципу - \"Работает, не трогай\". И их можно понять. Поэтому мы стали искать сторонников доказывать и завоёвывать, весьма успешно, большие территории в виде систем и команд. Но, были и те, кто стоял до последнего и никакие доводы им были ни почём. Тут нам помогло то, что мы Enterprise, да и такое бывает, и у нас есть CIO, а именно TOP DOWN безоговорочное решение, которому надо следовать и буйство утихло. \nПонятно, что это подойдёт не всем и придётся матрично горизонтально или снизу искать сторонников и есть множество способов этого, но данное повествование больше не про подавление сопротивления, а про внедрение процесса. Поэтому мы пойдём дальше.\nTOP DOWN решение\nЕсли брать в пример некую призрачную систему, например, на java framework, то собранная информация со всех предыдущих этапов, с разбивкой на статусы, приоритет, вид работ, ответственных и задачи, может выглядеть следующим образом:\nПример отображения части матрицы зрелости\nДалее нам эту самую матрицу надо заполнить на основе ранее созданного глоссария и индикаторов соотношения к нашим уровням от 1 до 5. \nПри этом, возможны пограничные состояния, когда система находится между уровнями. Например, у нас уже все индикаторы 2 уровня есть и мы находимся на нём, но при этом уже соблюдено ряд требований для следующего уровня на 50%, так рождается оценка 2,5. Важно, что в таких случаях лучше не мельчить далее десятых, иначе потом запутайтесь.\nЗаполнение уровней зрелости по системе в матрице зрелости\nЧто касается ресурсного составляющего, то лучше всего расписывать аллокацию ресурсов, как показывает практика, примерно в таком виде.\nТаблица разбиения аллокации ресурсов по работам на матрице зрелости по проекту 1 и проекту 2\nВсе первичные действия, наши сторонники, которых мы приобрели на берегу внедрения процесса, оказались следующие роли:\nТехруки;\nВладельцы систем;\nЛиды направлений (разработка, тестирования, аналитика).\nТо есть, все роли, которые были заинтересованы в улучшениях.\nБывали ситуации, когда приходилось защищать проведение работ перед бизнесом. Как правило, это были небольшие команды на целевых системах, которые преимущественно занимались задачами бизнеса. Давайте с Вами рассмотрим пример защиты проведения работ по улучшению на некой системе.\nНапример, на некой системе Х, у нас есть 2 FTE, разработчика, которые мануально пишут код, мануально занимаются выкладкой и т.д. Это явно задача для того, чтобы сделать улучшение и повысить зрелость. \nВажно! Лучше всего это делать в формате презентации не более 30-40 минут.\nДавайте перейдём к этому кейсу подробней по сценарию, который Вы видите ниже:\nДокажем бизнесу необходимость работ\nОпишем проблематику в виде ограничений на системе N:\nтрудоемкость переноса изменений между средами;\nManual rollback;\nсложность привязки/отслеживания изменений в системе с бизнес-задачами;\nриски изменения одного и того же объекта разными разработчиками;\nсложность передачи задач от одного разработчика к другому;\nневозможность реализации задач по АТ.\nВажно! Данной защитой должен заниматься человек, умеющий говорить с бизнесом на его языке и рассказывать ИТ терминологию максимально понятно любому обывателю.\nОпишем постановку задачи:\nАвтоматизация и организация процессов разработки на функционале системы N — решаемая задача\nВ 2020-м году в БИТ РГС реализуется инициатива по внедрению в ИТ-ландшафт инструментов CI/CD. Система N — как одна из целевых\nРаботы по внедрению основных инструментов методологии CI/CD в процесс разработки, тестирования и эксплуатации системы N планируется реализовать тогда-то.\nОписываем наше решение рассказываем, что есть DevOps и CI/CD простым языком, после чего, переходим к конкретики по реализации с уточнением по стэку, что у нас есть и какие вопросы он решает\nDevOps\nОписание CI\nОписание CD\nОписание мониторинга и логирования\nПосле чего описываем преимущества от внедрения.\nПреимущества проведения работ увеличения зрелости матрицы зрелости\nВкратце, проходим по всему стэку, только не перегружаем слушателей, либо просто говорим пару слов и показываем красивую картинку бизнесу.\nОписание всего стэка CI/CD\nОбязательно, выделяем отдельный слайд под таймлайн внедрения со сроками и описанием возможности параллельности работ, есть такая возможность есть.\nТаймлайн внедрения\nПосле чего описываем какое количество ресурсов потребуется на проведение работ.\nВ случае, если Вы всё грамотно разложили по полочкам бизнесу, то Вы обречены на успех. Да, возможно, не с первой итерации и придётся что-то ещё рассказывать дополнительно, но алгоритм, как показывает практика, рабочий.\n9.\nПланирование работ\nАудит провели, вариант планирования и защиты работ описали, теперь перейдём от частного к общему и проведём полное планирование работ по улучшению зрелости всех систем компании, составив следующий набор артефактов:\nПланирование работ по улучшению зрелости систем и необходимые для этого артефакты\n10.\nРеализация\nПосле завершения этапа планирования, пора переходить к этапу реализации. \nТут важно добавить, что работы лучше разбивать на кварталы с перспективой на год, так их будет проще контролировать. При этом, какие-то работы можно разбить по месяцам или интервалам в 2 недели.\nДля того, чтобы дойти до этого этапа внедрения, нам потребовалось 4 месяца.\n11.\nКонтроль работ\nЛюбые работы следует контролировать, для этого мы стали делать следующее:\nКонтроль работ матрицы\nЧто тут следует добавить. Помимо понятных точек контроля вроде летучек или статусов, хорошо бы, чтобы на каждую систему был выделен некий куратор, который будет следить за общим положением дел и выдерживанием сроков. В нашем случае, кураторами были сотрудники подразделения DevOps, в Вашем, это могут быть SRE, техруки, лиды направлений и т.д.\n12.\nРеаудит раз в год\nПосле всего вышесказанного, необходимо контролировать работы, проводить реаудит раз в год с планированием новых работ, тем самым, пуская данную активность на постоянные рельсы. \nПонятно, что до 5ки доберутся не все системы по ряду причин: система перестала быть целевой, есть ограничение по стэку и т.д. Но, как показывает практика, при желании, можно достичь многого. \nЧто касается развития, то можно назвать уровни, к чему и мы в итоге пришли, периодически обогащать и освежать индикаторы уровней, убирать и добавлять различные метрики и тогда придёт к Вам счастье. Давайте переходить к итогам.\nРеализовано:\nвнедрена матрица зрелости систем;\nсформирован список целевых и нецелевых систем со сроками вывода нецелевых;\nсформированы точки контроля и временные срезы;\nреализован прозрачный контроль за развитием систем;\nпонятен и реализован процесс снижения T2M;\nпроизошла смена фокуса по ресурсам.\nПрофит:\nЕсть единый прозрачный процесс контроля развития систем;\nДетальные метрики зрелости для бизнеса с пониманием, что на что влияет;\nЗа 2 года определено 23 целевых и 11 нецелевых систем и проведено более 30 крупных задач по улучшению.\nЗаключение:\nпри внедрении процесса найдите пилот и того, кому его продать, на ком обкатать;\nполноценное внедрение заняло 4 месяца (до 10 этапа);\nпервая полная картина работ от матрицы – год;\nEnterprise – это небыстро;\nза 2 года можно сделать очень много при желании.\nАртефакты по которым можно найти много чего полезного\nШаблон матрицы зрелости можно найти \nтут\n \n ",
    "tags": [
        "smmi",
        "dora",
        "devops",
        "devopsconf",
        "матрица зрелости",
        "аудит изменений",
        "контроль разработки",
        "управление проектами",
        "agile",
        "sre"
    ]
}