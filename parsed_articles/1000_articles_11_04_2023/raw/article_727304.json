{
    "article_id": "727304",
    "article_name": "Хорошая документация: критерии, методика разработки и личный опыт техписателя",
    "content": "Всем привет! Меня зовут Антон, я 9 лет занимаюсь документацией для программистов и год работаю техническим писателем в IT-департаменте Банка РНКБ. За это время у меня сложилось своё видение «хорошей» документации и методики её разработки, и я решил поделиться им с вами.\nПланирую рассказать всё в двух статьях. Сегодня поговорим о документации для IT-департамента — той, которую распространяют в электронном виде, размещают на отдельном сайте и которой пользуются программисты, тестировщики, аналитики и руководители отделов. Помимо своего опыта, покажу примеры, статьи и исследования на тему ведения документации, которые помогли мне — и могут пригодиться вам.\nТо, к чему хочется прикоснуться.\nКритерии хорошей документации\nНачну с того, что лично для меня является «хорошей» документацией за годы работы и знакомства с публикациями коллег (например,\n \nтакими, \nкак эта\n) по теме я выработал несколько критериев оценки документации. Это не «сборная солянка» — скорее обобщённая шкала измерения качества документации в целом для проекта. Чек-лист — где-то он пересекается с методикой разработки, инструментами и т. д., но без него у меня не выйдет передать суть.\nХорошая документация должна быть:\nс чёткой структурой;\nкраткой и понятной;\nдостоверной;\nс поиском и навигацией;\nс правильными заголовками;\n написанной по шаблонам, с использованием стайлгайдов;\nпротестированной в критических ситуациях.\nСтруктура документации, оглавление\nПорядок, о котором многие мечтают.\nСложно ориентироваться в документах, если всё свалено в кучу. Куда удобнее, когда сразу понятно, что где лежит, и когда находишь документацию там, где и ожидаешь. И в целом правильно организованная структура документации делает лучше жизнь сразу многих людей:\nПользователям \nудобнее искать\n \nчто-то в документации;\nРуководству\n проще оценивать объём работ;\nТехническим писателям\n легче выбрать место для публикации новых статей.\nЕсли вы первый техписатель на проекте, мой совет — начните с разработки оглавления. Оно вам потом и послужит планом работ, и поможет оценить объём и требуемые ресурсы. С ним вы не забудете, какие документы нужно написать, а вашему руководителю будет понятно, сколько потребуется времени.\nДаже если вы пришли в команду, а оглавление там уже было, не бойтесь его изменить, если видите, что можно что-то улучшить. Например, мы в РНКБ постоянно перерабатываем оглавление, потому что к нам всё время попадает что-нибудь новое для сопровождения и объём документации растёт.\nКстати, навыки работы с оглавлением могут пригодиться ещё на собеседовании, потому что при поиске нового сотрудника работодателю важно понять, с чего будет начата работа.\nС оглавлением разобрались, теперь поговорим о разделах. Продумайте категории для статей. Например, я подсмотрел логичное деление по категориям у коллег из Timeweb Cloud вот \nздесь\n. Вкратце: можно выделить 4 вида документации, распределённых по осям «практика — теория» и «обучение — работа». Каждая категория подходит конкретной аудитории с определённым уровнем подготовки. Ну а определившись с категориями, на их основе можно уже построить и оглавление.\nЕщё полезно добавить разделы такого рода:\n Быстрый старт;\nУстановка;\nСловарь терминов;\nЛучшие практики;\nВопросы-ответы.\nОбойтись без них можно, но, как показывает мой опыт, они покрывают большую часть потребностей команд. Мы в РНКБ используем эти разделы и даже создали типовые шаблоны для большинства (но о них я расскажу позже).\nПоявление категорий зависит и от инструмента, который вы используете. Простой пример: в РНКБ до недавнего времени документы хранили в виде отдельных файлов, так что словарь терминов к каждой статье нужно было вести прямо внутри неё. А вот когда мы перешли на другую платформу для ведения документации, то с помощью встроенного плагина смогли ввести единый источник терминов и избавиться от их дублирования по отдельным статьям. Кстати, раз уж зашла речь о терминах, не могу не порекомендовать хорошую статью — «\nГоворим на одном языке. Как создать словарь терминов: 10 шагов\n». Она может пригодиться, если вы собираетесь создавать собственный глоссарий в проекте.\nКраткая и понятная документация\nНаписать ёмкую документацию непросто: на это, бывает, уходит 80% времени, а первый сырой вариант текста часто оказывается громоздким. Пугаться не стоит: путём поиска вариантов со временем вы сможете его улучшить по мере сил. Главное же, о чём вы должны помнить при написании документации, — у ваших коллег будет мало времени на её чтение. Им нужно быстро найти готовое решение задачи и вернуться к своим делам, а не копаться в текстах (и коллеги из Plesk говорят \nо том же\n).\nТак что занимайтесь улучшением документации \nрегулярно\n и объясните всем — заказчикам, коллегам, руководству, — что эта работа важна и её стоит включить в планы.\nСтарайтесь снизить порог вхождения для потребителей документации. Чем она будет проще и понятнее для них, тем лучше. Пишите \nв разговорном стиле\n: такой текст легче воспринимать. Объясняйте простым языком, приводите аналогии, метафоры — используйте все средства, чтобы доступно донести информацию. Добавляйте дополнительные материалы, если они у вас есть. Это могут быть:\nперекрёстные ссылки на поясняющую документацию;\nкартинки и схемы;\nдемопримеры.\nЧтобы было нагляднее, назову несколько примеров документации, на которые я сам ориентируюсь: \nVue.js\n, \nJS API из Яндекс.Карты\n, справочники о Python издательства O’Reilly («Простой Python» и т. д.). Вы в процессе работы можете сформировать свой топ и равняться на него.\nТакже продумайте, как документация будет представлена на сайте и как её будут воспринимать читатели. Помочь в этом могут исследования — их немало, я приведу только некоторые из них:\nВ одной из публикаций на Habr наткнулся на ряд исследований (например, \nздесь\n и \nздесь\n), касающихся восприятия сути текста, а также поиска в нём отдельных слов, в зависимости от количества символов в строке. Если коротко, то людям обычно нравятся тексты со строками в 55–70 символов. В таких текстах читатели лучше понимают смысл и легче отвечают на вопросы, да и читают их быстрее. Зато в текстах с длиной строки в 85–100 символов люди быстрее находят конкретное слово.\nЗдесь\n упоминается проведённое Neilson Norman Group\n \nисследование направления взгляда\n. Полезные для нас выводы отсюда: пользователи читают страницы по F-шаблону, поэтому на них должны быть заголовки, абзацы, маркированные списки, а длина строки — до 90 символов. Так что лучше делать небольшие статьи, которые решают конкретные задачи, и \nважную информацию по теме нужно разместить в первых трёх предложениях на странице.\nДостоверность\nУ потребителей должен быть \nединственный актуальный источник документации\n. В РНКБ кроме технических писателей документацию пишут множество других отделов, включая программистов, тестировщиков, аналитиков и менеджеров проектов. При таком подходе в поиске могут появляться дубли и черновики, которые по-хорошему должны быть скрыты от пользователей. Поэтому мы в обозримом будущем планируем работы по организации единственного источника документации и когда-нибудь поделимся собственным опытом.\nХорошо также ввести \nсистему отметок об актуальности\n документа. Особенно она важна, если у вас документацию пишут в том числе сами разработчики, а технические писатели проверяют её актуальность и утверждают уже потом. Не скажу, что такая практика плохая: всё-таки иногда лучше иметь хоть какую-то документацию, чем ничего. Но документация для клиентов должна быть только актуальной.\nПоиск и навигация\nПоиск — одна из главных точек входа в документацию, он должен быть лёгким в работе.\n \nХорошо, если поиск у вас — одна строка в пользовательском интерфейсе. Ещё лучше, когда таким поиском можно пользоваться без отдельной инструкции к нему. Если же для поиска нужны дополнительные телодвижения — значит, что-то с ним не в порядке\n.\nВозможность отфильтровать информацию по \nметкам\n и \nоблако тегов\n тоже могут пригодиться, но это низкоиспользуемые точки входа. Я в своей практике убедился, что если проекту понадобились такие инструменты, то стоит уделять больше внимания структуре документации, названиям статей и поисковым сниппетам\n.\nКак бы выглядели настройки поиска, которым не хочется пользоваться.\nПроверьте, настроена ли \nнавигация по странице\n. Лучше сделать её в виде плавающего бокового меню. Особенно если текст статьи помещается на нескольких экранах — тогда читателю будет удобно с ним работать.\nПравильные заголовки\nЗаголовки определяют качество поисковой выдачи, отсекают дубли статей из разных разделов и выполняют ещё множество важных функций. Поэтому их нужно тщательно продумывать — вплоть до оптимизации их длины. Где можно, пишите короче, но и не увлекайтесь: если аббревиатуры используются редко и не на слуху, лучше их избегать. Простой пример из практики РНКБ: у нас в документации есть РП и РА. Очевидно ли вам, что это «руководство пользователя» и «руководство администратора»? Следите за подобными моментами, ищите другие способы сокращать заголовки, перебирайте в уме формулировки в поисках лучшей.\nНапример, у вас есть:\nРуководство пользователя по установке IDE PyCharm\nСделайте:\nУстановка IDE PyCharm\nШаблоны, стайлгайд\nВ РНКБ для большинства документов есть шаблоны — и это здорово упрощает жизнь и нам, техписателям, и пользователям. Коллеги из Яндекса в одном из докладов на \nГипербатоне\n говорили о важности единого стиля в оформлении документации, и я с ними соглашусь: это улучшает пользовательский опыт документации. Проще говоря, \nпользователь ожидает увидеть схожую по теме документацию на том же месте, где видел её в предыдущий раз на другой странице. \nТак что разработка стайлгайда — это важно, и заниматься ею тоже приходится техписателям.\nО чём редко упоминают\nТут хочу поговорить о критерии, который обычно не встретишь в статьях о документации, но я считаю его важным. Речь об удобстве пользования документацией, когда у читателя стресс. Я сам попадал в такие ситуации  и честно скажу: один и тот же текст воспринимается по-разному, когда ты спокоен и когда на нервах, с горящими сроками и ничего не успеваешь. По моим ощущениям в таких условиях ключевые критерии хорошей документации — это \nналичие ответа \nи \nскорость\n \nего нахождения.\nВажно находить уязвимые места документации, чтобы от работы с ней стресса не становилось ещё больше. Здесь ценной будет обратная связь от программистов или руководства: прислушайтесь к ним и узнаете, что ещё стоит проработать. А ещё можно синтезировать и пройти «стресс-тесты» заранее, чтобы убедиться в качестве документации. Когда-нибудь это вас спасёт.\nМоя методика разработки документации\nКак правильно разрабатывать документацию, чтобы и заказчик, и исполнитель, и потребители остались довольными? У меня есть методика, своего рода «идеальный план», помогающая избежать проблем. Правда, оговорюсь, что в РНКБ мы применяем её не полностью — чтобы \nне уходить в формальности там, где в этом нет необходимости\n.\nЯ разбил этот план на этапы:\nЭтап 1. Описание работ и критерии сдачи:\nПолучить описание задачи.\nОпределить критерии сдачи работы.\nУтвердить лица, которые будут:\nконсультировать по теме;\nпроверять результат;\nпринимать решение о завершении работы.\nВключить в план работ этим лицам время для выполнения их ролей.\nЭтап 2. Подготовка оглавления:\nРазработать план статьи.\nПроверить его с разработчиком или заказчиком.\nИсправить замечания.\nУтвердить.\nЭтап 3. Разработка черновика:\nСобрать первичную информацию по каждому разделу плана статьи.\nСоздать первый черновик, строго следуя плану.\nВыполнять итерации:\nпроверить черновик с консультантом;\nисправить замечания.\nДать тексту отлежаться, временно переключившись на другую задачу.\nЭтап 4. Публикация статьи:\nВычитать текст (опечатки, стилистическое оформление текста и т. д.).\nИсправить неточности.\nУтвердить текст.\nОпубликовать статью на сайте.\nЭтап 5. Сбор обратной связи:\nОпубликовать новость или сделать рассылку о новой статье.\nСобрать замечания через формы комментариев и опросов о качестве статьи.\nДоработать статью по замечаниям.\nЭтот план позволяет сохранить баланс между желаниями заказчика и исполнителя. С одной стороны, техписатели защищены тем, что за каждый этап отчитываются заказчику, а проверку достоверности текста делегируют консультантам и проверяющим. С другой стороны, у заказчика часто нет времени вычитывать текст и ему проще оценить работу по формальным критериям: текст написан, замечаний нет, в новостях и рассылке нет критики по существу, в голосовании оценки хорошие.\nКстати, об оценках. Мы в РНКБ начали рассылать новости со списком обновлений в документации только недавно. Когда мы просили оценить качество работ, вовлеченность была невысокая: оценку выставили менее 1% сотрудников. Большие коллективы инертны, так что подобная обратная связь — обычное явление. Но с этим можно работать: попытаться донести до разработчиков, что участвовать в проверке документации — в их же интересах, потому что от неё зависит и их работа.\nНа этом, думаю, можно закончить тему критериев хорошей документации. Если мой опыт был вам интересен и полезен, напомню, что впереди — вторая часть. Там я буду говорить об инструментах, которыми мы пользуемся ежедневно для разработки документации.\nНапоследок расскажу ещё немного о нашей команде техписателей в РНКБ. Каждый день мы:\nдокументируем новые интеграционные сервисы;\nразрабатываем руководства администратора, пользователя и т. д.;\nактуализируем и перерабатываем legacy-документацию;\nнаходим, тестируем и внедряем новые инструменты для разработки, оценки качества и представления документации на внутреннем портале IT-департамента;\nконсультируем по документации и поиску нужного ответа (как сервисы «Вопрос-ответ», Stack Overflow).\nДокументацией на бумажных носителях и в PDF, разработкой технических заданий, бизнес-требований и прочих документов запуска проекта мы не занимаемся (это обычно берут на себя менеджеры проектов и аналитики).\nНас в команде пятеро, но мы планируем расширять штат. Так что если вы техписатель, ищете работу и вам интересны описанные выше задачи нашей команды, \nзагляните к нам на HH.ru\n — возможно, мы с вами познакомимся не только как автор и читатели на Хабре. Да, если вы не техписатель — всё равно заглядывайте: у наших коллег много других вакансий.\nТехнические писатели в моей команде работали раньше и в других IT-компаниях, и даже если сейчас мы чего-то не делаем, то опыт в части документации у нас всё равно очень большой и включает самые разные аспекты. Если вам что-то интересно и вы не можете найти статьи о каких-то тонких нюансах документации — пишите об этом в комментарии, задавайте вопросы. Возможно, в наших будущих статьях мы разберём что-то и из этих тем.\n \n ",
    "tags": [
        "документация it",
        "документация проекта",
        "учебный процесс в it",
        "технический писатель"
    ]
}