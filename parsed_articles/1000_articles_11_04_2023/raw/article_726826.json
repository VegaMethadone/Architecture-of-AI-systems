{
    "article_id": "726826",
    "article_name": "Python Дайджест: как сделать CI для OpenSource проекта с Github Actions",
    "content": "Экватор рассказа про техническое оживление Python Дайджест проекта. Ранее \nрассказал\n как перейти с Python 3.4 на Python 3.11 и \nавтоматически актуализировать\n весь код. В этой части расскажу про организацию CI для Open Source проекта на основе Github Actions — как гонять тесты, проверять код, зависимости, разворачивать приложение и делать бэкапы на внешнее хранилище.\n\r\n\n\r\n\nСодержание цикла статей\n\r\n\n\r\n\n1 часть: Как обновиться с Python 3.4 до Python 3.11, если pip уже сломан\n\r\n\n2 часть: Как актуализировать всю кодовую базу с помощью pre-commit\n\r\n\n3 часть: Как сделать CI для OpenSource проекта с Github Actions\n\r\n— вы здесь — \n\r\n\n4 часть: Как ускорить Django проект до (почти) максимума\n\r\n\n\r\n\nСостояние после форматирования кода\n\r\n\n\r\n\nПриложение запускается как локально, так и на сервере, тесты проходят.\n\r\n\nКод можно запускать на Python 3.11, а зависимости актуальны и добавлены через \npoetry\n.\n\r\n\nЕсть сервер на Ubuntu 14.04, бэкапы, сертификаты и прочее — обновляются руками.\n\r\n\nВыкатка изменений в приложение происходит руками через git pull & restart commands.\n\r\n\n\r\n\nЗадача (часть 3) — убрать необходимость заходить на сервер для типовых операций\n\r\n\nВ Python Дайджест есть три операции, которые хотелось бы сразу автоматизировать:\n\r\n\n\r\n\nПрогон тестов и проверка кода через pre-commit (вторая часть) — \ntests.yaml\n\r\n\nДеплой приложения на сервер — \nci.yaml\n\r\n\nБэкап базы данных и загрузка на внешний диск — \nbackup.yaml\n\r\n\n\r\n\nПлан работ\n\r\n\n\r\n\nВыбрать CI для автоматизации рутины\n\r\n\nПодготовить новый сервер\n\r\n\nНастроить CI для деплоя и бэкапа приложения\n\r\n\n\r\n\nКак выбрал Github Actions в качестве CI\n\r\n\nЛет 5 назад, Travis CI был \"CI по умолчанию для Open Source проектов\", с помощью него запускали тесты, делали сборки, даже работали с серверами по SSH. Было удобно и бесплатно.\n\r\n\nСейчас \"CI по умолчанию для OpenSource на Github\" — это Github Actions. Это средство автоматизации, которое позволяет к событиям взаимодействия с репозиторием привязать выполнение почти любых действий. Про него на хабре несколько раз писали — \nраз\n, \nдва\n, \nтри\n.\n\r\n\nGithub Actions крут тем, что сами Actions — это плагины (часто скрипты или Docker образ), которые пишут все кому не лень и выкладывают на \nGithub Marketplace\n.\n\r\n\nРаботает это так:\n\r\n\n\r\n\nКогда меняем что-то в репозитории — push, pull request, по кнопке, по расписанию и т.д. — возникает событие;\n\r\n\nGithub Actions ловит это событие и запускает агента;\n\r\n\nагент поднимает контейнер с указанной версией операционной системы;\n\r\n\nдальше внутри контейнера можете делать что пожелаете.\n\r\n\n\r\n\nА Github Action плагины — это готовые действия, которыми вы можете стянуть код из репозитория, преобразовать его, куда-то сохранить и прочее. Плагинов много.\n\r\n\nКакие Github Actions выбрал\n\r\n\nДля моих задач хватило таких плагинов. Они покрывают действия от скачивания кода репозитория до сборки образа в Docker Hub и подключения к внешнему серверу по SSH.\n\r\n\n\r\n\nactions/checkout\n — стянуть код репозитория\n\r\n\nsnok/install-poetry\n — установить \npoetry\n\r\n\nactions/cache\n — чтобы переиспользовать virtualenv окружение\n\r\n\npre-commit/action\n — запустить все \npre-commit\n проверки\n\r\n\nactions/setup-python\n — установить необходимую версию python\n\r\n\ncodecov/codecov-action\n — залить результаты прогона тестов в codecov\n\r\n\nrlespinasse/github-slug-action\n — для удобства использования gituhb переменными\n\r\n\ndocker/metadata-action\n — подготовить переменные для сборки образа\n\r\n\ndocker/setup-qemu-action\n — окружение для сборки Dockerfile\n\r\n\ndocker/setup-buildx-action\n — чем будем собирать Dockerfile\n\r\n\ndocker/login-action\n — авторизоваться в DockerHub для хранения образа\n\r\n\ndocker/build-push-action\n — собрать и залить Docker образ\n\r\n\nappleboy/scp-action\n — для загрузки файлов на сервер\n\r\n\nappleboy/ssh-action\n — для исполнения команд на сервере\n\r\n\n\r\n\nВажное примечание. Эти Github Actions популярны, ими пользуются тысячи участников сообщества. Однако их разрабатывает открытое сообщество, что не гарантирует стабильность, корректность и совместимость новых и старых версий. Изучайте состав, скрипты и Docker образы на предмет ошибок и очевидных уязвимостей перед использованием. \n\r\n\nКак подготовил сервер\n\r\n\nСтарый сервер был на устаревшей Ubuntu 14.04, для которой не удалось найти живых репозиториев с пакетами и обновиться выше. Также сама система была сильно замусорена. Поэтому решил, что проще создать новый сервер и настроить.\n\r\n\nМне не хотелось получить мусорный сервер спустя очередные 5 лет, поэтому решил запускать приложение с помощью \ndocker compose (docker_compose.prod.yml)\n, собирая \nDocker (Dockerfile)\n образ приложения.\n\r\n\nНо для начала настроил сервер с актуальной Ubuntu.\n\r\nPython Дайджест хостится на FirstVDS уже давно, без неожиданных проблем, поэтому и новый сервер проще запустить там. У FirstVDS есть \nподробная документация\n на большинство случаев жизни, \nописаны даже самые первые шаги с хостингом\n.\n\r\n\nКупил сервер с 2 потоками CPU, 4 Gb RAM и 60 Gb SSD. За глаза и за уши такого количества ресурсов хватает для проекта.\n\r\n\nПосле получения сервера нужно было:\n\r\n\n\r\n\nСоздать юзера для приложения\n.\n\r\n\nУбрать SSH авторизацию через пароль на ключ\n.\n\r\n\nУстановить необходимый софт\n\r\n\n\r\n\napt-get update && apt-get install -y vim htop nginx-full postgresql postgresql-contrib rclone redis locales cron\n\r\n\n\r\n\nОпционально. Установить \nzsh\n и \noh-my-zsh\n.\n\r\n\nСоздать в PostgreSQL базу данных\n и настроить для \nиспользования из Docker контейнера\n.\n\r\n\nУстановить certbot для получения SSL\n, скопировать конфили let's encrypt со старого сервера с помощью \nscp\n.\n\r\n\nРазрешить исполнение таблицы crontab настроенной у юзера\n. Чтобы из ограниченного пользователя запускать регулярные задачи.\n\r\n\nНастроить rclone для переноса\n файлов на внешний диск, в моем случае Яндекс Диск, а затем перенести настройки на сервер. Это потребуется для бэкапов.\n\r\n\nУстановить \nDocker\n и \ndocker compose\n.\n\r\n\nСоздать аккаунт на Docker Hub и создать там проект, чтобы заливать образы.\n\r\n\nДорабатываем nginx.conf — добавляем чтение nginx конфига приложения из \nотдельного места\n (include секция).\n\r\n\n\r\n\nСервер готов для следующих шагов.\n\r\n\nКак настроил переменные окружения\n\r\n\nХорошо писать программы с учетом \n12 factors\n, получаем более удобное, понятное в поддержке приложение. Один практический аспект из 12 факторов — это отказаться от hardcoded настроек в пользу настройки через окружение. В исполняемом окружении прописываем переменные (доступ до БД, секреты и прочее), а приложение считывает их на старте с помощью библиотеки \npython-dotenv\n.\n\r\n\nGithub Secrets позволяют сохранить переменные окружения, а затем обратиться к ним при работе CI. Причем, на каждую ветку можно сделать отдельные наборы переменных. Вот я и создал набор production и указал переменные для доступа \nпо SSH\n, а также для \nработы приложения\n.\n\r\n\n\r\n\nГотово, теперь можем запускать.\n\r\n\nКак получил результат\n\r\n\nСделал тестовый коммит и процессинг начался:\n\r\n\n\r\n\nПроверился код с помощью \npre-commit\n, прошли тесты.\n\r\n\nСобрался и залился Docker образ в Docker Hub.\n\r\n\nСкопировались настройки на сервер через SCP.\n\r\n\nЗапустились миграции, подготовилась статика и запустилось приложение.\n\r\n\nnginx принимает новый конфиг и сервис готов к приему трафика по домену.\n\r\n\n\r\n\nДальше в настройки DNS домена была настроена A запись с парой домен-ip адрес сервера.\n\r\n\nВот и все, теперь \nGithub Actions будет автоматически\n раз в сутки делать бэкап базы на Яндекс.Диск, при Pull Request будут проходить тесты и проверки кода, а по коммиту в основную ветку — разворачиваться приложение на сервере.\n\r\n\n\r\n\n\r\n\n\r\n\nВыводы\n\r\n\n\r\n\nСочетание Docker compose + CI на виртуальном сервере все также хорошо работает для проектов, после базовой настройки сервера не требуется за ним следить.\n\r\n\nGithub Actions имеет много плагинов (часть очень слабые), которые решают типовые задачи по эксплуатации проекта. Однако иногда проще «руками» зайти по SSH и сделать необходимое, вместо изучения внутренностей actions.\n\r\n\nТеперь вносить изменения в Python Дайджест стало приятным, без боязни сломать зависимости или код.\n\r\n\n\r\n\nНЛО прилетело и оставило здесь промокод для читателей нашего блога:\n\r\n— \n15% на все тарифы VDS\n (кроме тарифа Прогрев) — \nHABRFIRSTVDS\n.\n\r\n\n\r\n\n \n ",
    "tags": [
        "python",
        "github",
        "github actions",
        "pre-commit",
        "gitlab",
        "django",
        "хостинг"
    ]
}