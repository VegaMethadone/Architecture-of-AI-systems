{
    "article_id": "725284",
    "article_name": "Как быстрее узнать, что сервису плохо, или Realtime-детекция разладок с помощью CatBoost",
    "content": "Через любую высоконагруженную систему ежесекундно проходит огромный поток трафика. Релизы, хотфиксы, ddos-атаки, невалидные и ухудшающие эксперименты и многие другие события могут привести к проблемам, которые влияют на пользователей. Поэтому такие ситуации не терпят задержек.\nМожно провести простую аналогию: если вы чем-то заболели, то лучше узнать об этом как можно раньше и тем самым минимизировать побочные эффекты после и в процессе выздоровления. Так и в сервисе: будь то баннерная крутилка, поиск, маркетплейс или онлайн-доставка пиццы.  \nМеня зовут Владимир Точилин, я работаю в группе развития рекламных продуктов и стабильности. Вместе со своим коллегой, Александром Самусенко, я расскажу, как мы создали новый инструмент realtime-детекции разладок в проде рекламных технологий. Мы работаем с системой, где на отдельные кластеры нагрузка превышает 1000000 RPS. \nИсследование причин аномалий — тоже занимательная задача, которую нам приходится решать повседневно, но сегодня сфокусируемся на том, как получилось максимально быстро «зажигать лампочку» при определённых проблемах в системе. \nИсторию будет интересно прочитать аналитикам, разработчикам и менеджерам любого уровня. \nПро фрод и мониторинг \nВ любом сервисе можно придумать сотни метрик — рекламные технологии не исключение. Часть из них носят технический характер и их понимают только узкие специалисты, а часть понятна всем: например, показы, клики, деньги, CTR (конверсия показов в клики), CPC (стоимость клика). Мы внимательно следим за такими метриками, поскольку когда их поведение отличается от ожидаемого, в системе могут быть проблемы. \nДавайте посмотрим на примеры такого необычного поведения.\nРазладочный тренд (синий) относительно здорового (зелёного)\nВ обоих случаях видны \nхарактерные резкие падения метрик вниз\n, отражающие потенциальную проблему системы в первом случае и явную во втором — показы не могли упасть так резко из-за изменения поведения пользователей, это мы резко перестали показывать баннеры на площадках. Далее будем называть такие падения \nразладками\n. Разладки вверх тоже являются сигналом о том, что возможно что-то идёт не так.\nОдной из особенностей интернет-рекламы является наличие мошенников, которые всячески пытаются истощить бюджеты рекламодателей, не принося реальных конверсий. Накрутку просмотров, кликов и конверсий ботами либо с помощью других механизмов мы называем \nфродом\n. Зачастую это происходит массово и видно на графиках невооружённым взглядом. \nБорьбу с такими ситуациями ведёт наша система антифрода: она с помощью своих алгоритмов не даёт списывать деньги с рекламных кампаний за данные действия. Но её работа и сервисы биллинга увеличивают время получения данных о реальных показах, кликах и деньгах. В связи с этим у нас есть два вида трендов: \nчистые\n после антифрода и биллинга и \nбыстрые\n до них. \nК лету 2022 года у нас было два класса детекторов разладок: \nПул мониторингов на очищенных от фрода данных с лагом больше получаса.\n Их основной принцип работы основан на классических методах статистики: для выбранных случайных величин проверяем принадлежность доверительным интервалам, которые, в свою очередь, являются нестационарными функциями от сезонности с шагом 5, 10 или 30 минут. Чем меньше шаг, тем шире доверительный интервал и тем меньше время реакции.  \nНесмотря на высокую полноту пула, некоторые разладки система может поймать только через час и позже. В нашем понимании эти мониторинги достигли своего пика: можно увеличить их полноту, только сильно уменьшив точность и наоборот.  \nПул мониторингов, который основан на том же принципе, но работает поверх быстрых данных.\n Из-за периодических наплывов фрода у них не самая высокая точность и низкая полнота. Подобного рода разладки (как на синем графике) нас не интересуют, потому что такой трафик будет обнулен — нет смысла лишний раз зажигать лампочку. \nПример наплыва фродеров. Резкая ступенька вниз для этих точек означает возвращение к нормальному состоянию \nТочность мониторингов очень важна, иначе на них никто не будет реагировать. Если научиться различать реальные просадки на быстрых трендах от фродового шума, можно узнать о проблемах в среднем на полчаса раньше. Дебаг проблемы начнётся заметно раньше, а значит получится привести систему к здоровому состоянию с минимальными потерями.\nДля мониторингов критично важны три характеристики: \nточность\n, \nполнота\n и \nвремя реакции\n. У существовавших алгоритмов на чистых данных были проблемы во времени реакции, а на данных с фродом — недостаточные точность и полнота.  \nСделать явное статистическое правило с хорошими характеристиками полноты и точности на быстрых неочищенных данных практически невозможно, поэтому мы решили обучить классификатор. Эту задачу мы разбили на несколько этапов:\nСобрать обучающие данные по логам. \nРазметить разладки. \nПридумать факторы, зафиксировать приёмочные метрики. \nОбучить модель. \nПостроить регулярный процесс с поставкой данных. \nСделать пайплайн доразметки и дообучения. \nУчим классификатор искать разладки\nСбор данных \nПолучение обучающей выборки с нуля оказалось самым трудоёмким этапом задачи. В качестве базы для подготовки датасета мы выгрузили из логов реальные тренды кликов по главным срезам с января 2021 года по август 2022 года. Причём мы выгружали как очищенные от фрода данные, так и «грязные». \nРазметка должна была показывать классификатору, что такое хорошо, а что такое плохо, и таким образом отфильтровать фродовый шум в трендах. Фокусируемся только на раскладках вниз, т.к. разладки вверх тяжело отделить от наплывов фрода - на графиках они будут выглядеть одинаково. Оставим их поиск мониторингам по чистым данным.\nНо размечать руками столько данных было безумно и нерационально. Поэтому для определения потенциальных разладок по чистым данным мы запускали аналог статистических мониторингов из первой группы с более узкими доверительными интервалами. Это нужно для того, чтобы в полученном для ручной разметки датасете получить recall ≈ 1. Все подсветившиеся таймстемпы были помечены как подозрительные.  \nРазметка данных \nПотенциальные разладки мы выгрузили в таблицу и вместе с командой сделали экспертную разметку в несколько итераций. Но с первого подхода получилось неидеально, так как у каждого было немного разное понимание того, на что стоит звенеть.\nПроцесс фильтрации разметки \nВ итоге вывели основное правило разметки: разладка в обучающей выборке должна быть заметна как на чистых данных, так и на зашумлённых. \nПосле переразметки и выкидывания лишних точек получились наборы примерно по 40—50 разладок на каждом срезе. В процессе отладки помогла генерация pdf-файла с графиками рядов, помеченных как помеченных проблемные. Так было гораздо удобнее увидеть, что шло на вход модели, чем перепроверять внутренние дашборды по списку дат. \nТак, например, удалось обнаружить, что в какой-то момент слетела сортировка точек в датафрейме, и вместо нормальных рядов на вход подавались битые последовательности точек. \nНа этом графике последняя точка явно не разладка — клики растут вверх\nДалее разметка соединялась с агрегатом по неочищенным данным, потому что именно они будут подаваться на вход классификатору. Таким образом мы получили датасет органических данных.  \nМодель \nВ качестве модели мы использовали CatBoost Classifier. Входные данные представляли собой табличку, в которой для значения кликов каждой точки мы добавляли хвост из кликов в предыдущих. К слову, для описания резких падений важнее не абсолютные значения кликов в точках, а безразмерные отношения между соседними, в особенности между последними. \ndt_i = clicks_i / clicks_i-1  \nВсе подобные переходы между соседними пятиминутками в выборке тоже были вынесены в признаки. \nПомимо этого, мы выделили следующие факторы, чтобы модель могла разграничить здоровые и нездоровые тренды: \nразница кликов с медианой за окно и модуль разницы; \nСКО до последней точки и СКО с последней точкой; \nотношение кликов к среднему за окно; \nкатегориальные индексы пятиминуток, тридцатиминуток, часа внутри дня, а также день недели и \nis_weekend\n для обучения на стандартную сезонность трендов;\nотношение суммы кликов за последние 30 минут к предыдущим 30 минутам; \nmax(clicks/clicks_-1, clicks/clicks_-2, clicks/clicks_-3)\n: \nесли все отношения под максимумом сильно меньше 1, это признак явной проблемы.\nПосмотрим на пример: \nПохоже на разладку, но это не она — это «отплыв» фрода. При большом отношении кликов в предыдущей точке относительно данной (\ndt_click_fall\n), разница с медианой до этой точки маленькая. По этому фактору можно различить \nclick_median_diff\n и сделать вывод по хвосту, что это не просадка. \nА вот это уже разладка. Здесь большой \ndt_click_fall\n и значительный отрицательный дифф с медианой \nclick_median_diff.\n \nСреди гиперпараметров Catboost классификатора особенно полезной была корректировка весов классов (\nclass weights\n) для частичной компенсации дисбаланса. \nВ итоге у нас получилась вполне рабочая модель, которая могла отличить разладку от фрода. Вот метрики на первой итерации разметки и модели: \nА это метрики после переразметки с доработкой CatBoost: \nИтоговый Feature Importance на одном из срезов: \nГенерация синтетики \nПосле обучения CatBoost на органических данных мы получили модель, оповещающую о разладках в среднем два раза из трёх возможных. Этот результат намного лучше статистических мониторингов на шумных данных, но ведь можно и лучше! \nМы стали смотреть, с какими примерами классификатор справляется хорошо, а с какими не очень. К удивлению, мы обнаружили среди false negatives самые явные просадки тестовой части датасета, когда тренд падает в окрестность нуля, но не подсвечивается классификатором. \nЧтобы подтвердить гипотезу о том, что модель плохо ловит именно сильные разладки, мы сгенерировали синтетический тестсет с примерами очень плохих разладок, например, когда после стабильного хвоста точка падает в ноль кликов. Результат воспроизвёлся. \nЭто было логично, ведь если мы не предоставили достаточно похожих примеров (хорошо, что таковых было мало в реальной практике) в обучающей выборке для fully-supervised-модели, такой тренд может классифицироваться как угодно. \nТогда мы выделили разные типы разладок, которые точно нельзя упускать. На их основе был сгенерирован пул синтетических разладок и добавлен в обучающую выборку. \nКлассы сгенерированных разладок: \nПоследняя точка упала в ноль. \nПоследняя точка упала кратно. \nНесколько последних точек падают с разной амплитудой. \nАналогично перечисленным, но в процессе происходит наплыв фрода. \nСлучайный тренд из органики со сдвигом вниз последней точки. \nДля трендов с первого по четвёртый выбирался рандомный \nbase_value\n в диапазоне допустимых значений для кликов. У обычных точек были значения —  b\nase_value + random_noise\n, а разладочные по формулам опускались вниз — \ncoef * (prev_value + random_noise).\n \nА ещё в датасете поддерживался инвариант разладки, что она хотя бы на 5% ниже предыдущей точки, даже если предыдущая тоже разладочная. \nПримеры разладок из датасета\nФинальные метрики после добавления синтетики стали намного лучше: \nС учётом погрешностей в разметке и пограничных случаев, единичный \nprecision\n до этого этапа свидетельствовал о переобучении. При этом был значительный прирост в recall.\nБыстрая статистика и регуляризация, настройка сообщений \nГраф регулярного процесса\nДля получения прод-решения мы дополнительно наладили сбор данных из источников быстрой статистики и собрали граф, который запускает классификаторы по нашим срезам. Регулярный процесс дёргает граф каждые пять минут в дневное время — ночью тренды более шумные и реагировать ASAP нет смысла. \nПри обнаружении просадки система отправляет сообщение в Telegram дежурных с проблемным срезом и временем алерта. \nРезультаты \nС начала работы детектора в середине сентября 2022 года были выявлены десятки инцидентов разных масштабов с минимальным лагом по времени. Среди них были даже такие, на которые не среагировали мониторинги по чистым данным. То есть раньше мы бы их просто упустили и потенциально продолжили жить с багом в системе. \nВ итоге мы получили процесс, который значительно ускорил нашу реакцию при разладках и увеличил полноту пула мониторингов, не потеряв в точности. Среди дальнейших планов развития системы мониторингов — создать готовое решение, которое позволит любому менеджеру, аналитику или разработчику задать простой конфиг и узнавать о проблемах на произвольном выбранном срезе с большой полнотой, точностью и лагом не более часа с помощью наших алгоритмов. \n \n ",
    "tags": [
        "аналитика",
        "стабильность",
        "catboost",
        "мониторинг",
        "machine learning",
        "временные ряды",
        "антифрод",
        "аномалии"
    ]
}