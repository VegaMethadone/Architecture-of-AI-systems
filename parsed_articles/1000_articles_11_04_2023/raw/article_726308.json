{
    "article_id": "726308",
    "article_name": "ADD – добавим гибкости",
    "content": "Что такое ADD\nКоротко, \nADD\n (английская аббревиатура \nArtifact Driven Development\n) – это новая методология организации процесса разработки программного обеспечения. Она основана на парадигме создания артефактов, имеющих ценность для абсолютно всех заинтересованных сторон проекта. Новизна ADD в том, что \nартефакты так же могут быть абсолютно любыми\n. Не ограничиваясь версиями программного обеспечения, как, например, в Scrum и Kanban. Не даром неформальная расшифровка аббревиатуры звучит, как Absolutely Ductile Design (абсолютно гибкая конструкция). Методология ADD входит в семейство гибких (Agile) методологий итеративной инкрементальной разработки программного обеспечения. К этому дополнительно отсылает аббревиатура ADD, созвучная английскому глаголу «добавить».\nКак возникла ADD\nВ начале 2020-х окончательно оформились непреодолимые недостатки гибких методологий разработки программного обеспечения, такие как:\nконцептуальный разрыв между бизнес-задачами заказчика и требованиями к разрабатываемому программному продукту;\nне системность бэклога продукта, как средства достижения цели;\nневозможность планирования проекта при заранее неизвестном количестве спринтов;\nскрытая потребность в специфицировании требований к продукту при явном ее отрицании;\nтяготение исполнителей к разделению труда в команде разработки;\nотсутствие де-факто самоорганизации команды разработки;\nи другие.\nПопытки их преодоления в рамках известных методологий гибкой разработки приводили к отходу от парадигмы Agile. Ситуация усугубилась рядом факторов, таких как:\nнеготовность крупных заказчиков отказаться от традиционной каскадной модели разработки в надежде сохранить контроль над проектом;\nпопытки начинающих команд разработки слепо следовать правилам гибких методологий разработки в надежде преодолеть концептуальные пробелы в них;\nбольшое количество провальных ИТ-проектов (более 80% - неудачные, остальные 20% приходится переделывать на 80%);\nбесплодность попыток системных и бизнес-аналитиков найти свое место в новых процессах разработки;\nотсутствие де-факто кросс-функциональности членов большинства команд разработки.\nНазрела потребность в новой методологии. В ее основу легли:\nрасширенное толкование положений манифеста Agile (вместо программного продукта – полезный артефакт);\nконструктивный подход к разрешению конфликтов (акцентирование внимания заинтересованных сторон на выработке и достижении общих целей);\nпризнание исполнителя заинтересованной стороной (внутренние интересы разработчиков обычно не принимались во внимание).\nСуть методологии ADD\nСамоорганизация в процессе создания продукта поднимается на уровень выше и присутствует не только на уровне членов команды разработки, но и на уровне сотрудников заказчика и исполнителя.\nСамоорганизация по ADD.\nМетодология ADD предполагает:\nОпределение артефактов, имеющих ценность обязательно для всех заинтересованных сторон (заказчика, исполнителя, аудитора и др.).\nПланирование работ (как последовательности итераций, спринтов) по созданию таких артефактов.\nПроцесс(ы) ADD.\nЦенность одного и того же артефакта для каждой заинтересованной стороны может различаться, быть прямой или косвенной. Например, новый функционал продукта имеет прямую ценность для заказчика и косвенную для разработчика, а проект архитектуры продукта, наоборот, прямую для разработчика и косвенную для заказчика. Распространенными артефактами являются:\nконцепция будущего программного продукта;\nспецификация бизнес-требований заказчика;\nспецификация системных требований к программному продукту;\nфрагмент бэклога программного продукта;\nзаконченная версия продукта с заранее заданными характеристиками;\nи другие.\nЧасто первым артефактом проекта становится налаженное взаимодействие заказчика с исполнителем, которое, как известно, важнее спецификаций, документации, стандартов и даже самой методологии разработки.\nМетодология не накладывает никаких ограничений на виды, количество, состав, порядок создания артефактов. Заинтересованные стороны процесса разработки программного продукта должны договориться о критериях качества артефакта (например, комплекс критериев INVEST для элемента бэклога в методологии Scrum).\nПроцесс разработки программного продукта по методологии ADD представляет собой последовательность итераций (спринтов) с целью разработки артефактов. Одного или нескольких в результате каждой итерации. Состав, количество итераций в рамках методологии ADD определяется заинтересованными сторонами. Количество итераций может быть заранее заданным (аналог каскадной методологии разработки) или неопределенным с критериями завершения проекта (аналог итеративных методологий). Длительность итераций также устанавливается заинтересованными сторонами. Итерации могут иметь как одинаковую, так и разную длительность в рамках проекта.\nПри разработке по методологии ADD рекомендуется активно использовать паттерны (как известные, так и вновь созданные):\nартефактов (моделей, документов и др.);\nитераций в отдельности (как видов работ – формирование бэклога продукта, тестирование и др.);\nсовокупности итераций процесса разработки продукта в целом (например, анализ-проектирование-реализация-тестирование-документирование по каскадной методологии или последовательность циклов постановка-проектирование-реализация-стабилизация по итеративной методологии);\nи другие.\nДостоинства и недостатки методологии ADD\nОсновные достоинства методологии ADD:\nВ случае прекращения проекта создания программного продукта у заинтересованных сторон остается набор артефактов с ненулевой ценностью для каждой заинтересованной стороны.\nМетодология позволяет существенно снизить противостояние заказчик-исполнитель за счет смещения фокуса на общие цели сторон, избежать длительных дискуссий (в том числе, на концептуальные темы).\nМетодология предоставляет истинную гибкость процесса разработки продукта (теоретически, даже последовательность итераций со смещением по времени).\nМетодология не накладывает ограничений на состав команды исполнителя (позволяет использовать как команды с «классическим» распределением ролей, так и команды с условно полной кросс-функциональностью).\nВ случае явного отсутствия (или ограниченной доступности) заказчика его роль может успешно играть владелец продукта от исполнителя.\nМетодология может быть применена для создания любых продуктов, не только программных.\nОсновные недостатки методологии ADD:\nПоскольку заинтересованные стороны имеют равные полномочия (в отличие от большего веса заказчика в «традиционных» методологиях), может потребоваться некий третейский судья для разрешения тупиковых ситуаций.\nЭтот недостаток может привести к появлению новой дополнительной роли – независимого куратора проекта разработки продукта (вероятно, из числа влиятельных ИТ-специалистов современности).\nУспешное применение паттернов требует определенной модерации, вероятно, независимым экспертом.\nМетодологии присущи все недостатки самоорганизации в проектах разработки продуктов.\nЭтот недостаток может усиливаться нетипичностью процесса гибкой разработки для заказчика.\nМетодология не предлагает готовых механизмов преодоления разногласий внутри сторон (может быть для заказчиков – больших или сильно регламентированных организаций).\nИ последний. Данной методологии не существует. Она появилась как шутка внутри команды разработки Innovative People. \nС первым апреля, коллеги!\nВ сухом остатке\n“Новый выстрел «Серебряной пули нет»” (Ф.Брукс).\n“…всегда хочется, чтобы проектанты работали вместе с конструкторами.” (К.Феоктистов)\n“- А какой самый главный прибор в кораблевождении?\n- Голова, - отвечали педагоги...” (В.Пикуль)\n \n ",
    "tags": [
        "гибкая разработка по",
        "методология разработки",
        "1 апреля",
        "agile"
    ]
}