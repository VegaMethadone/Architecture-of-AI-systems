{
    "article_id": "727718",
    "article_name": "Project_2. Местоположение с помощью IP-адреса (Python)",
    "content": "Проект, который не отнимет много времени, но даст опыт, да и положительные эмоции. \nОписание\nС помощью скрипта и IP-адреса вычисляем местоположение. Определить точную геолокацию по IP-адресу невозможно: все сервисы, позволяющие находить информацию по IP, могут определить местоположение только на уровне города. Невозможно вычислить ваш или любой другой точный домашний адрес по IP. Это могут сделать правоохранительные органы только в том случае, если они обратятся к Интернет-провайдеру в случае нарушения вами закона. \nКод\nСоздадим 2 файла, которые будут иметь разный функционал:\n1 \nmain.py\n обрабатывает IP-адрес\n2 \ndatabase.py\n создаёт базу данных и добавляет данные \nНачнём с 1-го файла. Всё ещё импортируем то, что потребуется для реализации проекта.\nimport requests\nimport database\nНапоминаем, что \ndatabase\n - это 2-й файл.\nПервая функция - \nmain()\n.\nФункция \nmain()\n используется для разделения блоков кода в программе. Использование функции \nmain()\n обязательно в таких языках, как Java, потому что это упрощает понимание того, в каком порядке код запускается в программе. В Python функцию \nmain()\n писать необязательно, но это улучшает читаемость кода.  \nФункция принимает в виде аргумента строку, которая просит ввести IP-адрес. Затем \nmain()\n передаёт функции \nlocation()\n данные.\ndef main(start: str):\n    print(start)\n    ip = input(\"IP address: \")\n    try:\n        new_data = location(ip)\n        database.base(new_data)\n    except ValueError:\n        pass\n\n\nif __name__ == \"__main__\":\n    main(\"Enter the IP address\")\nВторая функция \nlocation()\n принимает в виде аргумента строку с IP-адресом. Отправляем запрос с помощью метода \nget\n.\nGET\n является одним из самых популярных HTTP методов. Метод \nGET\n указывает на то, что происходит попытка извлечь данные из определенного ресурса. Для того, чтобы выполнить запрос \nGET\n, используется \nrequests.get()\n.  \nИспользуя \n.status_code\n, можно увидеть код состояния, который возвращается с сервера.\nЕсли будет выведено 404, то значит что-то пошло не так.\nСледующий этап - проверка на корректный IP-адрес. Если IP-адрес некорректный, то возвращает функцию \nmain()\n с новой строкой, где сообщается, что нужно ввести корректный IP-адрес. Если всё хорошо, то создаём пустой список. С помощью цикла выводим все данные, которые необходимы и добавляем в список. Вывод будет выглядеть так.\nEnter the IP address\nIP address: 185.101.203.42\n[Status]: success\n[Country]: Болгария\n[Countrycode]: BG\n[Region]: 22\n[Regionname]: Sofia-Capital\n[City]: София\n[Zip]: 1000\n[Lat]: 42.6951\n[Lon]: 23.325\n[Timezone]: Europe/Sofia\n[Isp]: SIA \"Singularity Telecom\"\n[Org]: SIA \"Singularity Telecom\"\n[As]: AS209372 SIA \"Singularity Telecom\"\n[Query]: 185.101.203.42\nВозвращаем кортеж с данными.\ndef location(ip: str):\n    response = requests.get(f\"http://ip-api.com/json/{ip}?lang=ru\")\n    if response.status_code == 404:\n        print(\"Oops\")\n    result = response.json()\n    if result[\"status\"] == \"fail\":\n        return main(\"Enter the correct IP address\")\n\n    record = []\n\n    for key, value in result.items():\n        record.append(value)\n        print(f\"[{key.title()}]: {value}\")\n    return tuple(record)\nТеперь переходим ко второму файлу \ndatabase.py\n, где будет создана база данных с добавлением новых данных.\nИмпорт, как всегда, с нами. Для базы данных потребуется библиотека \nsqlite3\n.\nimport sqlite3\nСоздаём функцию, которая принимает аргумент в виде кортежа.\nВо-первых, нам нужно создать новую базу данных и открыть подключение к базе данных, чтобы разрешить \nsqlite3\n работать с ней. Вызов \nsqlite3.connect()\nпоможет нам в том. Если базы данных \ndatabase.db\n не существует, то будет неявно создана.\nЧтобы выполнять инструкции SQL и извлекать результаты из SQL-запросов, нам нужно будет использовать курсор базы данных. Вызов \ncon.cursor()\n в деле.\nТеперь, когда у нас есть подключение к базе данных и курсор, мы можем создать таблицы базы данных со столбцами, которые необходимы.\nЕсли в базе данных уже присутствует какой-либо IP-адрес, то выводим \"Duplicate \". Если нет, то добавляем в базу новые данные. Вызов \nconn.commit()\n зафиксирует транзакцию, скажем так. Так будет выглядеть база данных.\nТаблица \ndef base(data: tuple):\n    conn = sqlite3.connect(\"database.db\")\n    cur = conn.cursor()\n    cur.execute(\"\"\"CREATE TABLE IF NOT EXISTS location(\n    Status TEXT,\n    Country TEXT,\n    Countrycode TEXT,\n    Region TEXT,\n    Regionname TEXT,\n    City TEXT,\n    Zip INT,\n    Lat REAL,\n    Lon REAL,\n    Timezone TEXT,\n    Isp TEXT,\n    Org TEXT,\n    Auto_system TEXT,\n    Query TEXT);\n    \"\"\")\n    try:\n        check = cur.execute(f\"SELECT * FROM location WHERE Query=?\", (data[-1],))\n        if len(list(*check)) == 0:\n            cur.execute(\"INSERT INTO location VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?);\", data)\n            conn.commit()\n        else:\n            print(\"Duplicate\")\n    except TypeError:\n        pass\nСценарий\nmain.py\n# Location by IP\n# Location search by IP address using Python\nimport requests\nimport database\n\n\ndef location(ip: str):\n    response = requests.get(f\"http://ip-api.com/json/{ip}?lang=ru\")\n    if response.status_code == 404:\n        print(\"Oops\")\n    result = response.json()\n    if result[\"status\"] == \"fail\":\n        return main(\"Enter the correct IP address\")\n\n    record = []\n\n    for key, value in result.items():\n        record.append(value)\n        print(f\"[{key.title()}]: {value}\")\n    return tuple(record)\n\n\ndef main(start: str):\n    print(start)\n    ip = input(\"IP address: \")\n    try:\n        new_data = location(ip)\n        database.base(new_data)\n    except ValueError:\n        pass\n\n\nif __name__ == \"__main__\":\n    main(\"Enter the IP address\")\ndatabase.py\nimport sqlite3\n\n\ndef base(data: tuple):\n    conn = sqlite3.connect(\"database.db\")\n    cur = conn.cursor()\n    cur.execute(\"\"\"CREATE TABLE IF NOT EXISTS location(\n    Status TEXT,\n    Country TEXT,\n    Countrycode TEXT,\n    Region TEXT,\n    Regionname TEXT,\n    City TEXT,\n    Zip INT,\n    Lat REAL,\n    Lon REAL,\n    Timezone TEXT,\n    Isp TEXT,\n    Org TEXT,\n    Auto_system TEXT,\n    Query TEXT);\n    \"\"\")\n    try:\n        check = cur.execute(f\"SELECT * FROM location WHERE Query=?\", (data[-1],))\n        if len(list(*check)) == 0:\n            cur.execute(\"INSERT INTO location VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?);\", data)\n            conn.commit()\n        else:\n            print(\"Duplicate\")\n    except TypeError:\n        pass\nЗаключение\nНекоторые компании специализируются на сборе информации о диапазоне IP-адресов со всего мира. Они продают эту информацию в виде консолидированных баз данных, которые легко интегрируются в любой веб-сервер с целью быстрого поиска информации о стране, регионе, городе или Интернет-провайдере. Точность этих баз данных колеблется от 80 до 99,8%, согласно их собственным утверждениям. Данный проект показал, как можно легко написать маленький скрипт, который будет собирать необходимую информацию с помощью таких баз. \nСсылка на GitHub\n \n ",
    "tags": [
        "python",
        "проект"
    ]
}