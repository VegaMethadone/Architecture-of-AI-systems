{
    "article_id": "726350",
    "article_name": "CAN шина",
    "content": "Всем привет! Я начинающий разработчик и увлекся Embedded стороной вопроса. Лучший способ запомнить информацию - написать какой нибудь конспект и поделиться им. Ниже моя краткая выжимка о CAN шине и передаче данных через нее:\nШина CAN (Controller Area Network).\nШина представляет из себя витую пару разделенную резисторами сопротивлением 120 Ом. Состоит из линии высокого напряжения (H - high) и низкого напряжения (L-low).\nКраткие характеристики:\nСкорость 1 mb/s при длине шины до 40 метров (Автомобиль или комната).\nСкорость 10 kb/s при длине шины до 1000 метров (здание).\nПриемники и передатчики равноправны в шине CAN. \nКогда никто не передает сигнал по шине и в H и в L по 2,5 вольта. Когда сигнал есть - на H 3,5V а на линии L - 1,5 В. По разнице между H и L  приемопередатчики понимают, что началась передача. Поэтому шина CAN не чувствительна к наводкам. Вольтаж на витой паре может быть другой - шина понимает о начале приема или передачи по разнице между L и H. \nКогда на вход передатчику приходит ноль - передатчик увеличивает на H напряжение. Все остальные приемопередатчики понимают, что началась передача сигнала. Кодирование выполняется в формате NRZ: \nDominant bit\n - состояние когда на шине H>L - соответствует 1-це. \nRecess bit\n - состояние когда на линии нет сигнала воспринимается как ноль.\nСмена бит происходит по частоте передатчика. Частота приемников может незначительно отличаться вследствие чего большая последовательность повторяющихся сигналов может привести к рассинхронизации. Поэтому применяется \nbit stuffing.\n\t\nBit stuffing\n - 5. Если идет 5 одинаковых бит - передатчик выставляет противоположный бит. Все приемники игнорируют этот бит. Если же приемники видят подряд 6 одинаковых бит - они понимают что произошла ошибка и игнорируют сообщение.\n\t\nCollision Resolution (CR)\n - если два передатчика начинают одновременно передавать - приоритет получает тот кто передает больше единиц. Допустим два передатчика начали одновременно вещать. Оба передают 3 единицы, на 4 бите один из них не выставляет сигнал, но фиксирует что на шине есть перепад - таким образом он понимает, что сигнал вместе с ним кто то передает параллельно и замолкает. \n\t\nCR эффективнее Collision Detection\n в ethernet так как в CD в случае обнаружения двух передающих передатчиков замолкают оба и начинают передачу через какой то случайный промежуток времени. \n\tПротокол передачи информации \nDATA FRAME\n. Передача данных когда устройство делится данными.\nS\n - стартовый бит - всегда Dominant bit. Все приемники синхронизируются по нему. На вход приемо передатчику приходит ноль и он подает напряжение на шину H создавая тем самым разницу.\nID\n - уникальный номер сообщения(команды). По нему приемники понимают нужно ли им это сообщение или оно адресовано кому то другому. В стандартном исполнении \nCAN\n 11 бит, в CAN2.0b - 29 бит. \nD length\n - указывает какой длины в байтах будет блок данных. \nData\n - само сообщение от 0 до 8 байт. \nCRC\n - контрольная сумма размером 2 байта. \nACK.\n После передачи CRC приемник получающий сообщение выставляет подтверждающий бит если сумма сходиться. Передатчик видит что приемник получил сообщение и далее выставляет 7 бит Reces сигнала - \nEOF\n.\nДля всех кто увлекается Электроникой и Электротехникой - рекомендую канал \nЭлектротехника и электроника для программистов.\n Если что то не понятно или неправильно изложено - пишите поправлю. Собственно первоисточник статьи - \nлекция 403 CAN шина- введение\n.  \n \n ",
    "tags": [
        "can"
    ]
}