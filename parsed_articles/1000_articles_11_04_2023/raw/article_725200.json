{
    "article_id": "725200",
    "article_name": "Ethernet для Ариты",
    "content": "\r\n\n\r\nНедавно в моём блоге вышла \nстатья\n о контроллере NORVI Arita на ATmega2560, которая вызвала неподдельный интерес у публики — на данный момент статья набрала аж 23 тысячи просмотров. Тут я полностью согласен с читателями, я тоже неровно дышу к красавице Арите и имею в отношении неё далеко идущие планы.\n\r\n\n\r\nКак вы помните по вводной статье, в моём распоряжении имеется Model 5, то есть самый урезанный в функциональном плане вариант контроллера: в нём нет дисплея, Ethernet интерфейса, картридера для microSD карт памяти и т. д., оставлен только «слабенький» базовый набор функций, что, конечно, никак не могло меня устроить.\n\r\n\n\r\nПоэтому я вооружился лупой, паяльником, тестером, осциллографом, термостолом, лабораторным источником питания, даташитами и дремелем (куда ж без него) и решил сделать из NORVI Arita Model 5 человека, то есть полноценный контроллер, что-то вроде Model 8++. Возможно в нём появятся функции, которых нет даже в оригинальных контроллерах NORVI.\n\r\n\n\r\nНачнём мы с добавления в контроллер Ethernet интерфейса, который там просто обязан быть, без него Арита смотрится как инвалид, лишённый одной из важных частей тела. Немного магии и, с позволения сказать, реверс-инжиниринга и…\n\r\n\n\r\n\n❯\n \n Исходные данные\n\r\nИтак, мы имеем на операционном столе «тело» Ариты 5-й модели, в которой урезано всё, что только можно урезать, оставлены только цифровые входы, релейные и транзисторные выходы и интерфейс RS485. На самом деле это тоже немало: если ваша задача по автоматизации вписывается в эти ТТХ, то NORVI Arita Model 5 — это отличный контроллер для решения ваших задач.\n\r\n\n\r\nПроблема заключается в том, что в таком виде Арита неспособна решить множество задач, для решения которых требуются отсутствующие компоненты, например, Ethernet интерфейс для интеграции в вашу IoT систему.\n\r\n\n\r\nСитуация усугубляется ещё и тем, что компания-производитель не раскрывает принципиальную электрическую схему контроллера, что значительно осложняет самостоятельную модернизацию NORVI Arita.\n\r\n\n\r\nКроме отсутствия принципиальной схемы, есть ещё один фактор, затрудняющий модернизацию — это неразборная конструкция самого контроллера, который представляет собой «бутерброд» из двух плат, намертво скреплённых множеством шпилек-пинов, припаянных к обеим платам.\n\r\n\n\r\nТеоретически, разобрать (распаять) эту конструкцию можно, но для этого нужно иметь какие-то веские причины — просто так никто этим заниматься не будет, слишком уж это трудоёмкое занятие. Поэтому мы будем проводить работы по модернизации Ариты без полной разборки контроллера, т. е. нам будут полностью доступны только две из четырёх поверхностей плат (самая верхняя и самая нижняя). Внутренние поверхности (и всё, что на них находится) будут нам на 90% недоступны (что обидно, поскольку на этих поверхностях находятся готовые площадки для распайки, например, ESP8266, микросхемы часов реального времени и т. д.).\n\r\n\n\r\nВ общем, стратегию предстоящих работ можно сформулировать так: постараться добавить Арите максимум функций при минимуме затраченных усилий и переделок самого контроллера.\n\r\n\n\r\n\n❯\n \n Ethernet интерфейс\n\r\nПоскольку эта статья посвящена добавлению в NORVI Arita Ethernet интерфейса, то нужно сказать несколько слов о самом Ethernet интерфейсе и его роли в современных IoT системах.\n\r\n\n\r\nЕсли ваш контроллер не имеет интерфейсов для связи с внешним миром (Wi-Fi, проводной Ethernet, на худой конец LoRa, nRF24 или чего-то подобного), то является «вещью в себе» — его нельзя интегрировать в общую «умную систему», с него нельзя удалённо получать данные и им нельзя управлять на расстоянии. Для какого-то взаимодействия с таким контроллером к нему нужно подойти, что не всегда удобно и даже возможно.\n\r\n\n\r\nКроме того, Ethernet позволяет организовать управление и настройку контроллера при помощи веб-интерфейса, кардинально расширяет его возможности и удобство пользования им.\n\r\n\n\r\nВ общем, Ethernet интерфейс — это вещь в отношении которой не возникает вопроса: нужен он или нет в NORVI Arita — безусловно нужен, и нам стоит потратить некоторые усилия для добавления его в контроллер. Чем мы и займёмся далее.\n\r\n\n\r\n\n❯\n \n Шаг 0: что и куда подключаем\n\r\nНа плате NORVI Arita Model 5 предусмотрено место для установки Ethernet модуля на на чипе W5500. Судя по расположению дорожек на плате и схемотехнике других контроллеров Norvi, на это место подключается популярный W5500 модуль, который широко продаётся на AliExpress.\n\r\n\n\r\n\n\r\n\n\r\nОбратная сторона платы, на которой хорошо видны дорожки, которые ведут к контактам Ethernet модуля (что сильно помогает в решении этого ребуса).\n\r\n\n\r\n\n\r\n\n\r\nМодуль на W5500. Это популярный вариант, который используется во многих контроллерах, например, компаний Norvi, Lavritech и т. д. Сам чип WIZnet W5500 довольно шустрый, имеет 8 аппаратных сокетов и хорошо зарекомендовал себя на практике при работе в различных контроллерах.\n\r\n\n\r\n\n\r\n\n\r\nРаспиновка модуля на W5500. Всё логично и ожидаемо, осталось только провести исследование того, на какие GPIO микроконтроллера ATmega2560 подключены те или иные выводы модуля (контактные площадки на плате NORVI Arita).\n\r\n\n\r\n\n\r\n\n\r\nВнимательный читатель может заметить, что на плате не распаяны и прочие детали — об это мы подробнее поговорим далее.\n\r\n\n\r\n\n❯\n \n Шаг 1: определение GPIO\n\r\nПоскольку производитель не раскрывает схему контроллера, а официальная документация (как это ни печально) содержит вместо достоверных сведений о контроллере только кучу ошибок и дезинформации, то мы не знаем на какие GPIO подключён Ethernet модуль на W5500. \n\r\n\n\r\nВсего таких GPIO шесть:\n\r\n\n\r\nETH_MOSI\n\r\nETH_MISO\n\r\nETH_SCK\n\r\nETH_RST\n\r\nETH_INT\n\r\nETH_CS\n\r\n\n\r\nВ оригинальной Arduino Mega 2560 ETH_MOSI, ETH_MISO, ETH_SCK и ETH_CS подключены на GPIO10, 11, 12 и 13. В NORVI Arita мы можем сделать обоснованное предположение, что ETH_MOSI, ETH_MISO, ETH_SCK подключены на пины 50, 51, 52.\n\r\n\n\r\nВ отношении остальных трёх пинов ETH_RST, ETH_INT, ETH_CS у нас нет никаких данных, поэтому нам придётся вооружиться тестером (можно осциллографом) и вручную установить номера этих GPIO.\n\r\n\n\r\nСоздаём скетч, который выявляет номера GPIO тестируемых контактов (дорожек) на плате контроллера. Методика очень простая: задаём пул пинов для тестирования, подключаем тестер к нужному контакту на плате и выясняем номер этого пина (по реакции тестера).\n\r\n\n\r\n\n/*\n  Pin Test\n*/\n\n//byte pins[] = {39}; String pool = \"one\";\n//byte pins[] = {50, 51, 52, 53}; String pool = \"SPI\";\nbyte pins[] = {47, 48, 49, 50, 51, 52}; String pool = \"ETH\";\n\n#define T_DELAY 400\n\nvoid setup() {\n  Serial.begin(115200);\n  Serial.println(F(\"Start Pin Test...\"));\n  Serial.print(F(\"Test \")); Serial.print(sizeof(pins)); Serial.print(F(\" pins (\"));\n  Serial.print(pool); Serial.print(F(\"): \"));\n\n  for (byte i = 0; i < sizeof(pins); i++) {\n    pinMode(pins[i], OUTPUT);\n    Serial.print(pins[i]); Serial.print(' ');\n  }\n  Serial.println();\n}\n\nvoid test() {\n  for (byte i = 0; i < sizeof(pins); i++) {\n    Serial.print(pins[i]); Serial.print(' ');\n    digitalWrite(pins[i], HIGH); delay(T_DELAY);\n    digitalWrite(pins[i], LOW);  delay(T_DELAY);\n  }\n}\n\nvoid loop() {\n  test();\n  Serial.println();\n  //delay(1000);\n}\n\n\r\nСкетч тестирует (перебирает по кругу) заданный набор пинов. Скриншот работы тестового скетча (в данном случае тестируются пины Ethernet интерфейса):\n\r\n\n\r\n\n\r\n\n\r\nВ результате выясняем, что:\n\r\n\n\r\nETH_RST это D49\n\r\nETH_INT это D47\n\r\nETH_CS это D48\n\r\n\n\r\nИ составляем новый и более полный вариант распиновки NORVI Arita Model 5, где достоверно определены и указаны все необходимые нам для дальнейшей работы пины Ethernet интерфейса (а заодно и прочие обнаруженные GPIO). На новой распиновке указано назначение почти всех пинов ATmega2560, но всё ещё остаются GPIO с невыясненным назначением.\n\r\n\n\r\n\n\r\n\n\r\n\n❯\n \n Шаг 2: питание Ethernet модуля\n\r\nНа фото платы NORVI Arita, приведённом выше, видны контактные площадки для установки SMD компонентов. Несложный анализ расположения площадок и подходящих к ним дорожек наводит на мысль, что на плате не хватает преобразователя напряжения AMS1117 3,3V и компонентов его обвязки — двух конденсаторов.\n\r\n\n\r\n\n\r\n\n\r\nЛинейный стабилизатор AMS1117 — это вещь мега-популярная и используется практически везде, проблема заключается в том, что у меня этих чипов не оказалось под рукой. Заказывать микросхемы и ждать их доставку не было ни желания, ни терпения, поэтому я решил «добыть» нужные детали, изъяв их с какой-нибудь платы-донора. И тут я вспомнил о модулях YP-8, которые идеально подходили для этой цели — на них распаяны как раз нужные нам детали.\n\r\n\n\r\n\n\r\n\n\r\nОк, плату-донора мы нашли, но тут сразу же возникла следующая проблема — как извлечь стабилизатор и конденсаторы с платы с минимальным воздействием на них температуры? Они ведь уже подвергались нагреву при пайке на заводе и лишний нагрев им явно не пойдёт на пользу. Кроме того, я не знаю какой это типоразмер конденсаторов, но я их даже через лупу с трудом различаю — настолько они мелкие (а их ещё паять придётся!).\n\r\n\n\r\nВарианта более-менее «грамотного» съёма деталей с платы было два: фен и термостол. Так и сяк поразмышляв на эту тему я пришёл к выводу, что наиболее деликатно эту задачу может выполнить термостол. И далее расчехлил ацкий аппарат UYUE 946C\n\r\n\n\r\n\n\r\n\n\r\nИ действительно, при помощи этого агрегата удалось за несколько секунд красиво, без шума и пыли (без дыма и перегрева элементов) снять нужные детали с платы YP-8. В общем, эта часть завершилась неожиданно легко и удачно, но я не рекомендую это повторять — лучше немного подождать и установить на плату контроллера новые, непаянные ранее компоненты.\n\r\n\n\r\nДалее запаиваем извлечённые компоненты на их места в контроллере NORVI Arita.\n\r\n\n\r\n\n\r\n\n\r\nПолучилось немного кривовато (но безупречно с функционально-электрической точки зрения). Потом посмотрел на окружающие «заводские» пайки элементов и пришёл к выводу, что моя работа очень гармонично вписывается в общую картину (смайл).\n\r\n\n\r\n\n❯\n \n Шаг 3: добавление Ethernet модуля\n\r\nEthernet модуль можно добавлять на плату только после того, как распаян стабилизатор питающего напряжения и элементы его обвязки и вся эта конструкция проверена во включённом состоянии — на выходе подсистемы питания должно быть стабилизированное напряжение 3,3 В (иначе Ethernet модуль может просто сгореть).\n\r\n\n\r\nУбедившись, что всё работает правильно, запаиваем Ethernet модуль на плату NORVI Arita в отведённое ему место.\n\r\n\n\r\n\n\r\n\n\r\nВсё. Теоретически, если наши умозрительные рассуждения были правильными и все наши хирургические манипуляции с паяльником и прочим оборудованием были корректными, то Ethernet модуль на плате NORVI Arita должен заработать.\n\r\n\n\r\n\n❯\n \n Шаг 4: скетч и проверка работы Ethernet модуля\n\r\nЧтобы убедиться в работоспособности нашего решения и Ethernet модуля на плате NORVI Arita, берём библиотеку \nEthernet2\n и немного модифицируем один из её примеров.\n\r\n\n\r\n\n/*\n  NORVI Arita Eth test\n*/\n\n#include <SPI.h>\n#include <Ethernet2.h>\n\nbyte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };\nIPAddress ip(192, 168, 1, 177);\n\nchar server[] = \"www.habr.com\";\n\nEthernetClient client;\n\nvoid setup() {\n  Serial.begin(115200);\n  Serial.println(F(\"Start NORVI Arita Eth test...\"));\n\n  Ethernet.init(48);\n  \n  if (Ethernet.begin(mac) == 0) {\n    Serial.println(\"Failed configure using DHCP\");\n    Ethernet.begin(mac, ip);\n  }\n  \n  digitalWrite(53, LOW);\n\n  Serial.println(\"Connecting...\");\n\n  if (client.connect(server, 80)) {\n    Serial.println(\"connected\");\n\n    client.println(\"GET / HTTP/1.1\");\n    client.println(\"Host: www.habr.com\");\n    client.println(\"Connection: close\");\n    client.println();\n  } else {\n    Serial.println(\"connection failed\");\n  }\n} // setup\n\nvoid loop() {\n  if (client.available()) {\n    char c = client.read();\n    Serial.print(c);\n  }\n\n  if (!client.connected()) {\n    Serial.println();\n    Serial.println(\"disconnecting.\");\n    client.stop();\n\n    while (true);\n  }\n} // loop\n\n\r\nЭто работает! Ниже представлен результат работы скетча и обращения контроллера NORVI Arita к серверу Хабра при помощи вновь имплантированного модуля на W5500.\n\r\n\n\r\n\n\r\n\n\r\nНесколько слов по поводу работы скетча. Сам код стандартный, за исключением некоторых моментов, о которых подробнее ниже.\n\r\n\n\r\nПоскольку мы ранее установили, что ETH_CS это пин D48, то указываем его при инициализации Ethernet.\n\r\n\n\r\n\n  Ethernet.init(48);\n\n\r\nВ нашем случае ETH_CS это D48, но внутри Ethernet библиотеки «дёргается» стандартный SPI пин D53, что приводит к срабатыванию реле R3, которое инженеры Norvi умудрились повесить на D53. Как они додумались до такого совершенно непонятно, но у нас теперь остаётся два выхода: внести правки в код библиотеки или сразу же после инициализации Ethernet принудительно выставить низкий потенциал на D53.\n\r\n\n\r\nИ тот и другой способы не очень хороши: в первом случае нужно править библиотеку (что не рекомендуется делать без особой необходимости), а во втором случае реле R3 будет срабатывать при старте контроллера (что тоже, мягко говоря, не очень здорово).\n\r\n\n\r\nВ скетче используется второй способ — в нём принудительно выставляется низкий потенциал на D53.\n\r\n\n\r\n\n  digitalWrite(53, LOW);\n\n\r\nВ реальном проекте можно всё-таки внести правки в библиотеку или учитывать, что реле R3 срабатывает («дёргается») при старте контроллера. Если в проекте есть реле, которое должно включаться при старте контроллера, то можно ничего не добавлять в код, а просто использовать в этом качестве «аномальное» реле R3.\n\r\n\n\r\n\n❯\n \n Что в итоге\n\r\nВ итоге мы имеем контроллер NORVI Arita Model 5 с добавленной функцией Ethernet интерфейса, что значительно, я бы даже сказал драматически, расширяет его возможности — контроллер из автономного превращается в сетевой с возможностью обмена информацией в обе стороны и с возможностью дистанционного управления, тоже в обе стороны.\n\r\n\n\r\nОчень круто, но на этом мы не остановимся и попытаемся в следующий раз добавить в NORVI Arita дисплей, а заодно приоткрыть «великую тайну четырёх перемычек», которые присутствуют на большинстве контроллеров Norvi.\n\r\n\n\r\n\n \n ",
    "tags": [
        "timeweb_статьи",
        "микроконтроллеры",
        "программирование",
        "Arduino",
        "IoT",
        "интернет вещей",
        "автоматизация",
        "smart home",
        "умный дом",
        "ATmega 2560",
        "Mega",
        "NORVI Arita",
        "Eth",
        "Ethernet",
        "W5500"
    ]
}