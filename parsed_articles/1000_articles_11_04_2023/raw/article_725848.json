{
    "article_id": "725848",
    "article_name": "Что Java-разработчикам расскажут на JPoint 2023?",
    "content": "Недавно Java дошла до юбилейной 20-й версии, а у нашей Java-конференции \nJPoint\n своя круглая дата: впервые она прошла 10 лет назад. Каких именно докладов о языке-юбиляре ожидать на конференции-юбиляре в апреле?\nКак водится, в программе есть разные тематические блоки: \n— и об инструментах («Как познавать Spring Boot 3 с помощью TDD»), \n— и о производительности (тут научат пользоваться профайлером perf для JVM-задач),\n— а также об архитектуре, тестировании, «реактивщине», работе с данными.\nА полный список докладов с описаниями — далее в посте. \nОглавление\nКейноут\nИнструменты\nПроизводительность\nТестирование\nАрхитектура\nРабота с данными\nReactive\nПрочее\nКейноут\nОбычно на конференциях несколько докладов идут параллельно, и каждый участник сам выбирает, что актуальнее для него. Но закрывающий доклад объединяет всю аудиторию, так что там не поговорить о нюансах Akka Streams, нужно что-то универсальное для всех. И в этот раз он такой: \nКооперация против конкуренции: как на самом деле выживали сообщества\nСтанислав Дробышевский\nМГУ\nЛюди — общительные и общественные. Без взаимодействия человек — не человек. Но взаимодействия бывают сильно разными. Одни наши предшественники предпочитали брутальную версию общения, другие были добры. Какая стратегия оказалась выигрышной? Кто в итоге вымер, а кто оказался нашим предком? Какие поведенческие ловушки уготовила нам наша эволюция?\nПро кейноуты поняли, теперь поговорим про «обычные» доклады:\nИнструменты\nКак анализаторы кода ищут ошибки и дефекты безопасности\nСергей Васильев\nPVS-Studio LLC\nВ нашем коде ошибок нет — это известная истина. А вот у того, кто писал этот legacy... ух, ему бы анализатор, чтобы все проблемы подсветил. Кстати, а как это работает? Как анализаторы проверяют код и находят в нем ошибки и дефекты безопасности? Какие есть типы анализа, как они дополняют друг друга и в чем их недостатки?\nНа докладе разберем эти вопросы, посмотрим на примеры ошибок из реальных проектов и затронем тему внедрения анализаторов в процессы.\nПирамида потребностей Маслоу для Java/Kotlin-разработчика\nДмитрий Иванов\nHuawei\nАндрей Кулешов\nHuawei\nПрименение концепции пирамиды Маслоу к программистам: из каких слоев состоит пирамида потребностей у разработчика, как можно удовлетворить их с помощью тех или иных технологий. Спикеры сделают небольшой обзор технологий, стека и DevTools, которые используются для создания современных проектов. Переходя от базовых потребностей выше, Андрей и Дмитрий постараются рассказать начинающим и напомнить опытным разработчикам о том, что нужно любому проекту и как разработку проекта можно улучшить, перейдя на следующий уровень развития.\nDSL-конструкции языка Kotlin и архитектура как код\nНиколай Поташников\nКУРС-ИТ\nПодход «как код» для описания архитектуры программы, системы или даже организации получает все большее распространение. Он позволяет управлять версиями архитектуры, тестировать архитектурные описания на внутреннюю консистентность, соответствие реализации, соответствие внешним условиям. Возможности Kotlin по построению типобезопасных строителей (DSL-конструкции) делают его очень удобным языком для создания архитектурных описаний и представлений архитектуры для всех заинтересованных лиц.\nFully Multiplatform Pure Java Development for Desktop, Web, Android and iOS\nКирилл Праздников\nHuawei\nПочти все Java-программисты знают, что на Kotlin можно написать код, который будет исполняться как на JVM, так и в браузере и в iPhone. А можно ли написать такое мультиплатформенное решение на чистой Java? И чтобы удобно, быстро и все нравилось... Рассказ о технологии и опыте запуска Java-программ на широком классе устройств и систем: Web, Desktop, iOS, Android с использованием AOT-компиляторов GraalVM и TeaVM.\nМоментальная аналитика с помощью Spring + Redis. Это возможно?\nАртем Артемьев\nИТ-НЛМК\nВ каждой крупной компании есть аналитические сервисы, и компания спикера — не исключение.\nАртем вкратце расскажет об одном из аналитических сервисов своего проекта и о некоторых сложностях, с которыми его команда столкнулась в процессе разработки. Сломает стереотип о том, что Redis — это просто база для кэша. Поговорит о возможностях Redis в качестве БД для аналитики, а также о том, как с ним работать на стеке Java + Spring. Покажет схему работы с двумя БД, примеры кода и демо проекта.\nВ заключении спикер расскажет о том, что в команде получили на выходе (производительность), и о подводных камнях, с которыми столкнулись.\nГенерация GS1 DataMatrix средствами Java\nВиктор Барсуков\nLaTech\nВ докладе рассматривается проблема генерации GS1 DataMatrix средствами Java-библиотек для генерации двумерных штрих-кодов. Поговорим о том, почему нельзя просто взять и добавить FNC1 в начало кодируемой строки: почему для этого требуются манипуляции с библиотеками.\nОднажды в байт-коде: инструменты анализа\nАлексей Волков\nHuawei Technologies\nДенис Фокин\nHuawei Technologies\nКак мы работаем с программой? Открываем любимый редактор кода, пишем код, исправляем и снова пишем. Когда хочется лучше понять, что происходит во время исполнения программы, мы запускаем отладчик.\nА как программу анализирует программа? Речь не только об инспекциях в IDE. Спикеры несколько лет работают над инструментом UnitTestBot, который неоднократно участвовал в международных соревнованиях по генерации тестов. В этом году был признан лучшим с точки зрения читаемости сгенерированных тестов.\nВ докладе спикеры поделятся опытом написания инструментов анализа кода, более конкретно — инструментами для анализа байт-кода. Также они расскажут про собственное решение, поделятся проблемами, с которыми столкнулись, и результатами.\nПроизводительность\nПрофайлер perf и JVM\nАлексей Рагозин\nПрофайлер perf, встроенный в ядро Linux, обладает рядом уникальных возможностей, недоступных заточенным под JVM конкурентам. На мастер-классе вы научитесь запускать perf и собирать данные с JVM-процесса, сравните результаты perf с Java Flight Recorder и сэмплированием дампов потоков, а также познакомитесь со «сверхспособностью» perf — работой с аппаратными счетчиками производительности (hardware performance counter). \nДля практической части мастер-класса вам потребуется Linux (желательно физический) и JVM.\nCloud Native JVM. Cloud Runtime\nВладимир Воскресенский\nAzul Systems\nЧто делают JVM Runtime? Почему у Java-приложений есть warmup и что делают в Java-мире, чтобы от него избавиться? Почему Java-приложения имеют outliers?\nМикросервисы или распределенные приложения выполняются множеством JVM на множестве нод. Могут ли JVM помогать друг другу? Что получится, если Runtime вынести в облако в виде JVM Cloud Runtime Service?\nСиквел блокбастера «\nCloud Native JVM. Cloud Compiler\n» (для получения удовольствия и понимания сюжета знакомство с первой частью не требуется).\nYDB Java SDK: борьба за производительность\nАлександр Горшенин\nЯндекс\nДоклад посвящен работе над YDB Java SDK, в которой команда спикера пытается достичь максимальной производительности, учитывая распределенный характер этой базы данных.\nАлександр даст краткий обзор архитектуры YDB, опишет особенности распределенных систем и покажет необходимость сложной балансировки запросов на клиенте. Также сравнит несколько вариантов решения проблем балансировки и пула сессий, представив теоретическое обоснование того, почему те или иные решения должны работать лучше.\nВы увидите различные метрики, собранные с помощью тестового приложения, которые могут подтвердить или опровергнуть сделанные предположения. Дополнительно в рамках этих измерений спикер покажет, насколько разнятся между собой синхронный и асинхронный код работы с YDB и каких максимальных результатов можно добиться в обоих вариантах.\nДоклад адресован интересующимся распределенными базами данными и сконцентрирован на вопросе создания высокопроизводительных приложений, использующих такие БД.\nРазгоняем Ignite в облачной инфраструктуре\nСемен Попов\nСбер\nДмитрий Пшевский \nСбер\nВ масштабах Сбера, который управляет данными более 100 миллионов клиентов, эволюция систем в облачную инфраструктуру — настоящий челлендж для разработчиков. Их высоконагруженная mission critical-система используется для хранения клиентских данных и участвует в большинстве бизнес-процессов обслуживания клиентов Сбера. В разработке они используют Apache Ignite, Java, Kafka, OpenShift. При миграции их решения в cloud команда столкнулась с проблемами в производительности. Семен и Дмитрий расскажут, какие именно проблемы возникли, как их избежать, а также поделятся советами, как провести миграцию максимально успешно. \nВчера SAP за 10 млн $, сегодня Java-микросервисы за 10 млн ₽\nАлексей Топчий\nX5 Tech\nАлексей покажет, как они спроектировали «на лету» и реализовали сложный business critical-сервис с высокими требованиями и огромным объемом данных. Вы узнаете, какие сложности возникают, когда данных очень много, а времени на работу с ними мало. Алексей расскажет, как с помощью профилировщика можно ускорить алгоритм в сотни и тысячи раз, как добиться выигрыша по памяти в разы и как обрабатывать десятки и сотни миллионов записей и экономить RAM.\nНе happens-before единым: нестандартные семантики\nАлександр Ланцов\nМетод AtomicLong::setOpaque вызывает недоумение, чтение исходников Disruptor пугает, а документация lazySet приводит в отчаяние? Александр поможет разобраться и найти точки опоры в удивительном мире многопоточности за пределами JMM.\nТестирование\nКак познавать Spring Boot 3 с помощью TDD\nКирилл Толкачев\nJUG Ru Group\nКак познавать Spring Boot 3 с помощью TDD? Кирилл расскажет, как использовать TDD, чтобы получать от этого пользу и удовольствие, и попробует найти рациональное зерно в этой практике. Чтобы было интереснее, сделаем это с помощью популярнейшего Spring Boot 3.\nUsing a Martial Art to Do Tests\nAndres Sacco\nPrisma Medios de Pago\nБольшинство разработчиков создают модульные тесты, чтобы проверять различные разделы приложения. Но не все проверяют, правильно ли работает весь API, потому что для фреймворков бывает сложно написать тесты.\nАндрэс расскажет, как применять платформу Karate, в которой используется подход «черного ящика», чтобы тестировать весь API.\nTest-Driven: from Zero to Hero\nMarco Schulz\nMarco Schulz Consulting\nПринято считать, что кодовая база обладает достаточной автоматизацией тестирования. Однако в реальности это совсем не так: почти в каждом проекте, в котором работал Марко Шульц, не было ни строчки тестового кода. \nСпикер расскажет, как можно с легкостью внедрить Test-Driven подход даже в огромных проектах.\nКэширование контекста Spring в тестах: как ускорить процесс тестирования\nИлья Чернов\nWrike\nВ Wrike в тестах используют несколько больших Spring-контекстов. В CI/CD малое количество таких больших контекстов скорее полезно, так как это позволяет сэкономить время с помощью кэширования. Однако при локальной разработке такие контексты только мешают, потому что время их инициализации велико и необходимо их поднимать каждый раз, когда мы хотим запустить тесты. Можно ли как-то решить эту проблему?\nМожно так же переиспользовать Spring-контекст при локальной разработке. Но как обновлять код во время разработки? С помощью hotswap! DCEVM с HotSwap Agent будут использоваться для расширения возможностей hotswap.\nИлья расскажет про плагин для IntelliJ IDEA, который позволяет делать все это и экономить время. Он также продемонстрирует, как можно писать плагины для HotSwap Agent самим.\nАрхитектура\nАрхитектура и инструменты избранных случаев интеграций по данным\nВладимир Красильщик\nJUG Ru Group\nВ профессиональной жизни разработчика и архитектора задачи интеграции различных систем по данным в том или ином виде встречаются на каждом шагу. В докладе рассмотрим несколько реальных примеров интеграции по данным из опыта спикера и разберем соответствующие им требования и инструменты реализации. Посмотрев доклад, вы узнаете о достоинствах и неудобствах таких протоколов интеграции, как JDBC, HTTP и S3, о вариантах применения готовых продуктов Debezium и StreamSets, а также о возможностях оптимизации затрат на разработку со Spring Rest и PostgREST. Особый акцент будет сделан на задаче версионирования и аудита данных и разобраны рабочие решения, основанные на триггерах и Hibernate Envers.\nЕдиная точка входа или точка отказа: путь к non-blocking API Gateway\nНикита Летов\nРосбанк\nПоговорим о выборе API Gateway на вашем проекте. О том, когда появляется необходимость использования Gateway вообще и об его основных задачах. Что сейчас представлено на рынке, в open source и что используют большинство компаний.\nРазберем на реальном примере кейс с эволюцией Gateway в компании от Nginx + монолит до Spring Boot + Neflix Zuul + Microservices до реактивного Spring Cloud Gateway. В реальном времени напишем проект Gateway на базе Zuul и реализуем бизнес-фичи с использованием стека сервлетов, параллельно разбирая ошибки разработчиков. Оценим производительность и разберем проблемы, связанные с блокирующим API. Перепишем проект на Spring Cloud Gateway без потери функциональности, а также расширим его, используя фишки современного Gateway. Разберемся, как теперь писать фильтры без ServletRequest и ServletResponse. Подключим Resilience4J Сircuit Breaker и оценим результаты.\nКэширование в асинхронном Spring-приложении\nАвгуст Вилакия\nАльфа-Банк\nЧто такое кэш, какие у него существуют виды, для чего его используют и какие есть инструменты для построения системы с использованием распределенного кэша? Август расскажет про преимущество асинхронных запросов, инструменты для этого и возможности Spring для их кэширования. Также обсудим проблемы, возникающие при кэшировании Spring WebFlux и Kotlin Coroutines, и покажем, как их можно решить с помощью готовых решений из Project Reactor и GitHub. \nDDD в действии\nМаксим Морев\nГазпромбанк\nМаксим поделится руководством с примерами на Kotlin по внедрению предметно-ориентированного проектирования (Domain Driven Design) в команду и обращения ее в безумную машину по доставке чистого кода. Рассмотрим пример приложения с тестами на бизнес-логике и полезные рекомендации, которые работают.\nSpring Cloud в микросервисной архитектуре, или История одного внедрения\nОлег Клименко\nДомклик\nВы узнаете, как команда Олега внедряла Spring Cloud в микросервисную архитектуру и с чем столкнулась. Это история о внедрении основных компонентов в микросервисной архитектуре и пройденном пути полноценного внедрения. Спикер расскажет о возникших вопросах и опыте их решения. Рассмотрит бенефиты и подведет итог своей работы со Spring Cloud за последние 4 года, расскажет о том важном, в чем он помог.\nSpring Data REST. Конструктор быстрой разработки REST API\nРустам Курамшин\nИнфраТех\nУ вас в проекте много REST-сервисов? Устали писать boilerplate-код и поддерживать зоопарк реализаций CRUD API? Тогда Spring Data REST это то, что вам нужно!\nРустам расскажет, что такое Spring Data REST и как он значительно сокращает время разработки REST API. Возможно, вы никогда не слышали об этом проекте из Spring Data или думаете, что он недостаточно гибкий для вашего проекта.\nСпикер детально разберется с возможностями Spring Data REST и посмотрит, как тот может кастомизироваться для решения задач проекта. Дело в том, что официальная документация не раскрывает всех возможностей Spring Data REST, не пишут о нем и на Хабре. Поэтому появляется отличная возможность хорошо покопаться в этом инструменте быстрой разработки.\nВ команде Рустама крепко подружились со Spring Data REST и раскрыли большую часть его сильных сторон. О них и пойдет речь в докладе.\nОт REST к GraphQL: приключение на 20 минут\nЮрий Самсонов\nЯндекс\nКаждый день мы сталкиваемся с тонкими или толстыми REST-эндпоинтами, а также необходимостью их дорабатывать под всё новые потребности клиентов. А что, если достаточно иметь модель данных и запросы над ней, причем универсальные для всех клиентов? Такой подход есть – GraphQL. Является он серебряной пулей или нет?\nСпикер постарается ответить на этот вопрос. Поговорим о проблемах в API Кинопоиска, посмотрим, как их можно решить при помощи различных технологий, обсудим плюсы и минусы GraphQL. Затем поговорим о том, как организовать процесс перехода большого проекта с одного технологического стека на другой. Естественно, в процессе перехода не обошлось без проблем и технических челленджей, которые приходилось решать, они также будут затронуты в докладе. В конце подведем итоги, обсудим текущее состояние системы и пути ее дальнейшего развития.\nРациональный подход к декомпозиции систем на модули или микросервисы\nАлексей Жидков\nНГУ\nДля многих команд поиск оптимальной декомпозиции представляет собой смесь искусства и ремесла с плохо предсказуемыми трудозатратами и результатами. Чтобы повысить предсказуемость, качество и скорость декомпозиции в своих командах, Алексей разработал специальную методику — декомпозицию на базе эффектов. А потом нашел научное подтверждение тому, что такой подход позволяет в несколько раз быстрее получить результаты, сопоставимые с использованием DDD. В докладе спикер представит методику и продемонстрирует её применение в коммерческом проекте.\nРабота с данными\nSpring, Hibernate, паттерн Value Object и границы его применения\nСемен Киреков\nМТС Диджитал\nПри разработке ПО всегда заходит вопрос о валидации и корректной работе с данными. Если выполнить бизнес-операцию с неверными входными данными, которые передал пользователь, последствия могут быть плачевными. Семен расскажет, что такое паттерн Value Object, как его внедрить в стеке Spring/Hibernate и когда его применение может помешать дальнейшей разработке.\nDTO: живи быстро, гори ярко\nАндрей Беляев\nHaulmont\nDTO — один из самых простых паттернов проектирования. Но в реальном мире аббревиатурой DTO называют разные виды объектов. В докладе рассмотрим, зачем нужны DTO, где их можно использовать и какие средства работы с ними бывают. Разберемся, сколько трансформаций могут пройти данные на пути от базы до API и обратно, какие бывают особенности маппинга данных при помощи разных структур и сколько видов проекций есть в ORM.\nApache Spark для распределенной базы данных. Внутреннее устройство коннектора\nАлексей Кузин\nAiven (\naiven.io\n)\nАлексей занимается разработкой коннектора Apache Spark для Tarantool. В докладе он собирается осветить особенности устройства коннекторов для различных баз данных и порассуждать о том, насколько Spark актуален для распределенных (многоузловых) баз данных, и какие могут быть альтернативы. Он также рассмотрит вопросы согласования настроек кластера Spark и кластера базы данных для достижения оптимальной производительности. Доклад будет интересен разработчикам драйверов и коннекторов к базам данных, а также программистам на Scala.\nКогда всё пошло по Кафке 3: где заканчивается Apache Kafka и начинает работу Consumer\nГригорий Кошелев\nКонтур\nТретий доклад из серии, в котором поговорим об устройстве и работе Consumer. Подробно разберем KIP, которые в значительной степени повлияли на работу Consumer. Покрутим настройки Kafka и Consumer.\nДоклады серии:\n1. \nКогда всё пошло по Кафке\n2. \nКогда всё пошло по Кафке 2: Разгоняем продьюсеров\nOffset и keyset: почём пагинация для продакшена?\nИлья Сазонов\nВсегда.Да\nФедор Сазонов\nСбер\n«Пагинация в Spring — полный отстой! Не используйте ее никогда! Она слишком дорого обходится вашей СУБД!» Наверняка вы слышали подобное или даже говорили сами. В чем проблема с пагинацией? Если всё так плохо, то почему в самом крутом фреймворке современности не смогли сделать нормальное разбиение результатов SQL-запросов на страницы? \nСпикеры постараются найти ответы на все вопросы. Вы узнаете, в чем сложности с пагинацией, что не так с конструкцией offset, почему от нее так сложно отказаться, при чем тут дизайнеры и как спроектировать API так, чтобы свести ущерб от грядущих правок к минимуму.\nB-Tree индексы в базах данных на примере Spring Boot-приложений, PostgreSQL и JPA\nВладимир Ситников\nКак индекс ускоряет поиск, в каком порядке указывать колонки в индексе и как работать с несколькими критериями поиска? Владимир расскажет, как в PostgreSQL работают обычные™ индексы. Если доклад попадет в золотые подборки «обязательно посмотреть на онбординге разработчика», то цель достигнута. Спикер объяснит, нужно ли индексировать foreign keys, условия where и order by, а также рассмотрит случаи, когда индекс замедляет работу, и как снизить влияние индекса на приложение.\nАсинхронная система сбора данных: сделай сам!\nАлександр Нозик\nМФТИ\nСистемы сбора данных и управления оборудованием (SCADA) давно уже не являются какой-то экзотикой. Любое крупное производство использует их. Не говоря уже о всяких «умных» домах. Но интересный факт заключается в том, что большинство таких систем (как минимум открытых) разработаны около 20 лет назад и сейчас — «идейно отсталые».\nСпикер разберет архитектуру работы систем сбора данных разной степени устарелости, обсудит, как в его команде сделали полностью асинхронную систему сбора данных (Controls-kt) на реактивных потоках (корутинах), а также расскажет, какие в этом есть плюсы и минусы.\nHibernate — проблема декартова произведения при запросах с пагинацией\nАртём Гордиенко\nРосбанк\nМы можем столкнуться с проблемой декартова произведения при использовании Hibernate, даже не замечая этого. Особенно явно она проявляет себя при запросах с пагинацией. Артём расскажет: \nКогда можно столкнуться с этой проблемой.\nКак с виду очевидное решение не всегда оказывается самым производительным.\nКакой баг он нашел при переходе на Hibernate 6.\nКак решить проблему декартова произведения.\nГрузим в Kafka из базы: с CDC и без\nАндрей Серебрянский\nРайффайзен Банк\nАндрей — Platform Owner платформы потоковой обработки данных в Райффайзен Банке и дата-инженер. Он поделится нюансами построения внутреннего PaaS-решения на больших объемах и расскажет об использовании Kafka Connect для забора данных из БД как с доступным CDC, так и без него. Обсудим, как работать с Kafka Connect на enterprise-уровне: как унифицировать метаданные, как деплоиться и откатываться из CI, как предоставлять такой сервис в виде PaaS, как управлять доступом.\nReactive\nAkka Streams в реальных задачах\nЕвгений Ненахов\nМТС Digital\nЕвгений расскажет, как применить реактивную сторону фреймворка Akka из модуля Akka Streams на практике. В частности, он покажет как они решили задачу потоковой обработки данных, используя Java и Akka Streams: с какими проблемами столкнулись и как эти проблемы устраняли.\nMDC для реактивного приложения\nЛев Безбородов\nГазпромбанк\nProject Reactor — не просто хайповый тренд, а способ построить масштабируемое и устойчивое к высокой нагрузке приложение. MDC — ключевой инструмент диагностики и мониторинга, позволяющий легко и удобно обогащать блоки кода метаданными, заданными в другом месте. К сожалению, между собой они полноценно «не дружат». Официальное решение, предлагаемое в Readme фреймворка Project Reactor, позволяет использовать MDC для логирования собственных событий между реактивными операторами. Однако это не затрагивает находящиеся внутри реактивных операторов вызовы сторонних библиотек, которые также могут логировать свою работу.\nВ подразделении спикера была разработана альтернативная реализация MDC, работающая в реактивном приложении полноценно, без указанного ограничения. Также приятным побочным эффектом использования этой реализации стало снятие ограничения на тип значения в MDC: теперь не только строковый. О деталях реализации и кратко о пути к ней спикер расскажет в докладе.\nВызов блокирующего API в Spring WebFlux: почему это плохо и что с этим делать\nСергей Петрелевич\nМир Plat.Form\nВ реактивных приложениях на Spring WebFlux по разным причинам может использоваться блокирующий API. На примере посмотрим, к чему может привести использование блокирующих вызовов. Разберемся, с помощью каких инструментов проблему можно найти и исправить.\nРеактивщина с Apache Thrift + Project Armeria: как WebFlux прикручивали без REST\nВиктор Сильнов\nАльфа-Банк\nВ команде Виктора около 200 микросервисов на Apache Thrift. Изначально они сделаны синхронно. С эволюцией продукта нагрузка росла, и они столкнулись с проблемой: некоторые сервисы с ней не справляются. Виктор расскажет, почему в данной ситуации масштабирование не помогает, чем поможет Project Armeria и когда стоит использовать реактивный подход. Спикер опишет пройденный опыт и результаты команды.\nПрочее\nJVM для RISC-V\nВладимир Кемпик\nSyntacore\nВ OpenJDK 19 появилась поддержка архитектуры RISC-V. Мы познакомимся с RISC-V и посмотрим, в каком объеме OpenJDK его поддерживает. Владимир оценит производительность порта JDK под RISC-V и ответит на вопрос «А с чем его можно сравнить?»\nВы увидите, как ищут проблемы с производительностью JVM под RISC-V, и посмотрите несколько примеров найденных и решенных проблем.\nКак нейросети лишат вас работы (или нет)\nЯн Чикнизов\nАльфа-Банк\nЯн рассмотрит, как работать с ChatGPT, Copilot, Dalle-2 в JVM-среде и как их можно использовать в качестве инструмента или фреймворка. На демо разберем интеграции ИИ в Telegram-ботов и создание проектов на базе AI. Рассмотрим возможность выполнения ИИ рутинных задач для разработчиков на примере реальных кейсов.\nМатрица компетенций и оценка Java-разработчиков\nАлександр Логинов\nX5 Tech\nВ X5 Tech активно вкладываются в развитие людей и ставят им цели благодаря матрице компетенций. Цели сотрудников позволяют команде понять, какие компетенции наиболее востребованы, и закрывать их собственными учебными материалами. Александр расскажет, как они составляли матрицу компетенций для Java-разработчиков и как сотрудники с ней взаимодействуют.\nИскусство System Design. Как построить распределенную систему и пройти собеседование\nВладимир Маслов\nX5 Tech\nSystem Design давно и прочно вошел в практику собеседований в популярные западные компании и стартапы. Сейчас этот вид собеседований начинают активно применять крупные российские компании — здесь его называют архитектурной секцией, или дизайном систем. System Design позволяет оценить навыки кандидатов уровня Senior и выше по части практического опыта, общих знаний и технологического кругозора, а также умения проектировать сервисы и работать с требованиями.\nВ докладе Владимир раскроет принципы, по которым строятся собеседования по System Design в Big Tech, и даст рекомендации, которые помогут кандидатам успешно пройти этот раунд. Эти знания пригодятся разработчикам и в работе, особенно если они занимаются высоконагруженными проектами.\nЗаключение\nКонференция — это не только доклады. Например, ещё будет серия тематических обсуждений Java Technology Radar: поговорим о текущем положении дел в Spring, JVM, перформанс-инструментах и не только. Будут и активности компаний-партнёров, и многое другое. \nИнформация об этом ещё будет дополняться, самую полную и актуальную всегда можно найти на сайте \nJPoint\n (билеты — там же). \nНо во многом конференция — это общение. Те, кто лично соберётся на московской площадке 18–19 апреля, наверняка примутся общаться. А те, кто подключатся удалённо, вряд ли будут столько говорить друг с другом, но тоже смогут как следует расспросить спикеров: или по видеосвязи после доклада, или присылая вопросы в чат (кому как удобнее). \nИ вот про эту важнейшую часть мы не можем заранее расписать ни в хабрапосте, ни на сайте. Потому что какие именно диалоги завяжутся — зависит не от нас, а от вас. Можем только сказать, что по нашему опыту, двухдневный офлайн — это всегда повод пообщаться как следует. Так что \nувидимся\n в апреле и наговоримся!\n \n ",
    "tags": [
        "java",
        "конференция",
        "архитектура",
        "производительность",
        "reactive",
        "spring",
        "тестирование",
        "работа с данными",
        "инструменты"
    ]
}