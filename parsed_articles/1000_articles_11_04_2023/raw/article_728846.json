{
    "article_id": "728846",
    "article_name": "Как перестать беспокоиться и установить Python-проект другу под Windows",
    "content": "Итак, вы закончили свою первую версию опенсорс проекта на Питоне, выложили её на Гитхаб, и даже написали честный ридми: «Требуется Python 3.10, поставьте зависимости через \npip install -r requirements.txt\n«.\nИ... через какое‑то время вам звонит \nпользователь\n друг с вопросом: «Слушай, интересный проект, а как его под Windows поставить?»\nСобственно, с этого момента у вас есть 3 варианта:\nПопытаться сэкономить всем время и попробовать упаковать ваш проект в EXE‑файл через утилиты типа pyinstaller или \nAuto PY to EXE\n. Минус: при сколь‑нибудь сложных зависимостях нужно будет ковыряться довольно долго, чтобы заставить EXE заработать. Второй минус: как вы думаете, на кого ляжет почетная обязанность собирать EXE‑шники после каждого апдейта кода?\nПопытаться объяснить другу, что такое python, GIT и как всё это поставить. Минус: возможны проблемы в отношениях с другом:))) (Вариант: поставить всё самому через дистанционный доступ, но он требует слишком много времени если \nпользователей\n друзей больше 5)\nДописать под себя набор BAT‑файлов, о которых пойдет речь в статье, и которые:\nставят сами Python и GIT в локальную папку проекта (в стиле conda);\nвыкачивают свежую версию с Гитхаба (а также апдейтят её при необходимости);\nставят нужные зависимости;\nможно прописать несколько сценариев запуска приложения;\nустановленный проект можно перемещать в другие папки и между компами.\nКак я эти батники нашел\nЕсть такой интересный опенсорс проект, который позволяет запускать текстовые нейросети на локальном компьютере с веб‑интерфейсом: \nhttps://github.com/oobabooga/text‑generation‑webui\nПроекты с нейросетями, как правило, это проекты с очень большим числом нетривиальных зависимостей. Например:\nВам нужно знать, нужно ли ставить версию torch с GPU ускорением от NVIDIA, или же надо ставить CPU‑версию.\nЧасто нужно скачивать какие‑то кастомные дополнительные Github‑проекты библиотеки.\nНадо ставить нетривиальные версии библиотек (проект выше, например, использует кастомную сборку bitsandbytes под Windows, которая позволяет запускать 4-битные нейросети, требующие меньше памяти)\nИ я был \nсильно удивлен\n, когда нашел проект от того же пользователя под названием \none‑click‑installers\n, который решал все эти проблемы установки буквально в несколько BAT‑файлов. \nСобственно, я его установил (все заработало с первого раза), разобрался в BAT‑файлах, и они меня так впечатлили своей компактностью, что я даже достаточно быстро сделал \nподобный компактный инсталлятор для своего голосового помощника Ирины\n.\nКак это работает и как это настроить\nВ качестве базового проекта рекомендую взять \nмой инсталлятор\n, а за нетривиальными случаями обращаться к оригинальному \none‑click‑installer\n.\nИтак, есть два основных файла:\ninstall.bat\nrun.bat\ninstall\n делает следующее:\nСкачивает проект \nmicromamba\n (компактная замена conda). (Вначале выводится предупреждение — путь не должен содержать пробелов и нелатинских букв/цифр.)\nУстанавливает указанные пакеты (в частности, я указываю python3.10 и git; в моем BAT‑файле есть еще выбор, установить ли тяжелый torch для Silero TTS, но вы можете этот выбор убрать) в installer_files.\nАктивирует окружение\nЕсли репозитория вашего проекта ещё не существует — клонирует его с Гитхаба; если уже существует — пытается обновить с помощью git pull.\nУстанавливает или обновляет зависимости через \ncall python -m pip install -r requirements.txt --upgrade\n. (\nУ меня используются кастомные зависимости в call python ‑m pip install ‑r requirements_exe_runner.txt ‑upgrade, так что не забудьте поправить для своего проекта\n)\nСобственно, после install в идеале наш проект полностью готов к работе.\nrun\n предельно простой:\nОн инициализирует окружение с нужными зависимостями\nЗапускает нужный питон‑файл через \ncall python run.py\n (или что вы там укажете)\nТакже в проекте существует \nmicromamba‑cmd.bat\n, который позволяет в интерактивном режиме зайти в текущее окружение и что‑то там подправить (например, поставить новые зависимости ручками если сильно нужно).\nПереносимость\nУстановка переносимая; но после переноса в другое место будет выдавать ошибку «Micromamba not found» — потому что сформированные BAT‑файлы Micromamba содержат абсолютные пути.\nДля решения проблемы после переноса нужно удалить все BAT‑файлы из installer_files\\mamba\\condabin и запустить run.bat — BAT‑файлы будут перегенерированы.\nВыводы\ninstall.bat\n выполняет основную часть установки, ставя зависимости через Интернет, позволяет быстро обновлять проект до последней Git‑версии, и занимает всего 90 строк кода.\nВот я с ним поработал и могу сказать — поправить его под свой проект занимает где‑то полчаса‑час (ну, вместе с тестированием мелочей, конечно).\nПо‑моему, очень удобно.\n \n ",
    "tags": [
        "open source",
        "installer",
        "python"
    ]
}