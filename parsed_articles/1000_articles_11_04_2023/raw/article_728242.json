{
    "article_id": "728242",
    "article_name": "Добавление файлов контента в nuget-пакетах",
    "content": "Привет! Меня зовут Александр, я старший разработчик в команде, которая занимается оцифровкой документов. Когда мы разрабатываем пакеты библиотек компонентов, иногда возникает необходимость дополнить исполняемый код определенным контентом. Нередко этот контент нужен именно в виде отдельных файлов, а не встроенных ресурсов. Примерами таких задач могут быть различные пакеты .NET-оболочек, которым обычно необходимы исходные библиотеки. Нам же понадобились специальные шрифты во внутрикорпоративной библиотеке конвертации документов.\nМы видели два варианта решения проблемы:\nВстроить шрифты как embedded-ресурсы и копировать их при инициализации библиотеки в целевую папку.\nДобавить файлы в nuget-пакет.\nПервое решение — это фактически хардкод. Если пользователь библиотеки захочет использовать свои шрифты вместо наших, мы все равно будем добавлять их в папку приложения при каждом запуске. Поэтому мы решили добавить файлы шрифтов в nuget-пакет.\nОпишу решение и подводные камни, на которые наткнулся в процессе работы. На Хабре уже есть одна \nстатья \nна эту тему. Я хотел бы подробнее рассказать о своем решении и обсудить некоторые моменты, которые не были разобраны в том материале.\nПервая попытка (неудачная)\nСначала я решил установить для всех файлов свойства Build Action — None и Copy to Output Directory — Copy if never. Это решение отлично работает при прямых ссылках на проекты в солюшене, но в nuget-пакетах шрифты оказались доступны только в пакетах, которые напрямую ссылались на пакет со шрифтами. \nНапример, у нас есть nuget-пакет LibA, содержащий шрифты. LibA используется в nuget-пакете LibB, и при добавлении LibB в проект шрифты остаются доступны. LibB используется в nuget-пакете LibC, и при добавлении LibC в проект шрифты не добавляются.\nВторая попытка (удачная)\nПосле долгого изучения MSDN и StackOverflow я пришел к выводу, что лучше сделать все вручную. То есть написать .nuspec-файл с описанием пакета и .props-файл с логикой, которая должна будет выполниться при сборке проекта.  \nДобавляем в проект папку buildTransitive, складываем в нее шрифты, .nuspec- и .props-файлы. Папку я назвал buildTransitive, потому что в пакете будет папка с таким же именем. Она нужна, чтобы каждый последующий пакет в цепочке ссылок имел доступ к шрифтам. Больше о ней можно узнать \nиз документации.\n  \nДобавляем ссылки на .props и .nuspec в файле проекта.  \n<Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    ...\n    <NuspecFile>buildTransitive\\LibA.nuspec</NuspecFile> \n  </PropertyGroup>\n  ...\n  <Import Project=\"buildTransitive\\LibA.props\" />\n</Project>\nОткрываем .nuspec-файл и описываем, какие файлы куда положить в нашем пакете.   \n<files>\n    <file src=\"LibA.props\" target=\"buildTransitive\" />\n    <file src=\"fonts\\**\" target=\"buildTransitive\\fonts\" />\n    <file src=\"..\\bin\\Debug\\net6.0\\LibA.dll\" target=\"lib\\net6.0\\LibA.dll\" />   \n</files>\nВ этом случае мы копируем файлы LibA.props и папку fonts в папку пакета buildTransitive, а собранный файл проекта — в папку пакета lib\\net6.0\\LibA.dll.  \nВнимание! Всегда используйте обратный слеш в путях! Иначе можно получить разный результат при сборке под Windows и Linux. Более подробно ситуация описана \nздесь.\n  \nОписываем логику копирования файлов шрифтов при сборке в .props-файле.  \n<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n  <ItemGroup>\n    <None Include=\"$(MSBuildThisFileDirectory)fonts\\**\" >\n      <Link>fonts\\%(RecursiveDir)%(Filename)%(Extension)</Link>\n      <PackageCopyToOutputDirectory>PreserveNewest</PackageCopyToOutputDirectory>\n      <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\n      <Visible>False</Visible>\n    </None>\n  </ItemGroup>\n</Project>\nВ этом скрипте содержимое папки fonts из пакета при сборке будет рекурсивно скопировано в папку fonts в выходном каталоге.\nДополняем функциональность  \nНа этом этапе уже получается собрать пакет со шрифтами, при использовании которого шрифты будут автоматически копироваться в выходной каталог независимо от длины цепочки ссылок на наш пакет.  \nМногие IDE позволяют заполнить данные об авторе, компании, описании пакета и так далее. В идеале эти метаданные о nuget-пакете нужно получать из файла проекта. Дополнительные переменные можно передать при сборке билда. В моем случае это была версия пакета.  \nЧтобы передать данные из файла проекта в .nuspec, используем тег NuspecProperties. В результате файл проекта будет выглядеть так:  \n<Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <TargetFramework>net6.0</TargetFramework>\n    <ImplicitUsings>disable</ImplicitUsings>\n    <Nullable>disable</Nullable>\n    <GeneratePackageOnBuild>True</GeneratePackageOnBuild>\n    <Version>$(PkgVersion)</Version>\n    <Authors>Authors list</Authors>\n    <Description>Project description</Description>\n    <NuspecFile>buildTransitive\\LibA.nuspec</NuspecFile>\n    <NuspecProperties>$(NuspecProperties);PackageId=$(MSBuildProjectName)</NuspecProperties>\n    <NuspecProperties>$(NuspecProperties);PackageAuthors=$(Authors)</NuspecProperties>\n    <NuspecProperties>$(NuspecProperties);PackageDescription=$(Description)</NuspecProperties>\n  </PropertyGroup>\n  <Target Name=\"NuspecProperties\" AfterTargets=\"Build\">\n    <PropertyGroup>\n      <NuspecProperties>$(NuspecProperties);PackageVersion=$(Version)</NuspecProperties>\n      <NuspecProperties>$(NuspecProperties);PackageTargetPath=$(TargetPath)</NuspecProperties>\n    </PropertyGroup>\n  </Target>\n  <Import Project=\"buildTransitive\\LibA.props\" />\n</Project>\nНомер версии будет передан при сборке в переменной PkgVersion и записан в тег Version. Переменные из .nuspec передаются в переменную NuspecProperties парами «ключ — значение» и разделяются точкой с запятой. При этом данные о версии и конечном пути к выходному файлу сборки записываются после билда.  \nЕсли не передать версию в переменной PkgVersion и запустить сборку проекта, ее номер будет 1.0.0.  \nСборка проекта на билд-машине запускается с помощью команды:  \n- dotnet build $ SOLUTION_FILE_PATH -c Release --no-restore -p:PkgVersion=$PACKAGE_VERSION --output outDir\nВ этом случае, если в файле проекта тег GeneratePackageOnBuild установлен в true, будет выполнена сборка проекта и создан nuget-пакет. Если тег GeneratePackageOnBuild установить в false и разделить операции dotnet build и dotnet pack, данные из файла проекта не попадут в .nuspec-файл.  \nПример .nuspec-файла с добавленными переменными, объявленными в файле проекта:  \n<package xmlns=\"http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd\">\n  <metadata>\n    <id>$PackageId$</id>\n    <version>$PackageVersion$</version>\n    <authors>$PackageAuthors$</authors>\n    <description>$PackageDescription$</description>\n    <dependencies>\n      <group targetFramework=\"net6.0\" />\n    </dependencies>\n  </metadata>\n  <files>\n    <file src=\"LibA.props\" target=\"buildTransitive\" />\n    <file src=\"fonts\\**\" target=\"buildTransitive\\fonts\" />\n    <file src=\"$PackageTargetPath$\" target=\"lib\\net6.0\\LibA.dll\" />\n  </files>\n</package>\nНа этом все. Надеюсь, моя статья поможет кому-то сэкономить время и нервы! Тестовый проект можно посмотреть \nна GitHub.\nДополнительная информация  \nВ моем тестовом проекте, который содержит шрифты, нет ссылок на другие пакеты. Если добавить ссылку на другой nuget-пакет, она будет записана в файл проекта и ее придется вручную прописать в .nuspec. Чтобы избежать ручной поддержки целостности ссылок, в рабочем проекте я вынес шрифты в отдельную сборку, в которой нет ничего кроме шрифтов, создал отдельный пакет и ссылался на него из других проектов.  \nЕсли при сборке нужно посмотреть значения переменных из файла проекта, это можно сделать с помощью тега Message.  \n<Project Sdk=\"Microsoft.NET.Sdk\">\n  ...\n  <Target Name=\"Log\" AfterTargets=\"Build\">\n    <Message Importance=\"High\" Text=\"----------Build Variables-------------\" />\n    <Message Importance=\"High\" Text=\"MSBuildProjectName = $(MSBuildProjectName)\" />\n    <Message Importance=\"High\" Text=\"TargetPath = $(TargetPath)\" />\n    <Message Importance=\"High\" Text=\"NuspecProperties = $(NuspecProperties)\" />\n    <Message Importance=\"High\" Text=\"----------Build Variables-------------\" />\n  </Target>\n  ...\n</Project>\nЕсли у вас остались вопросы или вы хотите поделиться опытом работы с nuget-пакетами, добро пожаловать в комментарии.   \n \n ",
    "tags": [
        "nuget",
        "nuget package",
        ".net",
        "msbuild",
        "ооп"
    ]
}