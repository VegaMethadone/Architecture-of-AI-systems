{
    "article_id": "728060",
    "article_name": "Golang-дайджест № 27 (1 – 31 марта 2023)",
    "content": "Свежая подборка новостей и материалов.\nНовости, события\nВыпущены Go 1.20.3 и 1.19.8\n - эти выпуски включают исправления безопасности\ngo/parser\n:\n бесконечный цикл при разборе.\nВызов любой из функций Parse в исходном коде Go, который содержит директивы //line с очень большими номерами строк, может вызвать бесконечный цикл из-за целочисленного переполнения.\nhtml/template\n: \nобратные кавычки не рассматриваются как разделители строк\nШаблоны не учитывали обратные кавычки (`) как разделители строк Javascript и поэтому не экранировали их, как ожидалось. Обратные кавычки используются, начиная с ES6, для литералов шаблонов JS. Если шаблон\nсодержал действие шаблона Go в литерале шаблона Javascript, содержимое действия можно было бы использовать для завершения литерала, внедряя произвольный код Javascript в шаблон Go.\nnet/http, net/textproto\n:\n  чрезмерное выделение памяти, при анализе заголовков HTTP и MIME может выделяться большой объем памяти даже при анализе небольших данных.\nВходные данные могут привести к тому, что общая функция, используемая для анализа заголовков HTTP и MIME, будет выделять значительно больше памяти, чем требуется для хранения проанализированных заголовков. Злоумышленник может использовать это поведение, чтобы заставить HTTP-сервер выделять большие объемы памяти из небольшого запроса, что может привести к нехватке памяти и отказу в обслуживании.\nnet/http, net/textproto, mime/multipart\n:\n Анализ много компонентной формы может потреблять большое количество ресурсов ЦП и памяти при обработке входных данных формы, содержащих очень большое количество частей. Это связано с несколькими причинами:\nmime/multipart.Reader.ReadForm ограничивает общую память, которую может потреблять проанализированная составная форма. ReadForm может занижать объем потребляемой памяти, что приводит к принятию большего количества входных данных, чем предполагалось.\nОграничение общей памяти не учитывает повышенную нагрузку на сборщик мусора из-за большого количества небольших выделений памяти в формах, состоящих из многих частей.\nReadForm может выделять большое количество недолговечных буферов, что еще больше увеличивает нагрузку на сборщик мусора.\nСочетание этих факторов может позволить злоумышленнику заставить программу, анализирующую составные формы, потреблять большое количество ресурсов ЦП и памяти, что может привести к отказу в обслуживании. Это затрагивает программы, использующие mime/multipart.Reader.ReadForm, а также синтаксический анализ форм в пакете net/http с методами запроса FormFile, FormValue, ParseMultipartForm и PostFormValue.\nПредложение \nlog/slog: structured, leveled logging\n принято.\nAwesome\nhttps://awesome-go.com/\n \nhttps://github.com/guardrailsio/awesome-golang-security\n \nhttps://github.com/Binject/awesome-go-security\n \nhttps://gist.github.com/hbt/d6ab942b882d5b94f331c5257076d05e\n \nhttps://github.com/avelino/awesome-go\n \nМатериалы для обучения\nУроки для изучения Golang\nGopherlings - изучайте Go, исправляя неправильные программы\n \nАлгоритмы, реализованные в Go (для обучения)\nLearnGo: большая коллекция примеров, упражнений\nСтатьи\nЗачем откладывать разблокировку мьютексов\nИмпорт из форм Google в вашу CRM с помощью OpenFaaS\nОт Go on EC2 до Fly.io: больше удовольствия, меньше затрат?\nПричуды и хитрости golang, часть 2\nРуководство для начинающих по созданию веб-приложения с помощью Ent\nПокрытие кода для интеграционных тестов Go\nВизуализация образцов ЦП из трассировок выполнения Go\nПолное руководство по slog\n \nЕдинственный, обязательный, вечный макет проекта Go\nПримеры параллелизма Golang в реальном мире\n \nОбратный прокси-сервер с динамическим выбором бэкенда\nМощь интерфейсов с одним методом в Go\n \na[low:high:max] трюк с slice\nПаттерн синхронизации в Go\nПланировщик Go\nSwissMap: меньшая и более быстрая хэш-таблица Golang\nПаттерн адаптера в Go\n \nАлгебра анонимных сетей\nGo в SAMP\nПрактические советы по устранению утечек памяти в Go\nПереходим на Go: 16 материалов для самостоятельного изучения языка\nТрассировка сервисов через очередь сообщений. OpenTelemetry, NATS\n5 паттернов параллельного программирования в GO, которые сделают ваш следующий проект лучше\nКак мы сделали для разработчиков универсальную шину событий, не требующую знаний Kafka и прочих брокеров\nЧто не так с твоим покрытием тестов в Go?\nАрхитектура Hashicorp Vault\nЭволюция алгоритма фильтрации модификаций товаров в Авито\nBazel, stamping, remote cache\nСказ о том как pet-project превратился в небольшой пассивный доход (часть 2)\nМой путь в профессию: из аналитиков в Go-разработчики\nВыбираем IAM в 2023 или, что есть кроме Keycloak\nAssembler в Go: техники ускорения и оптимизации\nШаблон backend сервера на Golang — часть 5 — оптимизация Worker pool\nТайные каналы связи или как централизованные сервисы способны разлагаться изнутри\nКак я приложение с Go на Rust переписывал\nИнструменты\nvald 1.7.4\n - Распределенная векторная поисковая система.\nimagor 1.4.3\n — сервер обработки изображений с поддержкой Docker.\nebitengine 2.5.1\n — игровой движок с открытым исходным кодом 2D-игр.\nmirrord 3.34.0\n — инструмент для запуска локальной службы в облачном (Kubernetes) контексте.\nzitadel 2.23.1\n — система управления пользователями, которая быстро настраивается, мультитенантность с настройкой фирменного стиля, безопасный вход в систему, самообслуживание, OpenID Connect, OAuth2.x, SAML2, беспарольный доступ с FIDO2 (включая пароли), OTP, U2F и неограниченный контрольный журнал.\nphoneinfoga 2.10.4\n — инструмент для сканирования международных телефонных номеров. Это позволяет вам сначала собрать базовую информацию, такую ​​как страна, регион, оператор связи и тип линии, а затем использовать различные методы, чтобы попытаться найти провайдера VoIP или идентифицировать владельца.\nYaegi 0.15.1\n — интерпретатор Go.\nZincSearch 0.4.3\n — Альтернатива Elasticsearch на платформе Go.\nq 0.11.1\n — DNS-клиент командной строки с поддержкой UDP, TCP, DoT, DoH, DoQ и ODoH.\nHoverFly 1.5.2\n — Легкий инструмент моделирования API.\ntask 3.22.0\n — это средство запуска/сборки задач\nalgnhsa 1.0.0\n — серверный адаптер AWS Lambda Go net/http, позволяет запускать веб-приложения Go на AWS Lambda и API Gateway или ALB без изменения существующих обработчиков\npngr\n — стартовый комплект Dockerized (postgres + nginx + golang + react)\nmacaron 1.5.0\n — модульный веб-фреймворк на Go.\nchi 5.0.8\n — маршрутизатор для создания сервисов Go HTTP\nchromedp 0.9.0\n — управление браузерами через протокол Chrome DevTools.\nko 0.13.0\n — контейнер образов контейнеров для приложений Go.\nv8go 0.9.0\n — выполнение JavaScript из Go\ngotraceui 0.1.0\n — приложение с графическим интерфейсом для просмотра трассировок выполнения Go\npathfind\n — поиск пути на 2D-полигональных картах, находит кратчайший путь между двумя точками в наборе полигонов путем построения графа видимости и последующего использования для него алгоритма поиска A*.\nbetteralign 0.2.4\n — это инструмент для обнаружения структур, которые использовали бы меньше памяти, если бы их поля были отсортированы, и, при необходимости, сортировки таких полей.\nВидео\n📺 \nКак запустить проект Go для CI/CD с помощью GitLab\n📺 \nКак измерить производительность вашего кода Go, сборку мусора и сокращение выделения памяти\nПодкасты\n🎧 \nGenericTalks\n🎧 \nGo Tim‪e‬\n🎧 \nПодкаст о аспектах Go, которых мы избегаем\nСообщества\n💬 \nВопросы по языку на русскоязычном StackOverflow\n💬 \nСтраница Go на stackoverflow\n💬 \nФорум в группах Google\nEжедневный дайджест в телеграм.\nGolangStack\n \n ",
    "tags": [
        "go",
        "golang",
        "программирование"
    ]
}