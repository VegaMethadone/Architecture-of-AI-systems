{
    "article_id": "729196",
    "article_name": "Как заставить Jmeter собирать скриншоты графиков после тестов",
    "content": "Привет, Хабр!\nМеня зовут Илья Улизко, я занимаюсь нагрузочным тестированием ДБО ЮЛ в блоке Цифровой Трансформации «РСХБ-Интех». В этой статье я поделюсь с вами опытом автоматизации сбора графиков в Grafana при отсутствии установленного grafana-image-render плагина на сервере. Для того, чтобы научить Apache Jmeter делать скриншоты панелей в Grafana, нам понадобится \nSelenium \nи \nBrowsermob-proxy\n.\nИспользовано в иллюстративных целях.\nНачнём со скачивания всех необходимых зависимостей. Сами jar файлы можно скачать с официальных Maven репозиториев. Однако этого будет мало, поэтому нужно рекурсивно скачать зависимости для самих этих jar'ников. В этом нам поможет \nсервис\n Jar-Download. Вставляем в окно Maven XML  3 зависимости из \nselenium\n, \nproxy\n, \nwebdrivermanager\n. \nНажимаем кнопку Submit, затем Download project.\nВ итоге получаем архив с более чем 40 jar файлами, которые кладём в apache-jmeter-5.4.3/lib/junit/.\nТеперь нам необходимо скачать webdriver'ы под конкретные браузеры: \nFirefox \nи \nChrome\n. С версией драйвера для Chrome всё просто: какая версия браузера, такая версия и драйвера. Например, если у вас Google Chrome 111, то и драйвер нужен версии 111. А вот с Firefox задача немного усложняется, но на сайте Mozilla есть \nтаблица \nс соответствиями, которая поможет разобраться и выбрать нужный драйвер.\nДля гибкости рекомендую скачать оба драйвера и установить оба браузера. \nПосле того как всё скачано, складываем драйверы в отдельную папку WebDriver/bin.\nДалее нам нужно создать \nAPI \nключ в Grafana, его мы будем отсылать в заголовке запросов в качестве авторизации. Для этого в Grafana слева нажимаем Configuration =>  API keys => New API key. Записываем где-нибудь у себя в блокноте, чтобы не забыть API ключ. Его мы будем далее передавать в переменную API_KEY.\nТеперь надо прописать в переменных окружения путь до webdriver'ов и API-ключа, чтобы при необходимости всё поменять в одном месте, не затрагивая скрипты Jmeter. Я использую Linux, поэтому привожу пример для этой ОС:\n \necho 'export PATH=$PATH:/path/to/WebDriver/bin' >> ~/.profile\n echo 'export API_GRAFANA=eyJblablablablablablablablabla9' >> ~/.profile\n source ~/.profile\nВытаскиваем все id'шники панелей из дашборда. У нас все дашборды для разных микросервисов шаблонизированы, поэтому количество и название панелей везде одинаковое. Заходим на любой дашборд и переходим в Dashboard settings => Json model. С помощью JSONPath \n$.panels[*].[id,title]\n и онлайн \nсервиса\n получаем список всех id'шников панелей. Этот массив мы далее будем передавать в переменную PANELIDS.\nС помощью панели разработчика определяем какой селектор или атрибут отвечает за отображение картинки внутри панели дашборда. Методом проб и ошибок был подобран атрибут class=\"panel-container\", в отличие от css selector, - он не меняется в разных панелях. Его мы будем передавать в переменную SELECTOR.\nПриступаем к написанию скрипта в Jmeter. В начале тест плана создаём setUp Thread Group, внутри которой создаём JSR223 Sampler. В нём мы заводим переменную, которая будет хранить время начала теста и инициализировать переменную FROM:\nprops.put(\"TESTSTART\",'${__time()}')\nВ конце тест плана создаём tearDown Thread Group, внутри которой формируем JSR223 Sampler. В нём пишем весь основной код.\nЗатем заводим параметризованные переменные:\nfinal String URL = \"http://10.10.10.10:3000/d/\"; \n final String DASHBOARD = \"VQB0x5pVz/settings\"; \n final int[] PANELIDS = new int[]{26,28,38,37,29,4,2,23,39,40,36,25,27};    final String FROM = '${__P(TESTSTART)}'; \n final String TO = '${__time()}'; \n final String SELECTOR = \"panel-container\"; \n final String API_KEY = System.getenv(\"API_GRAFANA\");  \n final double SCALE_MONITOR = 1; \n final SimpleDateFormat formatter = new SimpleDateFormat(\"'_'dd.MM.yyyy\"); \nОбратите внимание на переменную SCALE_MONITOR, она нужна, чтобы нивелировать масштабирование мониторов с высоким разрешением. Например, если у вас монитор с разрешением 4K и в настройках параметров экрана выставлен масштаб в 150%, то значение этой переменной будет 1.5, для масштаб в 125% нужно выставить - 1.25, ну и т.д.\nСоздадим и настроим объект BrowserMobProxy, он нужен для того, чтобы к запросам из Selenium добавлялся заголовок с авторизацией по API ключу:\nBrowserMobProxy proxy = new BrowserMobProxyServer();\n proxy.setTrustAllServers(true);\n proxy.start();\n proxy.addHeader(\"Authorization\", \"Bearer \".concat(API_KEY));\nТеперь создадим веб драйвер с конкретной реализацией Firefox и передадим в него наш прокси с добавленным заголовком, а также добавим несколько настроек:\n \nWebDriver driver;\n DesiredCapabilities caps = new DesiredCapabilities();\n Proxy seleniumProxy = ClientUtil.createSeleniumProxy(proxy);\n System.setProperty(\"sun.java2d.uiScale\", \"1\");\n System.setProperty(FirefoxDriver.SystemProperty.BROWSER_LOGFILE, \"null\");\n FirefoxOptions firefoxOptions = new FirefoxOptions();\n firefoxOptions.addArguments(\"-private\");\n caps.setCapability(\"moz:firefoxOptions\", firefoxOptions);\n caps.setCapability(CapabilityType.ACCEPT_INSECURE_CERTS, true);\n caps.setCapability(CapabilityType.ACCEPT_SSL_CERTS, true);\n caps.setCapability(CapabilityType.PROXY, seleniumProxy);\n driver = new FirefoxDriver(caps);\nЧерез веб драйвер открываем браузер, разворачиваем на весь экран, делаем авторизованный запрос на URL адрес Grafana. Затем снимаем скриншоты всех панелей, id которых мы собрали в п. 5. \nДалее сохраняем каждый скриншот под собственным названием в указанную директорию:\ndriver.manage().window().maximize();\n for (int i = 0; i < PANELIDS.length; i++) {\n driver.navigate().to(URL\n     .concat(DASHBOARD)\n     .concat(\"?orgId=1&viewPanel=\")\n     .concat(String.valueOf(PANELIDS[i]))\n     .concat(\"&from=\")\n     .concat(FROM)\n     .concat(\"&to=\")\n     .concat(TO));\n Thread.sleep(2000);\n WebElement elem = new WebDriverWait(driver, 5)\n     .until(ExpectedConditions\n     .visibilityOfElementLocated(By.className(SELECTOR)));\n File screenshot = ((org.openqa.selenium.TakesScreenshot) driver)\n     .getScreenshotAs(org.openqa.selenium.OutputType.FILE);\n BufferedImage image = ImageIO.read(screenshot);\n int x = (int) (elem.getLocation().getX() * SCALE_MONITOR);\n int y = (int) (elem.getLocation().getY() * SCALE_MONITOR);\n int width = (int) (elem.getSize().getWidth() * SCALE_MONITOR);\n int height = (int) (elem.getSize().getHeight() * SCALE_MONITOR);\n BufferedImage elemScreenshot = image.getSubimage(x, y, width, height);\n ImageIO.write(elemScreenshot, \"png\", new File(\"/path/GrafanaScreenshots/\"\n     .concat(elem.getAttribute(\"aria-label\")\n     .substring(0,elem.getAttribute(\"aria-label\").length()-6))\n     .concat(formatter.format(System.currentTimeMillis()))\n     .concat(\".png\")));\n }\nЗакрываем браузер и останавливаем прокси:\n \ndriver.quit();\n proxy.stop();\nВ итоге JSR223 Sampler будет выглядеть следующим образом:\njava code\nimport net.lightbody.bmp.BrowserMobProxy;\nimport net.lightbody.bmp.BrowserMobProxyServer;\nimport net.lightbody.bmp.core.har.HarEntry;\nimport net.lightbody.bmp.client.ClientUtil;\nimport org.openqa.selenium.*;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.firefox.FirefoxOptions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport javax.imageio.ImageIO;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.IOException;\nimport java.text.SimpleDateFormat;\n      \n    final String URL = \"http://10.10.10.10:3000/d/\";\n    final String DASHBOARD = \"VQB0x5pVz/settings\";\n    final int[] PANELIDS = new int[]{4,23};\n    final String FROM = '${__P(TESTSTART)}';\n    final String TO = '${__time()}';\n    final String SELECTOR = \"panel-container\";\n    final String API_KEY = System.getenv(\"API_GRAFANA\"); \n    final double SCALE_MONITOR = 1;\n    final SimpleDateFormat formatter = new SimpleDateFormat(\"'_'dd.MM.yyyy\");\n\n    BrowserMobProxy proxy = new BrowserMobProxyServer();\n    proxy.setTrustAllServers(true);\n    proxy.start();\n    proxy.addHeader(\"Authorization\", \"Bearer \".concat(API_KEY));\n    \n    try {       \n        WebDriver driver = getDriver(proxy);\n        driver.manage().window().maximize();\n        for (int i = 0; i < PANELIDS.length; i++) {\n        driver.navigate().to(URL\n            .concat(DASHBOARD)\n            .concat(\"?orgId=1&viewPanel=\")\n            .concat(String.valueOf(PANELIDS[i]))\n            .concat(\"&from=\")\n            .concat(FROM)\n            .concat(\"&to=\")\n            .concat(TO));\n        Thread.sleep(2000);\n        \n        WebElement elem = new WebDriverWait(driver, 5)\n            .until(ExpectedConditions.visibilityOfElementLocated(By.className(SELECTOR)));\n        File screenshot = ((org.openqa.selenium.TakesScreenshot) driver).getScreenshotAs(org.openqa.selenium.OutputType.FILE);\n        BufferedImage image = ImageIO.read(screenshot);\n        int x = (int) (elem.getLocation().getX() * SCALE_MONITOR);\n        int y = (int) (elem.getLocation().getY() * SCALE_MONITOR);\n        int width = (int) (elem.getSize().getWidth() * SCALE_MONITOR);\n        int height = (int) (elem.getSize().getHeight() * SCALE_MONITOR);\n        BufferedImage elemScreenshot = image.getSubimage(x, y, width, height);\n        ImageIO.write(elemScreenshot, \"png\", new File(\"/path/to/GrafanaScreenshots/\"\n                    .concat(elem.getAttribute(\"aria-label\").substring(0,elem.getAttribute(\"aria-label\").length()-6))\n                    .concat(formatter.format(System.currentTimeMillis()))\n                    .concat(\".png\")));\n    }\n        driver.quit();\n    } catch (IOException | InterruptedException ignored) {\n      } finally {\n        proxy.stop();\n    }\n\n    final WebDriver getDriver(BrowserMobProxy proxy) {\n        WebDriver driver;\n        DesiredCapabilities caps = new DesiredCapabilities();\n        Proxy seleniumProxy = ClientUtil.createSeleniumProxy(proxy);\n        System.setProperty(\"sun.java2d.uiScale\", \"1\");\n        System.setProperty(FirefoxDriver.SystemProperty.BROWSER_LOGFILE, \"null\");\n        FirefoxOptions firefoxOptions = new FirefoxOptions();\n        firefoxOptions.addArguments(\"-private\");\n        caps.setCapability(\"moz:firefoxOptions\", firefoxOptions);\n        caps.setCapability(CapabilityType.ACCEPT_INSECURE_CERTS, true);\n        caps.setCapability(CapabilityType.ACCEPT_SSL_CERTS, true);\n        caps.setCapability(CapabilityType.PROXY, seleniumProxy);\n        driver = new FirefoxDriver(caps);\n        return driver;\n    }\nЗаключение\nТаким образом у нас получилось автоматизировать процесс сбора графиков из дашборда Grafana без установленного grafana-image-render плагина. \nНадеюсь, что это материал был полезен тем, кто занимается нагрузочным тестированием и работает с Apache Jmeter. Буду рад ответить на ваши вопросы в комментариях.\n \n ",
    "tags": [
        "jmeter",
        "grafana",
        "автоматизация",
        "java",
        "рсхб",
        "рсхб-интех",
        "рсхб в цифре",
        "тестирование"
    ]
}