{
    "article_id": "727082",
    "article_name": "Как стать -10x-инженером",
    "content": "\r\n+10x-инженеры могут быть мифом, однако -10x-инженеры действительно существуют.\n\r\n\n\r\nЧтобы стать -10x-инженером, просто тратьте впустую 400 часов разработки в неделю. Комбинируйте это со следующими стратегиями:\n\r\n\n\r\n\nОбнулите результат работы десяти инженеров\n\r\nМеняйте требования в процессе разработки как можно дольше. Чтобы избежать обвинений, с самого начала обфусцируйте требования.\n\r\n\n\r\n\nНаведите 400 часов суеты\n\r\nПросите у своей команды выполнять задачи, которые \nнапоминают\n работу. Например, создавать презентации, диаграммы и заниматься управлением тикетами. Создавайте бессмысленные ритуалы.\n\r\n\n\r\n\nОрганизуйте 400 часов выгорания/текучки\n\r\nБудьте неблагодарными. Навязывайте чувство вины. Сейте смятение. Гневайтесь. Заставляйте людей перерабатывать.\n\r\n\n\r\n\nСделайте десять инженеров заложниками технических переговоров\n\r\nПусть инженеры обсуждают идеи. Стимулируйте их преследовать изящество в ущерб прагматизму. Сделайте так, чтобы ни у кого не было власти принимать решения.\n\r\n\n\r\n\nДобавьте 400 часов лишних коммуникаций\n\r\nСовещания портят календари. Чтобы незаметно тратить время других, пишите пространные сообщения/документы и максимально широко рассылайте их. Приветствуйте все мнения и стремитесь к вовлечённости.\n\r\n\n\r\n\nПотеряйте зарплаты за десять недель на облачных сервисах\n\r\nПишите медленные программы. Избегайте индексов баз данных. Выполняйте однопоточные программы на машинах с 16 ядрами. Выбирайте экзотическое оборудование с непривычными ОЗУ и GPU. Произвольно сохраняйте данные в ОЗУ/на диске. Ничего не сжимайте. Не обращайте внимания на структуру данных.\n\r\n\n\r\n\nСоздавайте бесполезные инструменты\n\r\nРешите, что готовые решения \nне совсем\n вам подходят. Пишите скрипты, которые будут понятны только одному человеку. Если скрипт делает что-то важное, не создавайте к нему документацию.\n\r\n\n\r\n\nДобавьте 400 часов времени компиляции/сборки\n\r\nМедленные сборки тратят время и вызывают сопутствующие траты. При увеличении времени сборки разработчики с большей вероятностью отвлекутся от работы. Чтобы гарантировать переключение контекста разработчиков, сделайте так, чтобы рекомпиляция занимала не менее 20 секунд. Для достижения схожего результата также можно писать медленные тесты.\n\r\n\n\r\n\nПишите бессмысленные тесты\n\r\nСоздавайте зависимости от конкретных переменных, не тестируя внутреннюю функциональность. Создавайте имитации вызовов функций до тех пор, пока вообще не останется оригинального кода. Добавьте в тесты немного случайности, чтобы успешность их прохождения не зависела от каких-то причин.\n\r\n\n\r\n\nПотратьте впустую 400 часов разработки на плохую архитектуру\n\r\nНе уделяйте ни малейших усилий на анализ того, как структура системы будет эволюционировать со временем. Или же сделайте так, чтобы ваша команда была одержима архитектурными решениями и у неё не оставалось времени на тестирование гипотез.\n\r\n\n\r\n\nПотратьте впустую 400 часов на развёртывание\n\r\nСоздавайте как можно больше окружений. Продакшен и staging должны существенно различаться. Вводите в эксплуатацию нестабильный код при помощи нестабильных систем сборки. Часто выполняйте миграцию баз данных.\n\r\n\n\r\n\nПотеряйте зарплаты за десять недель на недовольных клиентах\n\r\nМногократно не обнаруживайте и не устраняйте серьёзные баги. Не уделяйте внимания уязвимостям безопасности.\n\r\n\n\r\n\nПишите бесполезную документацию\n\r\nОбъясняйте код в личных сообщениях. Пишите wiki, которыми никто не пользуется.\n\r\n\n\r\n\nПоймайте десять инженеров в ловушку бессмысленного экспериментального проекта.\n\r\nПривлеките талантливых инженеров и впустую растратьте их потенциал. Занизьте сложность проекта в глазах руководства; завысьте его полезность. Обещайте руководству, что он «почти готов», пока его не свернут.\n\r\n\n\r\n\nДобавляйте зависимости, требующие 400 часов поддержки\n\r\nИнженеры по отдельности изучают каждую библиотеку.\n\r\n\n\r\n\nОткладывайте смену курса\n\r\nНикогда не признавайте провала. Утопите свою команду в невозвратных издержках. Игнорируйте компромиссы 80/20, которые могли бы улучшить ситуацию.\n\r\n\n\r\n\nНаймите десять 0x-инженеров\n\r\nУпущенная выгода может убить. Мёртвый груз не только активно вредит команде, но и занимает места людей, которые могли бы активно помогать.\n\r\n\n\r\n\nНаймите пять -1x-инженеров\n\r\nНе останавливайтесь на мёртвом грузе. Активно нанимайте инженеров, вызывающих катастрофы и отказывающихся учиться.\n\r\n\n\r\n\nПомешайте увольнению десятка -1x-инженеров\n\r\nНе раскачивайте лодку. Не оставляйте бумажного следа неудач. Голосуйте за плохую разработку.\n\r\n\n\r\n\nДобавьте 400 часов устранения багов\n\r\nПишите программы, которые невозможно отладить. Накладывайте на всё множество слоёв абстракций. Пишите спагетти-код. Сделайте так, чтобы всё было чувствительным к исходным условиям. Избегайте чистых функций. Произвольно используйте зависимости. Когда это возможно, говорите: «А на моей машине работает».\n \n ",
    "tags": [
        "вредительство",
        "бюрократия",
        "саботаж"
    ]
}