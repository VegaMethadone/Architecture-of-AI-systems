{
    "article_id": "726192",
    "article_name": "Как собирать логи с помощью Fluentd и Fluent Bit",
    "content": "Логирование — это один из трех столпов мониторинга в распределенных системах. Мы можем видеть бурное развитие популярных продуктов с открытым исходным кодом типа ELK stack и полноценных коммерческих продуктов, которые помогают с проблемами протоколирования в больших масштабах — Splunk, к примеру. Однако в таких сложных системах как Kubernetes протоколирование остается сложной проблемой. Она усугубляется постоянным ростом объема данных из–за всё большего внедрения контейнеризации.  \nВ этой статье мы рассмотрим различные виды логов Kubernetes, необходимых для улучшения системы мониторинга, уделим внимание подходам к сбору, агрегации и анализу логов. Также мы приведем решение с использованием open source-сервисов \nFluentd\n и \nFluent Bit\n .\nТипы логов Kubernetes \nЛоги приложений\n \nОни интересны нам для дебага проблем и мониторинга активности приложений. Все контейнерные платформы (Docker, containerd, cri-o) поддерживают механизм ведения логов типа stdout/stderr, сюда же можно отнести контроллер ingress, кластерные автоскалеры или cert-manager.\nЛоги компонентов K8s\nПомимо оркестрации приложений, Kubernetes также ведет журналы используемых компонентов, таких как etcd, kube-apiserver, kube-scheduler, kube-proxy и kubelet. Если узел поддерживает Systemd, то kubelet и контейнерные runtimes пишутся в journald.  В ином случае системные компоненты пишут файлы \n.log\n в каталог \n/var/log\n ноды. \nСобытия Kubernetes\nКаждое событие Kubernetes регистрируется сервером API и является его объектом. Эти логи содержат важную информацию об изменениях в состоянии ресурсов Kubernetes.\nЖурналы аудита Kubernetes\nK8s также ведет журналы аудита для каждого запроса к серверу API во время его работы. Каждый запрос связан с заданным этапом: \nRequestReceived\n, \nResponseStarted\n, \nResponseComplete\n, \nPanic\n. Затем это событие обрабатывается в соответствии с политикой аудита, которая подробно описывает его уровни, включая \nNone\n, \nMetadata\n, \nRequest\n и \nRequestResponse\n.\nПодходы к ведению журналов в Kubernetes\n Существует два основных способа логирования:\nЛогирование в stdout/stderr и использование специальных приложений для сбора и передачи информации во внешнюю систему.\nИспользовать паттерн sidecar для отправки логов во внешнюю систему.\nВ первом случае kubelet отвечает за запись логов контейнеров в \n/var/log/containers\n на основной ноде. Kubernetes не предоставляет встроенного механизма для ротации журналов, но файлы журналов удаляются с ноды, когда контейнер с неё удаляют. Сервисы для протоколирования собирают логи и отправляют их на платформы типа Splunk, Sumo Logic или ELK.\nВ качестве альтернативы можно развернуть дополнительный Sidecar-контейнер, который будет собирать логи из приложения. Этот контейнер считывает данные из потоков, файлов, journald и отправляет их на платформу агрегации логов для дальнейшего анализа и хранения.\nКод приложения может быть перенастроен так, чтобы пушить логи непосредственно в бэкенд, но этот паттерн не является распространенным, так как он изменяет поведение кода.\nИнструменты логирования Kubernetes\nПоскольку Kubernetes не предоставляет по умолчанию возможности агрегации логов, агенты часто развертываются на уровне кластера для сбора, агрегации и отправки журналов на центральный бэкэнд.\nFluentd и Fluent Bit\nFluentd и Fluent Bit — это агрегаторы и навигаторы логов, они созданы Cloud Native Computing Foundation (CNCF). Fluentd был первоначальным проектом, нацеленным на решение проблемы агрегации и пересылки логов в масштабе, а Fluent Bit был добавлен позже как облегченная версия Fluentd с аналогичными целями. Каждый проект может использоваться отдельно в роли агрегатора или навигатора. Также возможно объединить оба развертывания.\nELK/EFK\nЕще одним популярным инструментом с открытым исходным кодом является стек ELK (Elasticsearch, Logstash и Kibana):\nElasticsearch\n: индексирует файлы журналов для анализа\nKibana\n: инструмент визуализации\nLogstash\n: агрегатор журналов\nBeats\n: форвардер логов\nИногда Logstash/Beats заменяется на Fluentd или Fluent Bit для создания стека EFK.\nStackdriver / CloudWatch\nПри работе в облачной системе (например, GKE, EKS) для логирования можно также использовать родное решение конкретного провайдера. GKE по умолчанию поставляется с поддержкой Stackdriver. На EKS развернуты наборы демонов fluentd, настроенный на передачу логов в Cloudwatch.\nКоммерческие инструменты\nТакже существуют платные программы от Splunk, Sumo Logic, Datadog и других компаний. \nОсновы Fluent Operator\nFluent Bit Operator (будет называть Fluent Operator) — это оператор логирования Kubernetes, разработанный командой KubeSphere и переданный в сообщество Fluent. Fluent Operator объединяет преимущества fluentbit (легкий вес) и fluentd (богатая экосистема плагинов) для сбора логов с каждого узла через демонсет fluentbit, которые затем передаются в fluentd для агрегации и пересылки в инструменты анализа логов: elasticsearch, kafka, loki, s3, splunk и другие.\nFluent Operator состоит из: \nFluentBit\n: Задает Fluent Bit DaemonSet и его конфигурации.\nFluentBitConfig\n: Задает плагины ввода/фильтра/вывода и генерирует окончательную конфигурацию в Secret.\nInput\n: Задает секции конфигурации ввода.\nParser\n: Задает секции конфигурации парсера.\nFilter\n: Задает секции конфигурации фильтра.\nOutput:\n Задает секции конфигурации вывода.\nКакие преимущества есть при использовании оператора:\nПользовательский образ Fluent Bit в KubeSphere поддерживает динамическую перезагрузку конфигурации без перезагрузки подов Fluent Bit.\nСвязь между Fluent Bit и Fluentd управляется удобными для пользователя входными и выходными CRD вместо конфигурационных файлов внутри каждого компонента.\nПроще выбирать плагины input/filter/output с помощью меток Kubernetes.\nКак обрабатываются логи Kubernetes в KubeSphere\nKubeSphere использует Fluent Operator под капотом для сбора и обработки логов. Чтобы включить ведение журналов, введите значение \ntrue\n в параметре \nlogging\n:\nlogging:\n  enabled: true\nЗатем на Dashboard вы сможете увидеть компоненты журнала:\nДля организации событий Kubernetes введите в параметре \nevents\n значение \ntrue\nevents:\n enabled: true\nЗатем вы можете использовать функцию поиска событий из панели инструментов: она поможет вывести журнал событий. \nДля журналов аудита установите в параметре \nauditing\n значение \ntrue\n:\nauditing:\n enabled: true\nЗатем вы можете использовать функцию Auditing Operating с помощью панели инструментов:  \nОт редакции\nРазобраться в Kubernetes вы можете в Слёрме. Мы подготовили курсы для специалистов с разным уровнем владения K8s — «\nKubernetes база\n» для системных администраторов и «\nKubernetes для разработчиков\n» — тех, кто хочет разрабатывать приложения под Kubernetes.  \nА еще у нас есть выгодный комплект: «Kubernetes база» + «Мониторинг и логи в Kubernetes». Узнать больше о программе и записаться \nможно на нашем сайте.\n \n ",
    "tags": [
        "kubernetes",
        "k8s",
        "slurm",
        "it-компании",
        "it-инфраструктура",
        "сисадмин",
        "системное администрирование",
        "devops",
        "карьера ит-специалиста",
        "карьера в it-индустрии"
    ]
}