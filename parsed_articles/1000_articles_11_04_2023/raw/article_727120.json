{
    "article_id": "727120",
    "article_name": "Как мы подружили Postman и Zephyr",
    "content": "Всем привет! Меня зовут Вова Романов, я занимаюсь развитием инструментов тестирования в Росбанке. В прошлом году мы перешли на платформу тест-менеджмента Zephyr Scale и сейчас активно внедряем ее в команды. Недавно задались вопросом: а можно ли передавать результаты запросов Postman в тестовые прогоны Zephyr с определенным количеством проверок (тестов) в каждом запросе? Ведь есть API Zephyr для публикации результатов, и нужно всего лишь подружить его с результатами запросов Postman. Готового рецепта в Сети не нашлось, так что в это посте я поделюсь тем, как это сделали мы.\nПример\nПредставим, что в Zephyr у нас есть тест-кейс, состоящий из трех шагов: проверка кода состояния, имени и ключа. Есть коллекция Postman, в которой есть один GET. По запросу должно выполниться три проверки: код состояния, имя, ключ. Также в коллекцию добавлен POST для публикации результатов в Zephyr.\nЭто упрощенный пример, реальные коллекции будут намного больше. Но для простоты понимания достаточно одного GET и POST.\nЧто в GET?\nВозьмем простой запрос в Zephyr — получить ключ и имя тестового прогона:\nХотим выполнить три проверки:\nTest_1 — код состояния равняется «200»;\nTest_2 — имя равняется «ТК155333»;\nTest_3 — ключ равняется «TT-C39».\nСразу понимаем, что если Test_1 провалится, выполнять остальные не будет смысла (считаем их заблокированными). А если Test_1 успешно прошел, то выполняем Test_2 и Test_3.\nЧтобы записывать результаты выполнения тестов, мы используем переменные коллекции Postman. Например, если тест успешно выполнился, создаются две переменные: «Результат = Pass» и «Комментарий = Успех». Комментарий необязателен, но с ним приятнее.\n{pm.collectionVariables.set(\"Test_2_Результат\", \"Pass\"); pm.collectionVariables.set(\"Test_2_Коммент\", \"Успех\");}\nНа основании этих переменных позже будет формироваться POST, который запишет в Zephyr результат выполнения тест-кейса в целом и его шагов (с комментарием). Не забываем, что кроме результата шагов тест-кейса, необходимо добавить условие: если хоть один тест провалился, то весть тест-кейс должен считаться провальным.\nЧто в итоге получилось на вкладке Tests:\nif (pm.response.code == \"200\") // Главное условие. Если провалится Test_1, то нет смысла выполнять Test_2 и Test_3\n  {pm.test(\"Test_1\", function () {pm.response.to.have.status(200);});\n  pm.collectionVariables.set(\"Test_1_Результат\", \"Pass\"); pm.collectionVariables.set(\"Test_1_Коммент\", \"Успех\"); // Создание переменных в коллекцию, для отправки результата\n\n  var jsonDate = pm.response.json(); // распарсить ответ запроса для Test_2 и Test_3\n\n  pm.test(\"Test_2\", function () {pm.expect(jsonDate.name).to.eql(\"Тестовый цикл\");})\n    if (jsonDate.name == \"Тестовый цикл\")\n    {pm.collectionVariables.set(\"Test_2_Результат\", \"Pass\"); pm.collectionVariables.set(\"Test_2_Коммент\", \"Успех\");}\n    else {pm.collectionVariables.set(\"Test_2_Результат\", \"Fail\"); pm.collectionVariables.set(\"Test_2_Коммент\", \"Получаем имя \" + jsonDate.name);}\n\n  pm.test(\"Test_3\", function () {pm.expect(jsonDate.key).to.eql(\"TT-C39\");})\n    if (jsonDate.key == \"TT-C39\")\n    {pm.collectionVariables.set(\"Test_3_Результат\", \"Pass\"); pm.collectionVariables.set(\"Test_3_Коммент\", \"Успех\");}\n    else {pm.collectionVariables.set(\"Test_3_Результат\", \"Fail\"); pm.collectionVariables.set(\"Test_3_Коммент\", \"Получаем код \" + jsonDate.key);}\n  }\nelse\n  {pm.test(\"Test_1\", function () {pm.response.to.have.status(200);});\n  pm.collectionVariables.set(\"Test_1_Результат\", \"Fail\"); pm.collectionVariables.set(\"Test_1_Коммент\", \"Статус код \" + pm.response.code);\n  pm.collectionVariables.set(\"Test_2_Результат\", \"Blocked\"); \n  pm.collectionVariables.set(\"Test_3_Результат\", \"Blocked\");}\n\nif (pm.collectionVariables.get(\"Test_1_Результат\") == \"Fail\" || pm.collectionVariables.get(\"Test_2_Результат\") == \"Fail\" || pm.collectionVariables.get(\"Test_3_Результат\") == \"Fail\") // Если хоть один из тестов провалился, то тест-кейс считается провальным\n{pm.collectionVariables.set(\"Test_Результат\", \"Fail\");}\nelse {pm.collectionVariables.set(\"Test_Результат\", \"Pass\");}\nЕсли тесты прошли успешно, то в переменных коллекции Postman появятся результаты тестов:\nКак отправить результаты\nДля отправки результатов используем:\nГде «TT-C39» — номер тестового цикла Zephyr, в котором находится тест-кейс с нашими проверками. На вкладке Body прописываем JSON загрузки результатов, где ссылаемся на созданные переменные коллекции Postman и пишем, в какой тест-кейс загружаем (TT-T75). Скрипт получился такой:\n[\n    {\n        \"status\": \"{{Test_Результат}}\",\n        \"testCaseKey\": \"TT-T75\",\n        \"scriptResults\": [\n        {\n          \"index\": 0,\n          \"status\": \"{{Test_1_Результат}}\",\n          \"comment\": \"{{Test_1_Коммент}}\"\n        },\n           {\n          \"index\": 1,\n          \"status\": \"{{Test_2_Результат}}\",\n          \"comment\": \"{{Test_2_Коммент}}\"\n        },\n           {\n          \"index\": 2,\n          \"status\": \"{{Test_3_Результат}}\",\n          \"comment\": \"{{Test_3_Коммент}}\"\n        }\n      ]\n    }\n]\nИ вишенка на торте: после выполнения POST должны очиститься переменные коллекции. Для этого в POST на вкладке Tests добавляем:\npm.collectionVariables.clear(); // Очищаем переменные коллекции\nИтоги\nТеперь мы можем проводить тестирование в Postman и избавиться от \nбесячего\n ручного заполнения результатов в Zephyr. Возможно, кто-то сможет написать JavaScript более красиво, я же предлагаю готовый рабочий вариант.\n \n ",
    "tags": [
        "zephyr",
        "postman",
        "postman api",
        "api",
        "росбанк"
    ]
}