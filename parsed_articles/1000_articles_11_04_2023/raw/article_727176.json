{
    "article_id": "727176",
    "article_name": "Практическое DDD. Часть 2: Архитектурные темы 1 — Агрегат и ограниченный контекст в микросервисе",
    "content": "В этом посте я расскажу о том, как мы используем DDD в Augury и наши уникальные бизнес-требования для создания руководства по архитектуре микросервисов, сосредоточившись на трех общих паттернах. Мы используем это руководство и определения, чтобы решить, когда создавать новый микросервис и как распределить нашу доменную логику по этим сервисам. Если вы не читали \nпредыдущую статью\n и вам интересно, с чего все началось, ссылка прилагается.\nОпределения DDD\nОграниченный контекст (BC)\n — это совокупность взаимосвязанных областей\\ бизнес-требований в нашем продукте. По мере развития нашего продукта рождается все больше BC. В DDD, BC содержит один или более \nагрегатов (Aggregates)\n.\nАгрегат (Aggregate)\n \n— это кластер ассоциированных объектов, которые мы рассматриваем как единое целое при изменении данных. Также часто называемый как бизнес-модель.\nАгрегат содержит следующие члены:\nEntity (Сущность)\n — объект, фундаментально определяемый не его атрибутами, а принципом последовательности и идентичности, например, компонент внутри машины.\nValue Object (Объект-значение)\n — объект, который описывает некоторую характеристику или атрибут, но не несет в себе концепции идентичности. В большинстве случаев это просто некоторые поля, вложенные в сущность. Например, поле имени.\nAggregate Root (Корень агрегата)\n — это единственная определенная \nсущность\n, содержащаяся в агрегате.\nПоскольку мы видим возможные типы агрегатов в системе, то можем свести их к двум:\n(Simple aggregate) Простой агрегат\n — его корневая сущность создается с помощью какой-либо команды\nComplex Aggregate (Сложный агрегат)\n — его \nкорневая сущность\n создается\\обновляется через \nсобытия домена\n, одиночные или множественные, от разных агрегатов. Это приводит к тому, что его основная сущность должна  знать больше о других доменах для выполнения своих бизнес-требований.\nПрактические архитектурные паттерны\nВ этой теме мы рассмотрим три паттерна:\nAggregate Microservice (Агрегат Микросервиса)\n — микросервис, инкапсулирующий агрегат.\nComplex aggregate Microservice (Сложного агрегат Микросервиса)\n — микросервис, инкапсулирующий сложный агрегат.\nBounded context Microservice (Ограниченный контекст в Микросервисе)\n — микросервис, инкапсулирующий ограниченный контекст.\nВы можете удивиться, почему мы решили представить в нашей системе все три варианта. Изучая DDD и то, как различные компании превращают теоретические разработки в практические компоненты, можно найти несколько аргументов. Одним из них является \nгранулярность нашей системы\n. То есть, какой самый маленький независимый технический компонент у нас есть? Как мы видели, у нас есть два варианта: агрегат и ограниченный контекст в микросервисе.\nДавайте рассмотрим наши потребности в рамках компании 一\nСоответствие продукта рынку — наш основной продукт достиг соответствия рынку, это означает, что у нас есть (в этих областях) согласованный ограниченный контекст, интерфейсы и агрегаты.\nРост — Augury увеличила число клиентов и разработчиков. Нам нужно поддерживать рост и структуру команды, которая сопровождает эти изменения.\nAgile-мышление — хотя наш основной продукт реализован в PMF у нас все еще есть области внутри него или другие продукты, в которых мы чувствуем себя менее уверенно, и они требуют более гибкой среды.\nДавайте подумаем о некоторых плюсах и минусах каждого подхода 一\nАгрегаты микросервиса:\nЗа: Динамично, так как это самое маленькое представление, которое мы можем отобразить в нашей системе и продукте. Мы всегда можем \"перемещать\" его из сквада в сквад по мере \"созревания\" нашего продукта и доработок при моделировании.\nПротив: Мы рискуем создать “большой ком грязи” [система, в которой отсутствует понятная архитектура]. Предположим, мы неправильно выполним моделирование и установим связи между сервисами некорректно. Все зависимости останутся прежними, но теперь у нас будет еще и распределенная система, что только добавит сложности.\nОграниченный контекст в микросервисе:\nЗа: Меньше сложности, меньше межсервисного взаимодействия, меньше болтовни. Поскольку агрегаты одного и того же ограниченного контекста общаются больше, поэтому они будут делать то же самое в таком же микросервисе.\nПротив: Мы рискуем создать код и, возможно, модели, сильно зависящие друг от друга. Кроме того, если потребуется разбить ограниченный контекст на два сквада или два ограниченных контекста, то для обеспечения командного права владения каждым техническим компонентом потребуется серьезный рефакторинг.\nРешение 一\nМы приняли решение об \nоптимизации для роста\n, чтобы быть динамичными, поэтому решили моделировать наши услуги с гранулярностью \nагрегата микросервиса\n. Мы предлагаем смягчение риска сложности и “большого комка грязи” путем 一\nДобавления архитектурных руководств\nАрхитекторы участвуют в каждом DR из своей области для консультаций.\nМы создаем высокоуровневое архитектурное видение, которое инкапсулирует агрегаты, ограниченные контексты (сервисы представления, сквозные и оркестратор) и паттерны коммуникации, помогающие избежать подобного.\nОграниченный контекст в микросервисах\n будет использоваться в основном для юзкейсов продуктовых областей, которые не соответствуют требованиям рынка, это означает, что агрегаты неизвестны и уровень неопределенности высок.\nWhen -> Then (Когда -> Тогда) для создания нового агрегата микросервиса:\nКогда в нашей системе имеется бизнес-юнит, имеющий четко определенное и специфическое состояние и идентичность, который требует согласованности транзакций внутри него -> Мы создадим специфический агрегат сервиса.\nКогда мы добавляем новый бизнес-юнит как часть \nMVP\n -> Мы выберем создание конкретного агрегата сервиса. Это позволит легко удалить его в будущем.\nКогда у нового бизнес-юнита в нашей системе есть \nкоманды (CRUD)\n \nопераций\n -> Рассмотрим его как агрегат с новым агрегатом сервиса.\nКогда новому бизнес-юниту нужно будет \nиспользовать даже существующий домен\n -> Считайте это новым агрегатом (поскольку он разделен продюсером).\nКогда -> Тогда чтобы оставаться в том же агрегате сервиса:\nКогда один агрегат должен обновить другой агрегат и требует согласованности транзакций -> Внимание спойлер, у нас есть архитектурная тема под названием \n\"потоки управления\"\n. Это тема №6, и мы до нее доберемся.\nКогда нам нужна возможность \nполного отката\n -> Мы выберем создание конкретного агрегата сервиса.\nКогда -> Тогда, чтобы изменить агрегат микросервиса на сложный агрегат сервиса:\nКогда нам \nнужно\n изменить состояние агрегатов в зависимости от изменения другого, т.е. при использовании события домена -> Мы выберем переход от обычного агрегата микросервиса к сложному.\nКогда нам \nнужно\n сохранять данные для оптимизации производительности → Мы рассмотрим переход от агрегата микросервиса к сложному.\nКогда у нас \nнет\n достаточных знаний/уверенности в своих силах, нам необходимо постоянство -> Мы дважды подумаем, прежде чем сделать наш агрегат сложным.\nКогда -> Тогда разбить монолит/агрегат на несколько:\nКогда у нас есть агрегат, который в настоящее время \nразмещен в монолите\n -> Мы выберем создание отдельного агрегата сервиса.\nКогда нам \nне требуется транзакционная согласованность\n -> Рассмотрим возможность создания другого агрегата микросервиса, так как он, скорее всего, будет несвязанным.\nКогда добавляются \nновые префиксы для эндпоинтов\n в сервисе -> Рассмотрим возможность создания нового агрегата микросервиса.\nКогда \nполе не связано\n с агрегатом, но необходимо для некоторой оптимизации -> Рассмотрите возможность создания нового агрегата с минимальными данными из исходного агрегата.\nКогда -> Тогда создать микросервис ограниченного контекста:\nКогда есть \nслишком много неизвестных\n относительно конечной структуры агрегата или агрегатов (т.е. ограниченный контекст) -> Мы выберем создание микросервиса расширенного размера, чтобы обучаться по ходу дела. В будущем мы можем разбить его на несколько агрегатов микросервисов.\nПодведем итоги\nАгрегат микросервиса — один из самых распространенных паттернов в нашей системе. Мы выбрали его в качестве нашего уровня гранулярности, чтобы обеспечить рост в областях, достигших соответствия продукта рынку.\nОграниченный контекст в микросервисе используется нечасто, потому что он представляет новые области продуктов. Этот паттерн появился в качестве ответа на потребность, когда в компании мы еще не достигли соответствия продукта требованиям рынка.\nОсновной риск, который возникает при выборе низкой гранулярности, — это превращение в \"большой ком грязи\". Мы снижаем этот риск, давая четкие указания и рекомендации. (Я знаю, что есть и другие риски, такие как сложность, накладные расходы на развертывание и тому подобное, но мы не чувствуем этих проблем, и у нас есть отличные инструменты, которые помогают нам справиться с данной ситуацией).\nУ нас есть еще несколько архитектурных тем 一\nПредставления микросервиса — материализованные представления и все такое\nСквозные сервисы — интеграции, инфраструктура и инструменты в нашей системе.\nКоммуникационные каналы — как сервисы взаимодействуют.\nПотоки управления — оркестрация, хореография и другие интересные вещи.\nПриглашаем всех желающих на \nоткрытое занятие\n «Прошлое, настоящее и будущее роли Enterprise-Architect». \nНа открытом уроке будет возможность обсудить роль архитектора предприятия: кем были, кем стали и кем предоложительно могут стать в обозримом будущем. Поговорим о необходимых компетенциях агента изменений и базовых знаниях для успешной работы. Увидим, где начинается архитектурный подход и куда нужно стремиться в профессиональном развитии.\nУрок пройдет в рамках онлайн-курса \"Enterprise Architect\". Записаться на урок можно \nпо ссылке.\n \n ",
    "tags": [
        "DDD",
        "микросервисы",
        "Enterprise-Architect",
        "domain driven design"
    ]
}