{
    "article_id": "729216",
    "article_name": "Маски ввода номера телефона на Flutter",
    "content": "Всем привет. Нужно поговорить немного про такую стандартную и обыденную часть любого приложения, как ввод номера телефона пользователя. Речь только о российских телефонах. Казалось бы, что может быть проще? Ставим в начало строки + или даже +7 и пользователь указывает телефон начиная с 9. Для удобства можно накинуть и маску и казалось бы все хорошо. Но нет иногда пользователи \nдлоб\n.... смотрят не туда и пишут с 8 или с 7 и все. Без авторизации пользователь не может использовать сервис и дать нам денег на \nдошик\n  на смузи. Посмотрим несколько примеров из других сервисов:\nКак это работает в wildberries\nЛогика проста: ставим + а дальше пользователь сам поймет что вводить.\nКак это работает в Тинькофф\nЗадача\nМы делаем пакет для пользователей из России и пары случайных иностранцев. Наши требования:\nПоле по умолчанию пустое. Пользователь сам решает что и как вводить\nпри вводе 7,8,9 должна работать маска российских номеров (Х (ХХХ) ХХХ-ХХ-ХХ),\nв маску можно будет ввести и иностранный номер. Например +1 \nВремя стучать по Клавиатуре\nДля работы будем использовать наследника TextInputFormatter. Его можно добавить в любое текстовое поле в inputFormatters.А потом вытащить всю нужную нам информацию.\nclass RuPhoneInputFormatter extends TextInputFormatter{\n  @override\n  TextEditingValue formatEditUpdate(TextEditingValue oldValue, TextEditingValue newValue) {\n    \n  }\n}\nДля работы нам нужны \nпеременная для форматированного значения\nфлаг российски ли это номер\nметод форматирующий номер\nгеттер чистого номера (номер без форматирования. Для российских начинается с 9, для иностранных c первой цифры в текстовом поле) \nДобавляем нужные переменные и дефолтные значения (вдруг мы номер уже знаем) \nclass RuPhoneInputFormatter extends TextInputFormatter{\n  //форматированный телефон\n  String _formattedPhone = \"\";\n  //Российский ли номер\n  bool _isRu=false;\n\n  //Добавляем возможность указать номер по дефолту\n  RuPhoneInputFormatter({\n    String? initialText,\n  }) {\n    if (initialText != null) {\n      formatEditUpdate(\n          TextEditingValue.empty, TextEditingValue(text: initialText));\n    }\n  }\n\n    ///Иетод возвращает форматированнный телефон\n  String getMaskedPhone() {\n    return _formattedPhone;\n  }\n  ///возвращает чистый телефон. для России начинается с 9\n  String getClearPhone() {\n    if(_formattedPhone.isEmpty){\n      return '';\n    }\n    if(!_isRu){\n      return _formattedPhone.replaceAll(RegExp(r'\\D'), '');\n    }\n    return _formattedPhone.replaceAll(RegExp(r'\\D'), '').substring(\n        1,\n        (_formattedPhone.replaceAll(RegExp(r'\\D'), '').length >= 11)\n            ? 11\n            : _formattedPhone.replaceAll(RegExp(r'\\D'), '').length);\n  }\n  ///Проверяет заполнил ли пользователь телефон. Актуально только для Российских телефонов\n  bool isDone(){\n    if(!_isRu){\n      return true;\n    }\n    return (_formattedPhone.replaceAll(RegExp(r'\\D'), '').length>10);\n  }\n  ///возвращает флаг Российски ли номер\n  get isRussian=>_isRu;\n}\nПишем метод для форматирования\nметод должен проверять первые цифры и форматировать только если это 7,8,9\nString _formattingPhone(String text){\n  //регулярка протиа букв. в телефоне только цифры\n    text=text.replaceAll(RegExp(r'\\D'), '');\n    if(text.isNotEmpty){\n      String phone='';\n      //проверяем российски ли номер\n      if(['7','8','9'].contains(text[0])){\n        _isRu=true;\n        //если пользователь начал с 9, то добавим 7\n        if(text[0]=='9'){\n          text='7$text';\n        }\n        //Проверяем нужен ли +\n        String firstSymbols=(text[0]=='8') ? '8':'+7';\n        //само форматирование\n        phone='$firstSymbols ';\n        if(text.length>1){\n          phone+='(${text.substring(1,(text.length<4)?text.length:4)}';\n        }if(text.length>=5){\n          phone+=') ${text.substring(4,(text.length<7)?text.length:7)}';\n        }\n        if(text.length>=8){\n          phone+='-${text.substring(7,(text.length<9)?text.length:9)}';\n        }\n        if(text.length>=10){\n          phone+='-${text.substring(9,(text.length<11)?text.length:11)}';\n        }\n        return phone;\n      }else{\n        _isRu=false;\n        return '+$text';\n      }\n    }\n    return '';\n  }\nСобираем все в кучу \nДобавим код для удобства редактирования телефона\n@override\n  TextEditingValue formatEditUpdate(TextEditingValue oldValue, TextEditingValue newValue) {\n    String text=newValue.text.replaceAll(RegExp(r'\\D'), '');\n    int selectionStart=oldValue.selection.end;\n\n    //проверяем стерает ли пользователь все символы?\n    if(oldValue.text=='${newValue.text} '){\n      _formattedPhone='';\n      return TextEditingValue(\n          text: _formattedPhone,\n          selection: TextSelection(\n              baseOffset: _formattedPhone.length,\n              extentOffset: _formattedPhone.length,\n              affinity: newValue.selection.affinity,\n              isDirectional: newValue.selection.isDirectional\n          )\n      );\n    }\n\n    //проверяем редактирует ли пользователь телефон где то по середине?\n    if(selectionStart!=_formattedPhone.length){\n      _formattedPhone= _formattingPhone(text);\n      //если да, то не перекидываем курсов в самый конец\n\n      return TextEditingValue(\n          text: _formattedPhone,\n          selection: TextSelection(\n              baseOffset: newValue.selection.baseOffset,\n              extentOffset: newValue.selection.extentOffset,\n              affinity: newValue.selection.affinity,\n              isDirectional: newValue.selection.isDirectional\n          )\n      );\n    }\n\n    _formattedPhone= _formattingPhone(text);\n\n    //если пользователь просто вводит телефон, \n    //то переносим курсор в конец форматированной строки\n    return TextEditingValue(\n        text: _formattedPhone,\n        selection: TextSelection(\n            baseOffset: _formattedPhone.length,\n            extentOffset: _formattedPhone.length,\n            affinity: newValue.selection.affinity,\n            isDirectional: newValue.selection.isDirectional\n        )\n    );\n  }\nИтоги\nпример работы виджета. пользователь полностью свободен при вводе телефона. Так же сохранилась поддержка и иностранных телефонов.\nА что дальше?\nв планах добавить маски всех телефонов стран СНГ. \nПакет\nДля удобства все исходники \nтут\nА еще есть пакет на pub.dev \nтут\nПоддержать автора \nтут\nВдохновение черпал в видосике на \nЮтубе\n \n ",
    "tags": [
        "flutter",
        "маска",
        "маска ввода"
    ]
}