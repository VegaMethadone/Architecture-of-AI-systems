{
    "article_id": "726224",
    "article_name": "6 новых возможностей CSS, которые должен знать каждый front-end разработчик в 2023 году",
    "content": "Эта статья — перевод оригинальной статьи «\n6 CSS snippets every front‑end developer should know in 2023\n»\nТакже я веду телеграм канал «\nFrontend по‑флотски\n», где рассказываю про интересные вещи из мира разработки интерфейсов.\nВступление\nМощные и стабильные CSS фичи, которые вы можете использовать уже сегодня.\nЯ считаю, что каждый front-end разработчик должен знать, как использовать \ncontainer query\n, создавать \nпривязку к прокрутке\n, избегать \nposition: absolute\n с помощью grid, быстро создавать круг, использовать \nкаскадные слои\n и достигать большего с помощью \nлогических свойств\n. Эта статья — описание каждой из 6 новых возможностей CSS.\n1. Container query\nСамая востребованная функция CSS на протяжении 10 лет подряд \nтеперь стабильна\n в браузерах и доступна для использования в запросах ширины в 2023 году.\n.panel {\n  container: layers-panel / inline-size;\n}\n\n.card {\n  padding: 1rem;\n}\n\n@container layers-panel (min-width: 20rem) {\n  .card {\n    padding: 2rem;\n  }\n}\nCodePen\nУзнайте больше о возможностях этой функции CSS в этой \nогромной и вдохновляющей коллекции Codepen\n, включающей около 25 демонстрационных примеров.\n2. Фиксация прокрутки\nХорошо организованная возможность прокрутки выделяет ваш сайт среди других, а фиксация скролла - это идеальный способ обеспечивать важные точки остановки.\n.snaps {\n  overflow-x: scroll;\n  scroll-snap-type: x mandatory;\n  overscroll-behavior-x: contain;\n}\n\n.snap-target {\n  scroll-snap-align: center;\n}\n\n.snap-force-stop {\n  scroll-snap-stop: always;\n}\nCodePen\n3. Избегаем position: absolute с помощью grid\nИзбегайте абсолютного позиционирования при использовании CSS grid с одной ячейкой. Когда они будут наложены друг на друга, используйте свойства justify и align для их позиционирования.\n.pile {\n  display: grid;\n  place-content: center;\n}\n\n.pile > * {\n  grid-area: 1/1;\n}\nCodePen\n4. Быстро делаем круг\nСуществует множество способов создания кругов в CSS, но этот, безусловно, самый минимальный.\n.circle {\n  inline-size: 25ch;\n  aspect-ratio: 1;\n  border-radius: 50%;\n}\nCodePen\n5. Каскадные слои\nКаскадные слои\n могут \nпомочь вставить участки кода\n, обнаруженные или созданные позже, в нужное место в каскаде с исходным набором вариантов.\n/* file buttons.css */\n@layer components.buttons {\n  .btn.primary {\n    …\n  }\n}\nЗатем, в каком-то совершенно другом файле, загруженном в другое случайное время, добавьте новый код к слою кнопок, как будто он был там с остальными все это время.\n/* file video-player.css */\n@layer components.buttons {\n  .btn.player-icon {\n    …\n  }\n}\nCodePen\n6. Запоминайте меньше и достигайте большего с помощью логических свойств\nЗапомните эту \nновую блочную модель\n, и вам больше \nникогда не придется беспокоиться\n об изменении левых и правых отступов или полей для различных \nрежимов \nи \nнаправлений \nдокумента. Настройте стили от физических свойств к логическим, таким как \npadding-inline\n, \nmargin-inline\n, \ninset-inline\n, и теперь всю работу по настройке будет выполнять браузер.\nbutton {\n  padding-inline: 2ch;\n  padding-block: 1ch;\n}\n\narticle > p {\n  text-align: start;\n  margin-block: 2ch;\n}\n\n.something::before {\n  inset-inline: auto 0;\n}\nCodePen\n \n ",
    "tags": [
        "css",
        "css3",
        "frontend"
    ]
}