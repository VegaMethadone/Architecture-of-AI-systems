{
    "article_id": "726788",
    "article_name": "Jetpack Compose Layouts часть 2",
    "content": "Введение\nВ этой статье будет пример контейнера с добавлением новых элементов во время композиции. В частности разделителей.\nЭта статья поделена на 2 части. Перед чтением этой статьи советую прочитать \nпервую\n часть.\nДобавление разделителей\nУ нас нет способа добавить разделители во время расстановки содержимого контейнера, поэтому мы должны добавить их заранее. После, зная их количество, на моменте расстановки элементов мы отделим их от остальных.\nСчитать количество элементов мы будем весьма костыльно, но тем не менее удобно:\n@Composable\nfun rememberElementsCount(content: @Composable () -> Unit) : State<Int?> {\n    val result : MutableState<Int?> = remember { mutableStateOf(null) }\n    Layout(\n        modifier = Modifier.size(0.dp),\n        content = content,\n    ) { measurables, _ ->\n        result.value = measurables.size\n        layout(0, 0) {}\n    }\n    return result\n}\nТак как Compose не гарантирует порядка композиции, мы не можем быть уверены, что result будет установлен до выхода из функции, из‑за чего нам приходится использовать опциональные значения.\nТеперь мы можем отделять изначальное содержимое от разделителей, добавленных нами:\n@Composable\nprivate fun DividerLayout(\n    modifier: Modifier = Modifier,\n    dividerCount: Int,\n    divider: @Composable () -> Unit = { androidx.compose.material.Divider() },\n    content: @Composable () -> Unit,\n    ...\n) {\n    Layout(\n        modifier = modifier,\n        content = {\n            content()\n            repeat(dividerCount) {\n                divider()\n            }\n        },\n    ) { measurables, constraints ->\n        val contentPlaceables = measurables.dropLast(dividerCount).map { it.measure(constraints) }\n        val dividerPlaceables = measurables.takeLast(dividerCount).map { it.measure(constraints) }\n        measure(constraints, contentPlaceables, dividerPlaceables, ...) // Какая-то функция расстановки элементов контейнера\n    }\n}\nИмея их раздельно, не составит труда написать функцию measure. Результат будет выглядеть так:\nУвы, из‑за необходимости в рекомпозиции для работы, этот контейнер не будет работать в предпросмотре. Если вы знаете, как сделать это без костыля с пустым Layout, добро пожаловать в комментарии. \nВместо послесловия\nИзначально статья была названа продвинутой, так как в неё должны были рассматриваться все стандартные параметры других контейнеров, такие как Alignment, Arrangement и т. п. Но оказалось, что это весьма просто, и писать там не о чем. Поэтому она была переименована в вторую часть.\nЕсли есть что‑то, что не упомянутое в статье и не являющиеся понятным в реализации, пишите в комментарии, и я напишу 3 часть статьи. \n \n ",
    "tags": [
        "jetpack compose",
        "layout"
    ]
}