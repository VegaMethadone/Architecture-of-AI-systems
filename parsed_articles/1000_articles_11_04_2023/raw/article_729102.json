{
    "article_id": "729102",
    "article_name": "Как подключить локализацию L10n c Riverpod без ошибок с HTTP Requests",
    "content": "Статья для начинающих в Riverpod\nДо этого пользовался Provider совместно с BLoC и недавно решился попробовать Riverpod в одном из проектов. В ходе работы столкнулся с проблемой, которую многие могут не замечать.\nПри использовании Logger для Http запросов он отправлял несколько запросов, даже если был отправлен лишь 1. Для устранения проблемы нужно будет создать собственный провайдер для Dio и работать уже с ним.\nПервым делом: создаем localeProvider\nfinal localeProvider = StateNotifierProvider<LocaleNotifier, Locale>((ref) {\n  return LocaleNotifier();\n});\n\nclass LocaleNotifier extends StateNotifier<Locale> {\n  LocaleNotifier() : super(sharedPreference.locale) {\n    onAppStart();\n  }\n\n  void changeLanguage(Locale locale) {\n    try {\n      if (!L10n.all.contains(locale)) return;\n      state = locale;\n    } catch (error) {\n      state = sharedPreference.locale;\n    }\n  }\n\n  void onAppStart() {\n    try {\n      final locale = sharedPreference.locale;\n      state = locale;\n    } catch (error) {\n      state = const Locale('ru');\n    }\n  }\n}\n2.  Соединяем его с MaterialApp\nОбертываем наш MyApp в \nProviderScope() \nи через метод \nwatch\n \"слушаем\" изменение языка. И добавляем ProviderContainer в нашем main.dart файле.\nfinal ProviderContainer container = ProviderContainer();\n  runApp(\n    ProviderScope(\n      child: WorkspaceApp(),\n    ),\n  );\n\n  Widget build(BuildContext context, WidgetRef ref) {\n    final locale = ref.watch(localeProvider);\n    return MaterialApp.router(\n      title: \"Workspace\",\n      locale: locale,\n      routerConfig: _router,\n      supportedLocales: L10n.all,\n      theme: LightTheme,\n      darkTheme: null,\n      debugShowCheckedModeBanner: false,\n      themeMode: ThemeMode.light,\n      localizationsDelegates: const [\n        AppLocalizations.delegate,\n        GlobalMaterialLocalizations.delegate,\n        GlobalCupertinoLocalizations.delegate,\n        GlobalWidgetsLocalizations.delegate,\n      ],\n      builder: EasyLoading.init(),\n    );\n  }\n3. HttpQuery для get запроса\nСоздаем http_query.dart файл и вставляем код ниже:\nimport 'package:dio/dio.dart';\nimport 'package:flutter/material.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\nimport 'package:logger/logger.dart';\nimport 'package:pretty_dio_logger/pretty_dio_logger.dart';\n\nclass HttpQuery {\n\n  final dioProvider = Provider((ref) {\n    PrettyDioLogger logger = PrettyDioLogger(\n      requestHeader: true,\n      requestBody: true,\n      responseBody: false,\n      responseHeader: true,\n      error: true,\n      compact: true,\n      maxWidth: 100,\n    );\n    Dio dio = Dio(BaseOptions(baseUrl: '${sharedPreference.chosenServer}/api/'));\n    dio.interceptors.add(ErrorInterceptor());\n    dio.interceptors.add(logger);\n    return dio;\n  });\n  \n  /* ---------------------------------- HttpQuery ---------------------------------- */\n\n  Future<dynamic> get(\n      {required String url, Map<String, dynamic>? queryParameters, Map<String, dynamic>? headerData}) async {\n    try {\n      container.read(dioProvider).interceptors.add(ErrorInterceptor());\n      container.read(dioProvider).interceptors.add(logger);\n      Map<String, dynamic> header = {\n        \"Content-Type\": \"application/json\",\n      };\n\n      Map<String, dynamic> queryParameters1 = queryParameters ?? {};\n      String? token = await UserSecureStorage.getToken();\n      if (token != \"\") header.addAll({\"Authorization\": 'Bearer $token'});\n      if (headerData != null) header.addAll(headerData);\n      final Response result = await container.read(dioProvider).get(\n            url,\n            options: Options(\n              sendTimeout: 30000,\n              receiveTimeout: 60000,\n              headers: header,\n            ),\n            queryParameters: queryParameters1,\n          );\n      return result.data;\n    } on DioError catch (error) {\n      if (error.type == DioErrorType.connectTimeout) {\n        debugPrint(error.type.name);\n      }\n      if (error.type == DioErrorType.receiveTimeout) {\n        debugPrint(error.type.name);\n      }\n      return error;\n    }\n  }\n}\n\nНаш dioProvider мы можем использовать за место getIt. В нем описываем базовые параметры для Dio, в моем случае я вставил туда базовое начало моих url запросов.\nИ создаем providerContainer для доступа к провайдера без WidgetRef. Далее для получения результата Response мы отправляем запрос через наш dioProvider получая доступ к нему через наш providerContainer.\n4. Изменение языка\nИспользуем вместо StatelessWidget - ConsumerWidget\nclass LanguagePickerWidget extends ConsumerWidget {\n  const LanguagePickerWidget({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    final locale = ref.read(localeProvider);\n\n    return DropdownButtonHideUnderline(\n      child: DropdownButton(\n        value: locale,\n        icon: Container(width: 12),\n        items: L10n.all.map(\n          (locale) {\n            final flag = L10n.getFlag(locale.languageCode);\n\n            return DropdownMenuItem(\n              value: locale,\n              onTap: () {\n                ref.read(localeProvider.notifier).changeLanguage(locale);\n              },\n              child: Center(\n                child: Text(\n                  flag,\n                  style: const TextStyle(fontSize: 32),\n                ),\n              ),\n            );\n          },\n        ).toList(),\n        onChanged: (_) {},\n      ),\n    );\n  }\n}\nПолучаем доступ к нашему localeProvider и через метод notifier, который получает уведомления о изменении состоянии мы меняем наш язык. \n \n ",
    "tags": [
        "Riverpod",
        "Flutter",
        "Localization"
    ]
}