{
    "article_id": "727524",
    "article_name": "Когда поможет только нагрузочное тестирование",
    "content": "В мире ИТ непрерывно происходят эволюционные изменения, которые ставят во главу угла такие аспекты, как безопасность и надёжность решений.\n\r\n\n\r\n\n\r\n\n\r\nК подобным изменениям, в частности, приводит развитие сервисов, которые должны работать с большим числом пользователей: онлайн-банкинг, маркетплейсы, сервисы покупки билетов и бронирования, бесконтактная оплата через POS-терминалы (вспомните, когда вы последний раз платили на кассе наличными?), оплата метро по Face ID, запрос и получение информации на Госуслугах и т.д.\n\r\n\n\r\nКачественно создавать и развивать подобные сервисы сложно, к тому же, помимо понятных забот об удобстве, а также безопасности и сохранности личных данных, вас поджидают неочевидные риски, связанные именно с ростом числа пользователей. Именно здесь на помощь приходит нагрузочное тестирование. О нём ниже и поговорим, а также разберём конкретные жизненные примеры.\n\r\n\n\r\n\nРазберём конкретный кейс: прекрасный клиентоориентированный сервис\n\r\n\nПостановка задачи:\n\r\nОнлайн-сервис должен работать 24/7. \n\r\n\n\r\n\nСразу возникает вопрос, сможет ли он действительно работать в таком режиме? А если пользователей станет в 2—3 раза больше? А если объём передаваемой информации увеличится в 5–10 раз?\n\r\n\n\r\nВаши ожидания от сервиса такие: человек через браузер или из мобильного клиента или программа ваших партнёров по API приходят на сервис и должны получить запрошенную информацию достаточно быстро (устанавливается SLA — service level agreement — на время отклика) и без большого количества ошибок сервера и приложения (устанавливается SLA на допустимый процент ошибок).\n\r\n\n\r\nВ рамках современного функционального тестирования, состоящего из этапов юнит-тестирования, ФТ, ИТ, СТ, развёрнутого у вас или выполняемого силами привлечённых специалистов (outstaff), вы убедитесь в том, что код соответствует ТЗ и обладает нужным функционалом, но «нефункциональное» требование к производительности проверить не получится. \n\r\n\n\r\n\nРешение:\n\r\n\nЭту позицию закрывает нагрузочное тестирование.\n\r\n\n\r\nСпециалистам по нагрузочному тестированию (НТ) для его проведения понадобится специализированный стенд и доступы к инфраструктуре для анализа работы системы и подготовки к проведению НТ. \n\r\n\n\r\n\nСпособ решения:\n\r\nКоманда НТ приходит на проект и начинает свою работу:\n\r\n\n\r\n\n\r\n\nВыясняет архитектуру системы.\n\r\n\nСобирает статистику по операциям и создаёт профиль нагрузочного тестирования.\n\r\n\nОбсуждает с вами методику нагрузочного тестирования.\n\r\n\nГотовит пулы данных.\n\r\n\nПишет скрипты.\n\r\n\nНастраивает мониторинг. \n\r\n\nПроводит тесты, регистрирует дефекты.\n\r\n\nПроводит ретесты по исправлениям дефектов.\n\r\n\nГотовит отчёт.\n\r\n\n… ??\n\r\n\n(Ваш) PROFIT.\n\r\n\n\r\nПо итогам этих работ вы получаете ответ на вопрос, сможет ли эта система на конкретном железе выдерживать поток запросов N-го количества пользователей, выполняющих определённое количество заданных операций? \n\r\n\n\r\n\n«Под капотом»:\n\r\nНа этапе подготовки профиля обсуждается набор операций, которые будут выполняться в системе и эмулировать нагрузку.\n\r\n\n\r\nНапример, для сервиса «онлайн продажа билетов на концерт» это может быть:\n\r\n\n\r\n\n\r\n\n30 000 операций в час — посмотреть расписание.\n\r\n\n20 000 операций в час — посмотреть наличие билетов.\n\r\n\n10 000 операций в час — оформить покупку, но не оплатить её, а закрыть браузер.\n\r\n\n2000 операций в час — оформить покупку и оплатить её.\n\r\n\n\r\nОткуда НТ возьмёт эти цифры?\n\r\n\n\r\nДва пути:\n\r\n\n\r\n\n\r\n\nИзучение статистики (включая исторические данные, с учётом сезонности и связанных с ней пиков или их отсутствием).\n\r\n\nБизнес знает/прогнозирует определённое количество этих операций.\n\r\n\n\r\nПрежде чем будет получен положительный ответ на вопрос, держит ли система нагрузку, НТ может найти дефекты производительности, которые надо будет исправлять. \n\r\n\n\r\n\nНагрузочное тестирование проводится на системе, которая уже вполне устраивает вас с точки зрения функциональности («у вас уже всё работает»), значит, времени на «всё тестирование» надо закладывать достаточно. \n\r\n\n\r\n\nЧто может пойти не так? Для чего все эти недешёвые мучения?\n\r\nКраткий список возможных неприятностей:\n\r\n\n\r\n\n\r\n\nВ системах с БД под нагрузкой могут пойти блокировки или увеличится время отклика по причине неоптимальных запросов, неудачной структуры хранения данных и т.п. \n\r\n\nНа веб-сферах могут быть неоптимальные настройки.\n\r\n\nМикросервисам Кубернет может не хватать ресурсов.\n\r\n\nПриложение может использовать всю оперативную память и рухнуть с неприятной Out Of Memory Error.\n\r\n\n\r\nЧто при этом видит пользователь:\n\r\n\n\r\n\n\r\n\nОтказ в обслуживании («легла» БД, исчерпались потоки на веб-сфере, ушёл в множественные перезагрузки pod в Кубернетах).\n\r\n\nОтвет от сервиса приходит не за 1 секунду, а за 10 (сухим языком звучит нестрашно «превышение SLA на время отклика»).\n\r\n\nСервер чаще чем надо отдаёт ошибку 5хх, или приложение при своей работе даёт много ошибок («превышение SLA на процент ошибок»).\n\r\n\n\r\nПричём до какого-то уровня нагрузки система живёт и успешно работает БЕЗ таких дефектов. Проблемы начинаются, предположим, с уровня нагрузки 300% профиля, а мы знаем, что иногда (3 раза в год) у вас, например, очень крутые концерты, и объём продаж возрастает в 5 раз (500% от среднего).\n\r\n\n\r\nПроведённое НТ позволит вам заблаговременно масштабировать свой сервис, и вместо некрасивой 5хх с ещё менее красивым Java stack trace на первой странице вашего сайта компания будет продолжать работать и зарабатывать. \n\r\n\n\r\nЭффективность легко подсчитать:\n\r\n\n\r\n\n\r\n\n\r\n\n\r\n\n\r\nКомпании, для которых недопустим простой (он очень дорого стоит) и которые не могут позволить себе, чтобы их имидж сильно пострадал, раз и навсегда включают НТ в процесс тестирования.\n\r\n\n\r\nЕсли бизнес успешен на рынке, то недоступность сервиса в «горячий» сезон фактически приведёт к «выходу из игры». \n\r\n\n\r\n\nЧто дальше?\n\r\nНаш условный сайт по продаже билетов успешно работает в продуктиве. Если бизнес развивается, то продолжаются и такие процессы:\n\r\n\n\r\nа) маркетологи/бизнес придумывают новые интересные кампании для привлечения клиентов;\n\r\nб) маркетологи/бизнес хотят расширить функционал (добавить ещё несколько кнопок/упростить переход к оплате/добавить ещё несколько шагов до перехода к оплате/разветвить процесс покупки и т.д.);\n\r\nв) появляются новые требования госорганов (надо реализовать какую-либо проверку, то есть добавился запрос во внешнюю систему);\n\r\nг) приходят функциональные дефекты от пользователей.\n\r\n\n\r\nПо итогам а), б), в) и г) разработчики дорабатывают функционал, тестирование проходит все стадии, включая системное.\n\r\nРазумеется, надо убедиться, что новая версия «держит» текущую нагрузку (или выдержит планируемое увеличение нагрузки).\n\r\n\n\r\nИными словами, НТ по аналогии с другими видами тестирования — это непрерывный процесс, необходимый для нагруженных систем.\n\r\n\n\r\n\nКейсы из реальной жизни \n\r\n\nЗадача А\n\r\nРешение регулярно проходит НТ и успешно работает в продуктиве, но внезапно принимается обоснованное решение миграции на другую архитектуру: более современное железо с более новой версией ОС, которые будут поддерживаться ещё лет 10, в отличие от текущего.\n\r\nБизнес устроен таким образом, что остановить операции невозможно. \n\r\n\n\r\n\nРешение:\n\r\nОбсуждаем пошаговый сценарий миграции. \n\r\nС помощью инструментов нагрузочного тестирования подаём на систему расчётную нагрузку.\n\r\nНаблюдаем за поведением системы на тестовом стенде в процессе миграции.\n\r\n\n\r\n\nРезультат:\n\r\nПо инструкции, отработанной в НТ, система успешно переехала с ОС на ОС и с железки на железку, в то время как пользователи непрерывно продолжали ей пользоваться. \n\r\n\n\r\n\nВ ходе эксплуатации из продуктива приходят функциональные дефекты и могут приходить дефекты производительности.\n\r\n\n\r\nПо результатам таких инцидентов мы при необходимости актуализируем методику нагрузочного тестирования.\n\r\n\n\r\n\nЗадача Б\n\r\nВнешняя система реализовала у себя новые требования, обновилась и стала давать ответы размера 1Мб, вместо 10Кб, система даёт свой ответ клиентам за 10 секунд, а не за 1. \n\r\n\n\r\n\nРешение:\n\r\nУвеличиваем размер ответов на тестовом стенде, воспроизводим «новое поведение», проводим полноценное нагрузочное тестирование, понимаем, на каком уровне нагрузки система удовлетворяет требованиям ко времени отклика, добавляем ресурсов, проверяем, что более мощная система выдерживает нужный уровень нагрузки.\n\r\n\n\r\n\nРезультат:\n\r\nСистема работает в соответствии с поставленными требованиями в новых условиях.\n\r\n\n\r\n\nЗадача В\n\r\nОтдел маркетинга разработал новую акцию: «Купи три пылесоса по цене четырёх и получи один бесплатно». Кто же откажется. Дорогая реклама идёт по всем возможным каналам с охватом всей целевой аудитории. Люди массово приходят за покупками на сайт.\n\r\nЭто хорошо, но откуда мы знаем, что система справится с нагрузкой, а не рухнет?\n\r\nВедь тогда средства, выделенные на рекламу, придётся записать в расход, о прибыли компании можно будет забыть, а имидж будет испорчен раз и навсегда: те же каналы, что давали рекламу, с удовольствием (и на этот раз бесплатно!) расскажут о том, что сайт упал.\n\r\n\n\r\n\nРешение:\n\r\nБерём информацию от маркетинга по увеличению нагрузки по определённым операциям и проводим стресс-тест.\n\r\n\n\r\n\nРезультат:\n\r\nВаши оправданные ожидания.\n\r\n\n\r\n\n«Нарочно не придумаешь» (случаи из жизни)\n\r\n\nЗадача Г\n\r\n\nПостановка:\n\r\nСотруднику поручают выполнить занудную операцию: надо несколько тысяч раз без ошибок в ручном вводе данных пройти длинный кейс из 5–6 экранов.\n\r\nПечально оценивая объём работы (пару дней с утра до вечера), смекалистый сотрудник вспоминает, что «чем-то похожий функционал» он видел в другом модуле системы, причём если делать там, то выполнить всю эту работу можно за полчаса с перекурами. Находчиво? Не то слово! Воображение рисует моментальный апгрейд из операциониста в программиста, а то и архитектора решения. Однако что-то пошло не так. Кто уже угадал, что случилось? А получилось вот что: при попытке выполнения операции не из того модуля, откуда её положено делать по инструкции, а при использовании совсем другого, генерируется неоптимальный запрос в БД, которого разработка делать не планировала (смотрите ТЗ), что приводит к блокировкам. В продуктиве DBA разобрались и срубили этот запрос на БД. Система вернулась в нормальный рабочий режим через несколько часов простоя. \n\r\n\n\r\n\nРешение:\n\r\nОперационисты должны уметь работать с системой.\n\r\n\n\r\n\nЗадача Д\n\r\n\nПостановка:\n\r\nБез проверки со стороны НТ внедряется процедура архивации на БД. Функционально она работает. Зачем именно в продуктиве проверять её под нагрузкой, если собран стенд нагрузочного тестирования? Для нас это осталось загадкой. В продуктиве произошла блокировка на БД, и система не работала, по-моему, сутки.\n\r\n\n\r\n\nРешение:\n\r\nТак как компания имела команду нагрузочного тестирования, вопрос был решён так: воспроизвели дефект на стенде НТ и разработали рекомендации, чтобы больше такого не повторилось. Это тоже часть работ по нагрузочному тестированию. И лучше такие вещи проверить на стенде НТ, чем стрессировать поддержку на продуктиве (коллеги, мы знаем, что вам обычно хватает забот).\n\r\n\n\r\n\nВместо вывода\n\r\nПо результатам разработки и тестирования (все этапы функционального и НТ) получается продукт с известными характеристиками и инструкциями использования.\n\r\n\n\r\nУберите любую составную часть этого комплекса, и «органолептические» свойства продукта изменятся непредсказуемо.\n\r\n\n\r\nНагрузочное тестирование — по сути, моделирование нагрузки. Для того чтобы наша модель лучше соответствовала действительности, надо:\n\r\n\n\r\n\n\r\n\nТакую же БД (личные данные в ней только обезличьте (сами или закажите эти работы у специалистов).\n\r\n\nТакие же машинные ресурсы, как на продуктиве.\n\r\n\n\r\nМожно ли проводить НТ (и спойлер) как это сделать, если пункты 1 и 2 выше не выполнены, это тема для отдельной статьи. Stay tuned.\n \n ",
    "tags": [
        "тестирование",
        "нагрузочное тестирование",
        "архитектура",
        "инфраструктура",
        "ОС",
        "инцидент"
    ]
}