{
    "article_id": "726860",
    "article_name": "Как я заставил Python взаимодействовать с Kotlin",
    "content": "Я работаю с POC (proof-of-concept. проверка концепции), где мы используем Ktor (Kotlin Framework) в качестве бекэнда DSL. В этом проекте нами извлекается обобщенное резюме из значительного объема текста. Мы столкнулись с проблемой написания кода машинного обучения на Kotlin. Kotlin молод по сравнению с Python, R и т.д.\nЛюбая технология, которую мы выберем, должна иметь\nСильную библиотечную поддержку, позволяющую нам сосредоточиться на проблемах бизнеса\nНезависимость от платформы\nВысокую производительность труда разработчиков\nНадежность при масштабировании\nОриентированность на будущее, способность поддерживать рост нашего бизнеса.\nМы сравнили языки с учетом этих требований. Ниже представлен список, который поможет нам сравнить и сопоставить сильные и слабые стороны каждого варианта.\nСравнение языков\nPython\nПлюсы :\nПростота и лаконичность\nОтличная экосистема библиотек\nГибкость\nНезависимость от платформы\nПоддержка сообщества\nМинусы :\nМеньшая скорость\nОшибки во время выполнения\nНелегко тестировать\nR\nПлюсы\n:\nОткрытый исходный код\nИспользуется в процессе преобразования необработанных данных из одного формата в более подходящий (data wrangling)\nИспользуется для качественного построения графиков и диаграмм\nНезависимость от платформы\nСтановится популярным\nМинусы:\nСлабый исходник\nОбработка данных\nБазовый уровень безопасности\nМеньшая скорость\nKotlin\nПлюсы:\nНаследует экосистему Java.\nNull-безопасный\nБыстрый и масштабируемый\nИмеет нативные примитивы для параллелизма\nМинусы:\nОграниченная поддержка машинного обучения\nИмеет ограниченную поддержку сообщества\nМы решили использовать Python для машинного обучения. Бэкэнд разрабатывается на языке Kotlin, а суммаризация текста выполняется с помощью Python. Нам нужно было обеспечить взаимодействие между Kotlin и Python. Вот некоторые варианты взаимодействия Kotlin и Python.\nВарианты взаимодействия\nPython\nПлюсы:\nИнтерактивное экспериментирование (Kotlin/Java и Python)\nБыстрая разработка приложений\nПроизводительность выше по сравнению с Python\nМинусы:\nНе все библиотеки поддерживают Jython\nНеобходима дополнительная настройка для запуска программы\nОтдельный сервер Python, взаимодействующий с сервером Kotlin\nПлюсы:\nГибкость\nРазделение проблем\nМинусы:\nЗадержка\nДополнительные сетевые вызовы\nОба варианта не соответствуют требованиям, поэтому мы решили использовать Python-скрипт вместо Python-проекта. Python-скрипт будет выполняться на той же машине, где находится сервер Kotlin.\nНастройка окружения\nДля выполнения Python скрипта требуются различные библиотеки. Поэтому нам нужно настроить для него определенное окружение. Для настройки, пожалуйста, выполните следующие шаги:\nПроверьте, установлен ли Python в вашей системе, используя команду \npython - version\n. Если Python не установлен, пожалуйста, установите его.\nПроверьте, установлен ли pip в вашей системе, используя команду \npip - version\n. Если pip не установлен, пожалуйста, установите его.\nУстановите pip с помощью команды \nPython3 get-pip.py\n.\nОбновите pip до последней версии командой \npip3 install - upgrade pip\n.\nУстановите необходимые библиотеки для скриптов Python, такие как (Numpy и NLTK), используя pip.\nЗапустите Python-скрипт. Для получения дополнительной информации о том, как мы создавали Python-скрипт, обратитесь к этой \nстатье\n.\nВышеуказанные настройки необходимы для запуска Python-скрипта на локальной машине. Теперь перед нами стоит другая задача — запустить Python-скрипт из кода Kotlin и получить результат.\nОкончательное взаимодействие\nВот фрагмент кода, который мы использовали для запуска Python-скрипта из Kotlin-кода.\nЭтот код отвечает за выполнение скрипта и получение результата. Давайте разберем код шаг за шагом:\nСоздайте процесс для того, чтобы запустить скрипт:\nСоздайте процесс, который принимает в качестве входных параметров путь к файлу обобщенного скрипта, суммаризованный текст и заголовок обобщения. Этот процесс отвечает за выполнение команд на терминале и генерацию выходных данных.\nПрочитайте вывод:\nМы создаем BufferReader для построчного чтения вывода из терминала.\nПрочитайте журналы ошибок:\nЕсли во время выполнения скрипта или генерации вывода что-то пошло не так, то нам нужно прочитать журналы ошибок, созданные скриптом или процессом. Используя BufferReader, читаем журналы ошибок, выведенные на терминал.\nУничтожить процесс:\n После прочтения вывода скрипта нам нужно завершить процесс.\nРезюме\nС помощью описанных выше шагов мы смогли выполнить Python-скрипт, обработать ошибки и предоставить его результат в качестве ответа нашему клиенту. Надеюсь, это поможет тем, кто ищет хорошее решение для взаимодействия Kotlin и Python. Чтобы узнать больше о том, как данный фрагмент вписывается в наш более крупный проект, обратитесь к этим статьям:\nПользовательский интерфейс и общая архитектура\nЭкстрактивная суммаризация\nАбстрактная суммаризация\nМашина состояний, или, по-другому, конечный автомат — это мощное средство описания бизнес-логики разрабатываемого приложения. Приглашаем на \nоткрытый урок\n, на котором мы рассмотрим как теоретические, так и практические аспекты использования машины состояний, а также пределы их применения. Полученные на вебинаре знания позволят более широко и осознанно применять конечные автоматы в задачах разработки и получать более эффективный код. Записаться на урок можно \nна странице онлайн-курса \"Kotlin Backend Developer. Professional\".\n \n ",
    "tags": [
        "kotlin",
        "python",
        "машина состосяний",
        "конечный автомат"
    ]
}