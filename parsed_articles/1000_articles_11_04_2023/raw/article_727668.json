{
    "article_id": "727668",
    "article_name": "Начинаем работать с Terraform",
    "content": "Terraform не теряет своей актуальности, несмотря на постоянное развитие облачной инфраструктуры и связанных с ней инструментов. Поэтому начать использовать этот инструмент никогда не поздно. Тем более, что сделать это можно сразу после погружения в базовые основы.\nИменно для тех, кто хочет применять Terraform по работе или для собственных нужд, мы перевели \nэту статью\n автора Майкла Кинга (Michael King).\nМы рассмотрим основы Terraform и расскажем об инструментах, необходимых для начала работы. Продемонстрируем настройку рабочей среды, написание первого кода и развертывание инфраструктуры.\nЗачем выбирать именно Terraform? Это инструмент с открытым исходным кодом, у которого активное комьюнити; существует множество ресурсов для решения проблем, с которыми вы можете столкнуться по пути. Кроме того, Terraform не привязан к конкретной платформе, что позволяет использовать его для управления инфраструктурой на нескольких облачных провайдерах.\nКогда вы начнете работать с Terraform, назад возвращаться уже не захотите! Красота этого инструмента — в его доступности на всех уровнях. С помощью нескольких строк кода вы сможете определить всю инфраструктуру, а Terraform обработает все остальное.\nprovider \"aws\" {\n region = \"us-east-1\"\n}\n\nresource \"aws_instance\" \"example\" {\n ami           = \"ami-0c55b159cbfafe1f0\"\n instance_type = \"t2.micro\"\n\n tags = {\n   Name = \"example-instance\"\n }\n}\nРесурсы и их свойства определяются при помощи ясного и лаконичного синтаксиса. Давайте взглянем на код, который мы использовали для создания инстанса EC2.\nДля начала определим облачного провайдера, с которым мы хотим работать (в данном случае — AWS). Затем мы создаем блок resource, который определяет свойства нашего инстанса, такие как AMI и тип. Наконец, мы добавляем блок tags, чтобы задать имя для нашего инстанса.\nПросто, не правда ли? В дальнейшем вы начнете создавать более сложные настройки, которые позволят управлять несколькими ресурсами, зависимостями и переменными.\nМы рассмотрели основы Terraform. Давайте перейдем к деталям развертывания кода.\n1. Прежде всего, было бы неплохо перейти в каталог, где сохранен код Terraform. Инициализируйте рабочий каталог, запустив команду terraform init. Она загрузит и установит все необходимые плагины и модули для вашего кода.\n2. Затем нужно запланировать изменения. Это можно сделать с помощью команды terraform plan. Она предварительно покажет изменения, которые Terraform внесет в вашу инфраструктуру. Критически важный шаг, который гарантирует, что вы знаете обо всех вносимых изменениях до того, как они будут задеплоены.\n3. Наконец, вы готовы применить изменения. Воспользуйтесь командой terraform apply. Она создаст ресурсы в инфраструктуре в соответствии с написанным вами кодом. Terraform запросит подтверждение, прежде чем вносить изменения. Как только вы подтвердите изменения, Terraform развернет код на вашей инфраструктуре.\nЭто все! С помощью этих шагов вы сможете легко развернуть свой код Terraform, чтобы управлять вашей облачной инфраструктурой эффективно, как никогда.\nТеперь давайте поговорим о переменных и локальных значениях в Terraform. Это невероятно полезные инструменты, которые помогают писать гибкий и переиспользуемый код.\nПеременные позволяют параметризовать код Terraform, чтобы вы могли легко видоизменять его без необходимости редактировать вручную. Переменные определяются в отдельном файле, а затем используются в коде с помощью специального синтаксиса. Вот пример:\nvariable \"region\" {\n type    = string\n default = \"us-west-2\"\n}\n\nresource \"aws_instance\" \"example\" {\n ami           = \"ami-0c55b159cbfafe1f0\"\n instance_type = \"t2.micro\"\n region        = var.region\n}\nВ этом примере определили переменную region с дефолтным значением us-west-2. Затем мы обращаемся к этой переменной в атрибуте region нашего ресурса aws_instance, используя синтаксис var.\nЛокальные значения позволяют определить значение, которое может быть повторно использовано в вашем коде. Это полезно, когда необходимо вычислить значение на основе других переменных или дать описательное имя сложному значению. Вот пример:\nvariable \"environment\" {\n type    = string\n default = \"prod\"\n}\n\nlocals {\n instance_name = \"${var.environment}-web-server\"\n}\n\nresource \"aws_instance\" \"example\" {\n ami           = \"ami-0c55b159cbfafe1f0\"\n instance_type = \"t2.micro\"\n tags = {\n   Name = local.instance_name\n }\n}\nВ этом примере определили локальное значение instance_name, которое объединяет значение переменной environment с описательной строкой. Затем мы обращаемся к этому локальному значению в теге Name нашего ресурса aws_instance.\nКак видите, переменные и локальные значения могут сделать ваш код более гибким, переиспользуемым и легко читаемым. Настоятельно рекомендуем использовать их в своих проектах Terraform.\nТеперь вы знаете, как развернуть код Terraform и использовать локальные значения и переменные. Пришло время начать использовать общие функции, которые сделают вашу жизнь проще. Функции Terraform помогают управлять инфраструктурой более эффективно, они сэкономят вам много времени и избавят от головной боли.\nОдной из наиболее часто используемых в Terraform является функция \ncount\n. Она позволяет создать несколько инстансов одного ресурса с разными именами или параметрами без необходимости писать один и тот же код снова и снова. Предположим, вы хотите создать три инстанса EC2. Вместо того чтобы три раза писать один и тот же код, можно использовать count, чтобы сделать это за один раз:\nresource \"aws_instance\" \"example\" {\n count         = 3\n ami           = \"ami-0c55b159cbfafe1f0\"\n instance_type = \"t2.micro\"\n}\nЭтот код создаст три инстанса EC2 с одинаковым AMI и типом инстанса, но с разными именами: example[0], example[1] и example[2]. Проще простого!\nДругая полезная функция — \nfor_each\n. Она работает аналогично count, но вместо создания нескольких инстансов одного ресурса позволяет создать несколько ресурсов с разными именами и параметрами. Предположим, вы хотите создать несколько инстансов EC2 с разными AMI и типами инстанса:\nvariable \"instances\" {\n type = map(object({\n   ami           = string\n   instance_type = string\n }))\n default = {\n   \"web-server-1\" = {\n     ami           = \"ami-0c55b159cbfafe1f0\"\n     instance_type = \"t2.micro\"\n   }\n   \"web-server-2\" = {\n     ami           = \"ami-0c55b159cbfafe1f0\"\n     instance_type = \"t2.small\"\n   }\n }\n}\n\nresource \"aws_instance\" \"example\" {\n for_each = var.instances\n ami           = each.value.ami\n instance_type = each.value.instance_type\n tags = {\n   Name = each.key\n }\n}\nЭтот код создаст два инстанса EC2: один с AMI ami-0c55b159cbfafe1f0 и типом инстанса t2.micro, другой с AMI ami-0c55b159cbfafe1f0 и типом инстанса t2.small. Инстансы будут названы web-server-1 и web-server-2.\nФункции count и for_each — лишь пара примеров из множества полезных функций, которые можно использовать в Terraform для еще более эффективного управления инфраструктурой.\nЕсть еще одна важная вещь, которой мы бы хотели бы поделиться.\nФайл состояния — основа всей настройки Terraform.\n Он содержит всю информацию, которую Terraform должен знать о вашей инфраструктуре, чтобы отслеживать: что было создано, а что еще нужно создать.\nЭто JSON, который отслеживает текущее состояние инфраструктуры. Terraform использует такой файл для планирования и внесения изменений в вашу инфраструктуру. Если хотите узнать, какие изменения были внесены, можете использовать файл состояния для сравнения текущего состояния с предыдущим.\nКогда вы начинаете работать с Terraform, хранить файл состояния можно локально или удаленно. Локальное состояние хранится на компьютере, на котором выполняется код Terraform, тогда как удаленное находится в централизованной локации, такой как бакет S3 или БД.\nПреимущество локального хранения в том, что это просто и не требует дополнительной настройки. Однако может вызвать сложности при работе в команде, так как совместно использовать и синхронизировать файлы состояния между членами команды довольно проблематично.\nУдаленное хранение намного безопаснее и масштабируемее. Оно позволяет нескольким членам команды трудиться над одной инфраструктурой одновременно, что отлично подходит для совместной работы. Кроме того, удаленное состояние может быть заблокировано для предотвращения конкурирующих изменений, а это снижает риск конфликтов.\nК недостаткам удаленного хранения можно отнести необходимость дополнительной настройки: создания бэкенд-хранилища и настройки контроля доступа. Этот вариант также может быть медленнее, чем локальный, потому что Terraform получает файл состояния через сеть.\nВыбор между локальным и удаленным хранением в значительной степени зависит от требований к инфраструктуре. Если вы работаете в одиночку, локальное хранение — хороший вариант. Однако при работе командой или управлении крупной инфраструктурой ваш путь к успеху — удаленное хранение.\nТеперь вы знаете, как использовать и развертывать код в Terraform. Этот навык поможет автоматизировать инфраструктуру, управлять облачными ресурсами и оптимизировать процессы. Еще вы можете работать в команде, делиться своим кодом и улучшать общую производительность.\nTerraform — это не просто инструмент, это образ мышления. Он учит вас думать об инфраструктуре как о коде, систематически проектировать, тестировать, развертывать и масштабировать.\nДля тех, кто уже овладел основами Terraform и готов двигаться дальше, у нас есть курс \nTerraform База\n, если же вы у вас есть все бозовые знания, тогда вам на \nTerraform Мегу\n для продвинутых.\n \n ",
    "tags": [
        "terraform",
        "aws",
        "облачные сервисы"
    ]
}