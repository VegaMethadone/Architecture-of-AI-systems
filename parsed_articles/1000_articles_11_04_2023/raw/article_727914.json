{
    "article_id": "727914",
    "article_name": "Делаем Ambient Light на Raspberry Pico. Контрибьютим в OpenRgb",
    "content": "Ambient Light помогает работать ночью. Когда вокруг темно и светит только монитор, то глаза сильно напрягаются. Лично мне приятно работать без верхнего света, и данное решение помогает мне это делать.\nВозникла у меня эта идея, когда я переехал на новое место с большим столом. Я вспомнил ролик \nAlexGyver \nи решил сделать себе такое же. Но в отличие от Гавера, Я делаю устройство на основе Corsair Lightning Protocol, что позволяет ему быть более универсальным в настройке эффектов и выборе платформы.\nПроблемы решения AlexGyver\nТолько Windows\nТрудности с поиском Arduino и его ценой (на момент января 2023)\nНет других эффектов\nПроблема решения Giant4 \n[ссылка удалена мод.]\nТолько Windows или Android\nНет других эффектов\nЕсть так же решение с Aliexpress, но они тоже используют проприетарную программу под Windows.\nAmbient Light\nЧто такое Ambient Light?\nЭто динамическая подсветка монитора, которая как бы продолжает его. Светодиоды выводят края экрана тем самым делают иллюзию увеличения размера.\nВАЖНО!\nAmbient Light только для компьютера. То есть мы делаем без Hdmi Splitter.\nКомплектующие\nВыбрал я rpi pico, потому что он был дешевле Arduino (в последствии из за этого нужно было немного помучиться, но все работает). Брал я все в разных магазинах, поэтому посоветовать ничего не могу.\nСам микроконтроллер\nНам понадобится:\nПаяльник\nКатушка припоя\nАдресная\n светодиодная лента (зависит от периметра вашего монитора, нужно посчитать рулеткой, мне хватило 4 метра, брал на 5v)\nАктивный флюс\nШтука для чистки флюса (можно взять спирт или ацетон)\n300-500 Ом резистор (без него светодиоды будут перегорать)\nБлок питания для вашей ленты (лучше брать с запасом, мне хватило 20w)\nКоннектор для питания (нужен чтобы поддерживал ваше напряжение)\nКрасивая коробочка\nКлей пистолет, чтобы это все держалось\nПровода которые бы выдерживали ваше напряжение (взял 10 метров)\nСама rpi pico\nКабель usb для rpi pico\nМакетная плата для пайки\nПрямые руки (необязательно)\nЦена вышла под 6-8 тысяч рублей, так как многих элементов не было (паяльник, припой и другое для пайки)\nКак мы будем выводить с экрана на светодиодную ленту?\nДля этого мы воспользуемся \nCorsair Lightning Protocol\n, который совместим с множеством программ. Нас интересует OpenRGB (есть на Mac os, Windows, Linux). С помощью нее мы будем и задавать цвета на светодиоды.\nВАЖНО! x2\nЯ случайно спалил целых 4 светодиода, так как запускал без резистора. Не повторяйте моих ошибок.\nСобираем!\nСхема сборки  \nИтоговая сборка\nИтоговая сборка сбоку\nСветодиодная лента на корпусе монитора\nРешаем проблему с прошивкой\nЕсть маленькая особенность. Библиотека FastLed не имеет поддержку процессора rp2040 (rpi pico) в основной ветке. Поэтому нужно ручками скачать неофициальную библиотеку \nhttps://github.com/Zitt/FastLED/tree/rp2040\nУстановка\nСкачиваем библиотеку\nДобавляем библиотеку в arduino\nВыбираем библиотеку\nДобавляем устройство в arduino ide\nСсылка на дополнительный список устройств: \nhttps://github.com/earlephilhower/arduino-pico/releases/download/global/package_rp2040_index.json\nУстанавливаем Corsair Protocol\nВыбираем нужное устройство\nВыбираем Usb Stack\nПрошиваем\nСкачиваем arduino ide. Затем ставим драйвера для rpi pico и прошиваем изменяя количество светодиодов и порт ленты.\nПрошиваем\nВыбираем скрипт\nСтавим нужные параметры\nНастройка ленты через iCUE\niCUE (программа для управления corsair node) рассчитана на проприетарные ленты, но туда можно добавить свои, что и нужно сделать.\nНастройки\nНастраиваем iCUE\nСтавим статичный цвет для того чтобы лента выключалась при отключения компьютера\nOpenRgb и его особенности\nВ OpenRgb не хватало настроек для достижение эффекта, которого я хотел. Мне также не понравились режимы работы Ambient Light: только среднее значение всего экрана или вывод экрана полностью без сглаживания, из за чего лента резко меняет цвета и глазам становится больно. А еще Ambient Light фотографирует через Qt в 60 кадров в секунду. Из за этого fps экрана проседает в два раза!! Это не дело, и я решил изменить код, который должен был бы решать эти две проблемы. \nУ OpenRgb также есть api, но он не подходит для потоковой передачи видео. Он очень медленно меняет и имеет большую задержку.\nДелаем свой эффект\nДля адекватной работы эффекта пришлось изменить часть кода плагина Effects OpenRgb и добавить новый функционал. За два дня я:\nУлучшил работу ScreenRecorder\nСделал дополнительное меню с глобальными настройками\nДобавил параметр smoothness который отвечает за сглаживание\nСделал функцию SmoothMatrix для работы для матрицы\nКод\nScreenRecorder\nИзначально в коде Screen Recorder не было instance. Так, при каждом новом эффекте с использованием записи экрана нужно было создавать еще один, тем самым увеличивая нагрузку на компьютер.\nScreenRecorder* ScreenRecorder::Get()\n{\n    if(!instance) // Проверяем что instance еще нет\n    {\n        instance = new ScreenRecorder(); // Создаем если нет\n    }\n\n    return instance;\n}\nТеперь все эффекты могут использовать один экземпляр ScreenRecorder\nГлобальные настройки\nДля начало нужно сделать в qtcreator эти самые настройки\nСоздаю форму\nТак она выглядит в редакторе\nНа практике\nЗа основу я взял уже существующее окно About. Скопировал его и написал свою логику\nGlobalSettings::GlobalSettings(QWidget *parent) :\n    QWidget(parent),\n    ui(new Ui::GlobalSettings)\n{\n    ui->setupUi(this); // подключаемся к qt\n\n    int fpscapture = ScreenRecorder::Get()->GetFpsCapture(); // получаем скорость захвата кадров\n    ui->fpscapture->setValue(fpscapture); // ставим ползунок на нужное место\n}\nКод инициализации виджета\nvoid GlobalSettings::on_fpscapture_valueChanged(int value)\n{\n    ScreenRecorder::Get()->SetFpsCapture(value); // устанвлиавем кадры\n    ui->fpscapture->setValue(value); // меняем значение позунка\n}\nКод, который при изменении значения ползунка меняет значение скорости захвата кадров\nПараметр smoothness \nИзменяю существующую форму\nВ программе\nSmoothMatrix\nОсновной эффект в Ambient я считаю Screen Copy. Поэтому объяснять принцип работы SmoothMatrix я буду на нем.\nfor(unsigned int h = 0; h < height; h++) // перебираем экран по высоте\n{\n    for(unsigned int w = 0; w <  width; w++) // перебираем экран по ширине\n    {\n        // получаем цвет пикселя\n        QColor color = scaled.pixelColor(reverse ? width - w - 1: w, h); \n        unsigned int led_num = map[h * width + w];\n        // изменяем цвет на ленте\n        controller_zone->SetLED(led_num, SmoothMatrix(ColorUtils::fromQColor(color), w, h), Brightness); \n        \n    }\n}\nТут я добавил только использование функции SmoothMatrix\nRGBColor Ambient::SmoothMatrix(RGBColor color, int w, int h)\n{\n    if(color != previous[w][h]) // проверяем что цвет не равен предыдущему\n    {\n        // QToolTipedSlider не можете перебирать в нецелых числах\n        // поэтому нам нужно превратить переменную в float\n        float smoothness_f = smoothness;\n        // используем интерполяцию\n        color = ColorUtils::Interpolate(previous[w][h], color, smoothness_f / 1000);\n        // записываем его как предыдущий цвет\n        previous[w][h] = color;\n    }\n\n    return color;\n}\nСама функция\nРезультат\nВидео с работой\nВесь \nкод\n выложен в открытый доступ. Чтобы установить этот плагин, нужно:\nУстановить последнюю openrgb версию из \npipeline\n \nСкачать плагин из \nмоего репозитория\n (UPDATE: патч был добавлен в master. Теперь его можно скачать из \npipeline\n плагина)\nИмпортировать расширение в разделе settings\nИнструкция с картинками\nСкачиваем для Windows\nРаспаковываем\nОткрываем\nБудет ругаться Windows, но только потому, что у софта нет подписи из-за того, что мы используем версию pipeline\nСкачиваем \nплагин\nУстанавливаем\nНастройки\nДля нормальной работы нужно еще скачать \nплагин \nдля создания матрицы, чтобы экран корректно отображался.\nСкачиваем еще один плагин\nУстанавливаем\nСтавим нужную длину светодиодной ленты\nПридаем нужную форму\nЗапускаем эффект\nИтог\nЯ сделал себе подсветку, именно которую я хотел. Мне очень понравилось делать руками и разбираться как в сишном коде, так и в пайке. Для меня это был отличный опыт на новогодние праздники. Я испытывал множество эмоций от этого процесса, когда что то шло не так, когда что то не получалось, но в итоге все заработало!\nЭта реализация работает на любой платформе (Windows, Linux, Mac os). Кроме эффекта Ambient Light, можно настроить и другие в плагине Effects.\nP.S\nДумаю еще рассказать про перерождение моего Openwrt роутера, который я угробил. Для починки мне пришлось подключаться по UART с помощью 🐬 Flipper Zero и модифицировать прошивку Openwrt.\n \n ",
    "tags": [
        "ambient light",
        "arduino",
        "светодиодная лента",
        "монитор",
        "open source",
        "diy",
        "pico",
        "qt5",
        "openrgb"
    ]
}