{
    "article_id": "726384",
    "article_name": "Делаю Package Manager для VBA",
    "content": "Я знаю, какое у вас сейчас лицо:\nлицо человека, который узнает что кто-то пишет код на VBA\nНо на самом деле идея не нова и изначально я даже думал не изобретать велосипед, ведь есть по описанию неплохой \nvba-blocks\n, с открытым исходным кодом. Бери не хочу.\nУвы, так вышло, что я не умею писать скрипты в powershell, а у меня при установке какой-то из этих скриптов не отрабатывает и падает.\nЕсли, кстати, кому-то интересно, попробуйте поправить, расскажите хоть как оно?\nНу а я беру палки и колеса, и начинаю \nлепить\n \nтворить \n все же лепить.\nпримерно на этой стадии находится большинство моих велосипедов...\nПрежде чем мы начнем\n1. \nЯ не программист, я музыкант.\n Но сейчас моя профессия – разработчик VBA. Я не знаю как правильно писать код. Но учусь, кажется. И когда я делюсь своими мыслями – я тоже учусь. Если вы хотите помочь мне научиться, я буду только рад  😀\n2. Далее пойдет многобуквенный текст о том, как автор делает \nдля себя\n инструмент для упрощения работы с VBA. Кода нет. Вернее у меня то он есть, но его много и какие куски сюда добавлять я не знаю (да и надо ли оно).\n3. Здесь вы не увидите \nочень крутую штуку, которую точно-приточно надо быстрее запихивать в мой проект, оспаде, как же я раньше жил без этого\n.\nЭто, по сути, личный инструмент автора, про который он (кто он? я, получается) решил поведать всему \nмиру\n хабру.\nТак что если вы сюда за святым граалем — \nThank you Mario! But our princess is in another castle!\nА всем остальным приятного время провождения.\nЧто такое PackageManager\nНе буду нудить скучными вырезками из википедии и постараюсь своими словами объяснить.\nPackage Manager\n – это npm, и pip, и nuget, и composer etc.\nНу вы поняли.\nНет? Тогда вот вам википедия под катом:\nИнформация из Википедии, свободной энциклопедии\nСистема управления пакетами (также иногда «менеджер пакетов» или «пакетный менеджер») — набор программного обеспечения, позволяющего управлять процессом установки, удаления, настройки и обновления различных компонентов программного обеспечения. Системы управления пакетами активно используются в различных дистрибутивах операционной системы Linux и других UNIX-подобных операционных системах.\nПрограммное обеспечение представляется в виде особых пакетов, содержащих, помимо дистрибутива программного обеспечения, набор определённых метаданных, которые могут включать в себя полное имя пакета, номер версии, описание пакета, имя разработчика, контрольную сумму, отношения с другими пакетами. Метаданные сохраняются в системной базе данных пакетов.\nИсходя из того, что делает менеджер пакетов, можно вывести список того, что же нам предстоит разработать.\nНу, вроде все просто:\nНужно создать консольное приложение, которое будет парсить....\n...\nТак, стоп\nВс\nё\n, да? Приплыли. Консольное. А как же в excel/word/access открывать консоль-то? Отдельно чтоли? Это же неудобно!\nА Immediate Window только и умеет, что выводить информацию через \nDebug.Print\n.\nДа, но не совсем. Immediate (я буду называть ее \nвба\nнсоль, чтоб понятней было) умеет выполнять процедуры и функции:\nэто не реклама, я сам себе не платил (ссылка в профиле, кстати)\nНу, то есть, есть у нас какая-то функция, мы ее в вбансоли вызываем, она нам выдает какой-то результат. Уже можно парсить аргументы, получается.\nПопробуем еще раз пройти по списку?\nНужно создать \nконсольное\n вбансольное приложение, которое будет парсить аргументы и исходя из переданной команды выполнять некие действия:\n1. Инициализировать проект (\ninit\n)\n2. Находить и устанавливать пакеты (\ninstall\n)\n3. Публиковать пакеты в некое хранилище (\npublish\n)\n4. Обновлять уже установленные пакеты (\nupdate\n)\n5. Удалять установленные пакеты из проекта (\nuninstall\n)\nНу это \nбаза\n.\nподпись к изображению я не придумал, поэтому вот вам котик >^,^< \nА зачем козе баян?\nНет, а действительно, зачем? Разве макросы настолько большие, что туда постоянно нужно что-то импортировать?\nДа. Причем на моей практике таких макросов много. И так как VBAшники работают в современных IDE, а сам VBA – современный язык программирования, для которого как крупные компании, вроде google, так и энтузиасты пишут кучу разных пакетов/библиотек/фреймворков, ими нужно как-то управлять.\n...\nЛадно, на самом деле вс\nё\n чуточку плачевней.\nно все же приемлемо\nОткровенно говоря, я действительно в каждый проект импортирую кучу кода, который специально пишу для переиспользования. И да, все это пишется только для себя, как и любые VBA инструменты (надстройки не берем в расчет, наверное, как удобно; вы можете взять в расчет, а я не хочу).\nСамый частый гость в моих проектах – класс модуль \nCRegExp\n, который помогает взаимодействовать с регулярками \n(напишите в комменты, если интересно глянуть как он выглядит, закину на GitHub |=| там по сути обертка для VBScript.RegExp, так что наверное ничего интересного |=| я передумал, короче, не пишите в комменты)\n.\nИ подобных гостей много. И импортировать все это каждый раз руками... я что, не программист чтоли?\nДо недавнего времени, для импорта пакетов я пользовался... Ни за что не догадаетесь... изобретенным для себя велосипедом в виде надстройки, которую подключал к проекту. В ней есть несколько функций, вызывая которые в вбансоли, можно было импортировать код, заранее сохраненный в какую-нибудь папочку, в подключенный проект и спокойно им пользоваться.\nОчень удобно, поверьте.\nИ вот сейчас кодовая база моих пакетов начала разрастаться и ими стало неудобно управлять.\nОтсутствует нормальное версионирование, например. Неудобно прописывать зависимости для того или иного пакета (а так как код переиспользуемый, некоторые пакеты ссылаются на другие пакеты).\nИ вот тут я понял, что настало время нового велосипеда...\nА что это за кружочки?\n🟢 – реализовано\n🟡 – в процессе реализации, но уже что-то работает\n🔴 – пока даже класс не создал\n🟢Нулевая задача - а как звать то?\nИтак, с чего начать новый проект?\nПравильно – с названия. Я потратил на то, чтобы придумать название менеджера пакета для VBA почти полчаса, но теперь оцените:\nipm\n – Immediate Package Manage\nА? Каково?\nДумали \nvpm\n (vba package manager) увидеть, а вот и нет.\nИскушенный читатель сразу заметил отсылку к другому менеджеру – \nnpm\n. И да, для меня он стал идейным вдохновителем и лекалом всего проекта, поэтому велосипед будет изобретаться по его образу и подобию (со своей реализацией, конечно).\n🟢Первая задача - модуль Package\nВспоминаем, что там у нас идет первым делом:\nИнициализировать проект (\ninit\n)\nВот с \ninit\n и начнем.\nПри вызове этой команды, вбансоль должна запросить:\nИмя пакета\nВерсию\nАвтора\nОписание\nи записать все эти данные. В npm они хранятся в файле package.json.\nИ что, опять стоп? Как вбансоль диалог то делать будет?\nОтставить панику, я все придумал.\nМатериал из лучшего телеграм канала о VBA по версии его админа – Дневник VBAшника\nPackageManager: диалог в Immediate Window\n...\nТак вот, думал, как бы сделать аналог консольного диалога (в \nnpm\n, например, после вызова команды \ninit\n происходит диалог с пользователем, после чего из полученных данных формируется \npackage.json\n). \nImmediate Window\n не совсем для таких вещей сделали. Но выдумать, таки, получилось.\nСуть простая:\nПишем основную процедуру, в которой будет вызван диалог.\nЗаканчиваем выводом сообщения с названием следующей функции и нижним подчеркиванием, в которую ожидаем аргумент от пользователя.\nПримерно так все выглядит:\nSub Start()\n  Debug.Print «Продолжить диалог?(y/n)»\n  Debug.Print «Continue _»\nEnd Sub\n\nSub Continue(ByVal Choice As String)\n  If Choice = «y» then\n    Debug.Print «Продолжаем, следующая функция!»\n  ElseIf Choice = «n» then\n    Debug.Print «Ок.»\n  Else\n    Debug.Print «Неизвестная команда!»\n  End If\nEnd Sub\nВ итоге в \nImmediate Window\n получаем такой диалог:\nStart   ' жмем Enter\n=> Продолжить диалог?(y/n) Continue _\n' курсор будет находиться на этой строке, нужно будет ввести ответ в кавычках, например «n» и нажать Enter\n\n=> Ок.\nПричем ответ можно писать не в полных кавычках («y»), а только с первой («y). Работает одинаково.\nВот такая имитация \ncli\n диалога. Не думаю, что кому-то пригодится, но кажется что штука забавная🙂\nДалее, файл package.json.\nМы, как прогрессивные программисты, в VBIDE создавать файлы не можем, поэтому для этих целей будем использовать стандартный модуль и комментарии.\nВыглядеть все должно примерно так:\nтакой прекрасный Code Explorer делает Rubberduck\nЗаметили последнюю строку? Ее на вкусное оставлю, затрону позже.\nТут, в принципе, все просто. Спарсили команду, создали (или нашли) модуль Package, записали полученную информацию.\nНо.\nВ npm каждый импортируемый пакет идет со своим package.json. То есть таких файлов в проект импортируется ровно столько, сколько пакетов и их зависимостей будет импортировано.\nА у нас что?\nа у нас в проекте конфликт имен\nНа этом все. Подписывайтесь на канал, ставьте лайки.\nПервое решение, которое пришло мне в голову – лепить к названию модуля имя пакета. И думаете я придумал еще парочку и выбрал лучшее? Глупости какие.\nВ случае с примером будет \nCRegExpPackage\n.\nЭто имя для экспорта.\nА для \ninit\n, чтобы отделить основной пакет от импортных (шутка про импортозамещение), будем называть модуль \nThisProjectPackage\n.\nДаже нативно получается.\n🟡Вторая задача – пакетик нужен?\nИдем дальше по списку:\nНаходить и устанавливать пакеты (\ninstall\n)\nОх, как тут все неоднозначно.\nВо-первых\n, где хранить пакеты?\nНу в текущей итерации, \nForMyselfMode\n, вполне достаточно и локального хранилища.\nДля того, чтобы первично задать путь к этому хранилищу, я решил сделать доп команду \nconfig\n в которой нужно будет прописать значение опции \n--rootpath\n – путь к папке со всеми пакетами.\nструктура папки с пакетами\nКоманда парсит путь и записывает его в переменную окружения \nPACK\n для текущего пользователя .\nВо-вторых\n, а как быть с версиями?\nИ вот над этим я сейчас скрипящими и кипящими мозгами думаю.\nВот вам синтетический пример:\nЕсть пакет \nЧетверочка\n, на который логотип наносит компания \nРисуемНаПакетах\n версии \n1.0.0\n.\nА еще есть пакет \nМагнезия\n, на который логотип наносит та же компания \nРисуемНаПакетах\n, но более поздней версии – \n2.0.0\n.\nМне нужны в проекте оба этих пакета, но они за собой потянут компанию \nРисуемНаПакетах\n, и вот тут произойдет конфликт версий (придется брать версию \n1.0.0\n и \n2.0.0\n).\nВ npm это решается очень просто – создается новая папка node_modules внутри папки загружаемого пакета и уже в нее импортируется нужная версия.\nВнимание вопрос. \nправильный ответ – никак и Rubberduck ситуацию не исправляет\nЕсли у вас есть мысли, как сделать совмещение версий в одном проекте, напишите коммент.\nВот тут правда, честно. Вообще не представляю.\nИ напоследок, \nв-третьих\n, при импорте пакета, информация о нем должна записаться в \nфайл\nмодуль \nThisProjectPackage\n, а именно в раздел \n'@dependencies\n, ну чтобы понятно было, какие пакеты используются в проекте. Более того, туда же нужно записать версию пакета, ну чтобы понятно было, какая версия пакета используется в проекте.\nВыглядеть это должно примерно так:\nзаметили галочку возле версии? это еще одна головная боль :)\nИнтересный факт (нет)\nНа текущей итерации у меня небольшой баг в этой команде – в зависимости основного проекта попадают пакеты \nи их зависимости\n (а должны только сами пакеты, т.к. их зависимости прописаны в их модуле Package), но это поправимо.\nНе знаю зачем вам эта информация, просто решил рассказать. Вы же зачем-то аж сюда дочитали😁\n🟢Третья задача – пакет с пакетами\nПубликовать пакеты в некое хранилище (\npublish\n)\nКакие тут могут быть проблемы?\nJarvis, подержи мое пиво, ща все объясню\nБерем модуль, сохраняем в папку. Готово.\nНу в целом то да, но как зависимости то не сохранять в папку с основным пакетом?\nУ нас же задача в чем? Настроить удобное управление пакетами, то есть их импорт, экспорт, \nизменение\n и т.д.\nВот чтобы изменение было легко производить, нужно отделить \nмух от котлет\nзависимости от основного кода.\nА что, а как?\nА Rubberduck! \nнам на что?\nРаз уж я очень крепко прикипел к этому аддону, решил задействовать его в своей надстройке.\nДля тех кто не в курсе:\nНу уж про \nRubberduck\n вы должны были слышать! Так ведь?\nслышали же?\nВ общем для своего Code Eplorer'а этот аддон добавляет в каждый модуль комментарии.\nОдин из таких комментариев – \n'@Folder\n.\nКак следует из названия, он отображает информацию о том в какой папке лежит модуль (ну как папке... ну вы поняли).\nВот эту инфу мы и будем парсить.\nВсего лишь нужно экспортируемый/публикуемый код поместить в папку \nsrc\n в корневом каталоге. \nThisProjectPackage\n выносим в корень:\nвнимание на Code Explorer\nВс\nё\n, мухи отдельно, котлеты отдельно.\nЕще одно обязательное условие, перед экспортом переименовать \nThisProjectPackage\n в \n[NameOfProject]Package\n, а потом, и это не менее важно, вернуть название обратно.\nНу и, естественно, в нашем хранилище должна создаваться папка с названием пакета, в которой должна создаваться папка с номером версии, в которой должна создаваться папка src, в которую мы экспортируем весь проект + package модуль.\n%PACK% -> CRegExp -> 1.0.0 -> src\nЗачем src? На самом деле не зачем, просто раньше я выносил package отдельно от основного кода.\nВозможно надо фиксить, но мне пока лень и вдруг в этом есть смысл?\nУстали? Ща побыстрому пробежимся по последним пунктам.\n🔴Четвертая задача – у нас новые пакетики\nИ вот вы уже почти уснули, а я начинаю предпоследнюю главу своего умопомрачительного повествования.\nОбновлять уже установленные пакеты (\nupdate\n)\nТут, как обычно, все очень просто.\nПарсим package модуль, ищем там нужный нам пакет, проверяем до какой версии можно обновить, обновляем.\nСамая короткая задача, наверное. Поправьте меня, может я ошибаюсь?\n🔴Пятая задача – выкинь ты этот пакет\nУдалять установленные пакеты из проекта (\nuninstall\n)\nА вот тут есть что сказать по сложностям. Одно слово – зависимости.\nНужно пройтись по всем установленным пакетам и их зависимостям. Еще раз, по \nвсем\n пакетам и по \nвсем\n их зависимостям, гуглим \nDependency hell\n.\nИ че? И где?\nКак вы поняли, \nipm\n пока в разработке. Буквально вчерашняя ночь прошла в отладке трех команд из-за переименования модуля package. Но результат того стоит.\nСам проект я выложу в open source по завершению и отредактирую статью.\nЕсли вам не понравилась статья, ни за что \nне подписывайтесь\n на мой телеграм. Не надо, правда. \nСсылка еще в профиле есть.\nА вы изобретаете велосипеды в VBA?\n \n ",
    "tags": [
        "package manager",
        "vba"
    ]
}