{
    "article_id": "723474",
    "article_name": "Starting Electronics: руководство по веб-серверам на Arduino. Часть 9. Работа с изображениями",
    "content": "\r\n\n\r\n\nОт переводчика.\n Сегодня у нас лёгкий урок, мы можем расслабиться и просто следовать за объяснениями автора. Если вы внимательно ознакомились с предыдущей статьёй и уяснили принцип работы веб-сервера с файлами на SD карте памяти, то на этом занятии вам всё должно быть понятно — мы просто добавим одну строку в код страницы и немного модернизируем скетч из прошлого урока.\n\r\n\n\r\nНесмотря на лёгкость сегодняшнего занятия, оно даёт нам важное умение — добавлять изображения на веб-страницы сервера и делать эти страницы красивыми и информативными.\n\r\n\n\r\n\n❯\n \n Работа с изображениями\n\r\nВеб-страницы, находящиеся SD карте Arduino сервера, могут содержать изображения. В этом уроке рассказывается как вставить JPEG картинку в HTML страницу и как отправить её браузеру, когда веб-сервер получает соответствующий HTTP запрос.\n\r\n\n\r\nВ качестве оборудования в этом уроке используются Arduino Uno с платой Ethernet Shield и microSD картой памяти.\n\r\n\n\r\nЭто видео демонстрирует в действии реализованный пример из этого урока:\n\r\n\n\r\n\n\r\n\n\r\n\n❯\n \n HTML код для отображения картинок\n\r\nHTML тег \n<img>\n используется для вставки изображения на веб-страницу. Возьмём файл \nindex.htm\n из \nпредыдущей части\n этого руководства и немного изменим его для добавления изображения.\n\r\n\n\r\n\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>Arduino SD Card Web Page</title>\n    </head>\n    <body>\n        <h1>Arduino SD Card Page with Image and Link</h1>\n        <img src=\"pic.jpg\" />\n        <p>Go to <a href=\"page2.htm\">page 2</a>.</p>\n    </body>\n</html>\n\n\r\nВ вышеприведенном HTML коде изображение, содержащиеся в файле \npic.jpg\n, добавляется на веб-страницу при помощи строки:\n\r\n\n\r\n\n<img src=\"pic.jpg\" />\n\n\r\nАтрибут src используется для указания имени отображаемого файла картинки.\n\r\n\n\r\n\nИсходный код\n\r\nДля работы с этим примером нужно скопировать три файла на microSD карту памяти, которая затем будет вставлена Ethernet Shield.\n\r\n\n\r\n\nSD_card_image.zip\n (8,2 КБ) — этот архив содержит HTML фалы веб-страниц index.htm, page2.htm и файл картинки pic.jpg, используемые в этом уроке.\n\r\n\n\r\n\n❯\n \n HTTP запросы\n\r\nПри подключении к Arduino веб-серверу, браузер сначала отправляет HTTP запрос веб-страницы. После того, как браузер получает запрошенную страницу, он обнаружит, что она содержит изображение. Для загрузки этого изображения браузер отправит серверу ещё один HTTP запрос.\n\r\n\n\r\n\n❯\n \n Скетч Ардуино\n\r\nНиже представлен Arduino скетч этого урока. Это модифицированная версия скетча из предыдущей части руководства.\n\r\n\n\r\n\n/*--------------------------------------------------------------\n  Скетч:      eth_websrv_SD_image\n\n  Описание:  Arduino веб-сервер с SD картой памяти и возможностью работы с изображениями\n  \n  Оборудование: контроллер Arduino Uno, плата Ethernet Shield, microSD карта памяти 2 Гб, отформатированная в FAT16\n                \n  Программное обеспечение: среда разработки Arduino IDE (требуется наличие файлов index.htm, page2.htm и pic.jpg на microSD карте памяти)\n  \n  Ссылки:\n    - WebServer example by David A. Mellis and modified by Tom Igoe\n    - SD card examples by David A. Mellis and Tom Igoe\n    - Ethernet library documentation: http://arduino.cc/en/Reference/Ethernet\n    - SD Card library documentation: http://arduino.cc/en/Reference/SD\n\n  Дата создания:         7 марта 2013\n  Изменено:     17 июня 2013\n \n  Автор:       W.A. Smith, http://startingelectronics.org\n--------------------------------------------------------------*/\n\n#include <SPI.h>\n#include <Ethernet.h>\n#include <SD.h>\n\n// Размер буфера для HTTP запроса\n#define REQ_BUF_SZ   20\n\nbyte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };\nIPAddress ip(192, 168, 0, 20); // IP-адрес (нужно изменить на актуальный для вашей сети)\nEthernetServer server(80);\nFile webFile;\nchar HTTP_req[REQ_BUF_SZ] = {0}; // HTTP запрос, сохраняемый как null terminated строка\nchar req_index = 0; // индекс HTTP_req буфера\n\nvoid setup() {\n    // Выключение Ethernet чипа\n    pinMode(10, OUTPUT);\n    digitalWrite(10, HIGH);\n    \n    Serial.begin(115200);\n    \n    // Инициализация SD карты\n    Serial.println(\"Initializing SD card...\");\n    if (!SD.begin(4)) {\n        Serial.println(\"ERROR - SD card initialization failed!\");\n        return;\n    }\n    Serial.println(\"SUCCESS - SD card initialized.\");\n    // Поиск файла index.htm\n    if (!SD.exists(\"index.htm\")) {\n        Serial.println(\"ERROR - Can't find index.htm file!\");\n        return;\n    }\n    Serial.println(\"SUCCESS - Found index.htm file.\");\n    \n    Ethernet.begin(mac, ip);\n    server.begin();\n}\n\nvoid loop() {\n    EthernetClient client = server.available();\n\n    if (client) {\n        boolean currentLineIsBlank = true;\n        while (client.connected()) {\n            if (client.available()) {\n                char c = client.read();\n                // оставить последний элемент массива 0 (null terminate строка)\n                if (req_index < (REQ_BUF_SZ - 1)) {\n                    HTTP_req[req_index] = c; // сохраняем символ HTTP запроса\n                    req_index++;\n                }\n                Serial.print(c); // печатаем HTTP запрос в Serial\n                if (c == '\\n' && currentLineIsBlank) {\n                    // Открываем запрошенный(ые) файл(ы)\n                    if (StrContains(HTTP_req, \"GET / \") || StrContains(HTTP_req, \"GET /index.htm\")) {\n                        client.println(\"HTTP/1.1 200 OK\");\n                        client.println(\"Content-Type: text/html\");\n                        client.println(\"Connnection: close\");\n                        client.println();\n                        webFile = SD.open(\"index.htm\");\n                    }\n                    else if (StrContains(HTTP_req, \"GET /page2.htm\")) {\n                        client.println(\"HTTP/1.1 200 OK\");\n                        client.println(\"Content-Type: text/html\");\n                        client.println(\"Connnection: close\");\n                        client.println();\n                        webFile = SD.open(\"page2.htm\");\n                    }\n                    else if (StrContains(HTTP_req, \"GET /pic.jpg\")) {\n                        webFile = SD.open(\"pic.jpg\");\n                        if (webFile) {\n                            client.println(\"HTTP/1.1 200 OK\");\n                            client.println();\n                        }\n                    }\n                    // Посылаем веб-страницу клиенту\n                    if (webFile) {\n                        while(webFile.available()) {\n                            client.write(webFile.read());\n                        }\n                        webFile.close();\n                    }\n                    // Обнуляем буфер\n                    req_index = 0;\n                    StrClear(HTTP_req, REQ_BUF_SZ);\n                    break;\n                }\n                if (c == '\\n') {\n                    currentLineIsBlank = true;\n                } \n                else if (c != '\\r') {\n                    currentLineIsBlank = false;\n                }\n            } // end if (client.available())\n        } // end while (client.connected())\n        delay(1);\n        client.stop();\n    } // end if (client)\n}\n\n// Обнуляем массив\nvoid StrClear(char *str, char length) {\n    for (int i = 0; i < length; i++) {\n        str[i] = 0;\n    }\n}\n\n// Ищем совпадение в запросе\nchar StrContains(char *str, char *sfind) {\n    char found = 0;\n    char index = 0;\n    char len;\n\n    len = strlen(str);\n    \n    if (strlen(sfind) > len) {\n        return 0;\n    }\n    while (index < len) {\n        if (str[index] == sfind[found]) {\n            found++;\n            if (strlen(sfind) == found) {\n                return 1;\n            }\n        }\n        else {\n            found = 0;\n        }\n        index++;\n    }\n\n    return 0;\n}\n\n\r\nЭтот скетч работает так же, как и скетч из предыдущего урока, за исключением следующего участка кода, который обрабатывает запросы изображений в формате JPEG:\n\r\n\n\r\n\n else if (StrContains(HTTP_req, \"GET /pic.jpg\")) {\n    webFile = SD.open(\"pic.jpg\");\n    if (webFile) {\n        client.println(\"HTTP/1.1 200 OK\");\n        client.println();\n    }\n}\n\n\r\nЭтот код проверяет, запрашивает ли браузером JPEG изображение (файл) pic.jpg.\n\r\n\n\r\nЕсли запрос изображения получен и файл этой картинки присутствует SD карте, то браузеру посылается стандартный HTTP ответ OK, а затем и сама JPEG картинка.\n\r\n\n\r\nКак и в предыдущей части, код примера специально максимально упрощён для лучшего понимания принципа работы. Этот пример не обрабатывает случаи, когда ресурс (HTML файл или файл изображения) не может быть найден на SD карте. Он также рассчитан на работу только с файлом «pic.jpg».\n\r\n\n\r\nДля практического применения можно выделять запрошенное имя HTML страницы или файла изображения из HTTP запроса, а затем пытаться найти его на SD карте памяти сервера. Также должна быть предусмотрена обработка случаев, когда запрашиваемый файл не может быть найден на SD карте.\n\r\n\n\r\n\n❯\n \n От переводчика о 9-й части\n\r\n\nГоворя простыми словами, здесь мы «настраиваем» скетч на выдачу (в ответ на запрос браузера) картинки, находящейся в файле pic.jpg. То есть в этом варианте наш веб-сервер может выдавать только одну картинку из определённого заранее файла (pic.jpg).\n\r\n\n\r\nТакой вариант веб-сервера неприменим на практике и подходит только для целей обучения. Но это легко исправить — достаточно добавить обработку любых названий файлов и расширений популярных графических форматов файлов (PNG, GIF и т. д.) — и наш сервер станет универсальным и начнёт выдавать красивые веб-страницы с картинками, точно так же, как это делают «взрослые» сервера в интернете.\n\r\n\n\r\n\nЧасть 1\n, \nчасть 2\n, \nчасть 3\n, \nчасть 4\n, \nчасть 5\n, \nчасть 6\n, \nчасть 7\n, \nчасть 8\n.\n\r\n\n\r\n\n \n ",
    "tags": [
        "timeweb_статьи_перевод",
        "микроконтроллеры",
        "программирование",
        "Arduino",
        "IoT",
        "туториал",
        "руководство",
        "уроки",
        "веб-сервер",
        "server",
        "Starting Electronics",
        "images",
        "img"
    ]
}