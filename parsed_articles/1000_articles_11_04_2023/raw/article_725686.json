{
    "article_id": "725686",
    "article_name": "Когда НЕ нужно использовать Apache Kafka?",
    "content": "\r\n\n\r\n\nApache Kafka де-факто превратился в стандарт потоковой передачи событий для обработки данных на лету. По мере его широкого распространения в отрасли появляются вопросы: «А когда НЕ нужно использовать Apache Kafka? Какие ограничения у этой платформы? В каких ситуациях он не предлагает необходимые возможности? Как понять, что Kafka — неподходящий инструмент для какой-то задачи?» \n\r\n\nВ статье, перевод которой мы подготовили, автор Kai Waehner постарается ответить на эти вопросы. В отдельных главах приводится объяснение, когда стоит использовать Kafka, когда — нет, а когда — возможно.\n\r\n\nСодержание\n\r\n\n\r\n\nРыночные тенденции: «связанный мир»\n\r\n\nЧем является и чем не является Apache Kafka?\n\r\n\nПримеры использования Apache Kafka в связанном мире\n\r\n\nКогда стоит использовать Apache Kafka?\n\r\n\nКогда НЕ нужно использовать Apache Kafka?\n \n\r\n\nКогда ВЕРОЯТНО можно использовать Apache Kafka?\n \n\r\n\nПодводя итоги, Kafka НЕ…\n \n\r\n\nВебинар по Apache Kafka\n\r\n\n \n\r\n\n\r\n\nРыночные тенденции: «связанный мир»\n\r\n\nСначала разберемся, почему Kafka сейчас повсюду используется. Это говорит о том, что рынку позарез нужен инструмент для потоковой передачи событий, но в то же время свидетельствует о том, что универсального решения для всех задач не существует. Kafka — НЕ универсальное решение для достижения «цифрового мира» (connected world), однако критически важный компонент!\n\r\n\nМир становится связан все теснее. Генерируются огромные объемы информации, которые нужно сопоставлять друг с другом ради повышения прибыли, снижения расходов и рисков. Это происходит практически во всех отраслях, в одних быстрее, в других медленнее, но связанный мир приходит всюду — в производстве, умных городах, игровой индустрии, торговле, банковском деле, страховании и т. д. \n\r\n\nЯ выбрал две рыночных тенденции, чтобы проиллюстрировать безумный рост объемов данных и создания инноваций, а также передовые сценарии использования (и огромную популярность Kafka, конечно же).\n\r\n\n«Связанные» автомобили (connected cars): огромные объемы телеметрии и послепродажное обслуживание\n\r\n\nКомпания Allied Market Research опубликовала \nотчет\n Global Opportunity Analysis and Industry Forecast, 2020–2027.\n\r\n\n\r\n\n\r\nСогласно отчету, рынок «связанных» автомобилей с сетевыми возможностями подразумевает куда более широкий набор отраслей и сценариев использования, чем представляет большинство из вас. Вот несколько примеров: сетевая инфраструктура и связь, безопасность, развлечения, розничная торговля, послепродажное обслуживание, страхование автомобилей, использование данных третьими сторонами (например, в умном городе) и многое другое.\n\r\n\n\r\n\nИгры: миллиарды игроков и огромные прибыли\n\r\n\nИгровая индустрия уже больше всех остальных медиаотраслей, вместе взятых, и это все еще лишь начало новой эры, как считают в \nBitkraft\n:\n\r\n\n\r\n\n\r\nЕжемесячно по всему миру к игровому сообществу присоединяются миллионы новых игроков. В менее богатых странах востребованы связь и дешевые смартфоны. Новые бизнес-модели наподобие play to earn меняют игровую культуру следующего поколения игроков. Более масштабируемые и быстрые технологии вроде 5G предлагают и новые сценарии использования. Блокчейн и NFT навсегда меняют подходы к монетизации и рынок коллекционирования.\n\r\n\n\r\nВсе эти тенденции в различных отраслях демонстрируют нам, почему потребность в обработке данных в реальном времени заметно растет от квартала к кварталу. Apache Kafka де-факто \nпревратился\n в стандарт для широкомасштабной обработки аналитических и транзакционных потоков данных. Однако очень важно понимать, когда (не) стоит использовать этот инструмент и его экосистему в своих проектах.\n\r\n\n\r\n\nЧем является и чем не является Apache Kafka?\n\r\n\nС Kafka часто возникает недопонимание. К примеру, все еще слишком часто встречаю мнение, что это очередь сообщений. Отчасти причина в том, что некоторые вендоры предлагают Kafka лишь для решения конкретной задачи (вроде передачи данных в озеро или хранилище), чтобы продать свой продукт. Так что, если вкратце, Kafka — это: \n\r\n\n\r\n\nмасштабируемая платформа сообщений реального времени\n, обрабатывающая миллионы сообщений в секунду;\n\r\n\nплатформа потоковой передачи сообщений\n для аналитики больших данных и маленьких объемов транзакционной обработки;\n\r\n\nраспределенное хранилище\n, обеспечивающее настоящее разделение для обработки замедленной обратной связи, с поддержкой различных протоколов соединений и воспроизведением событий в нужном порядке;\n\r\n\nфреймворк \nинтеграции данных\n для потоковой передачи ETL;\n\r\n\nфреймворк \nобработки данных\n для непрерывной обработки stateless- или stateful-потоков.\n\r\n\n\r\n\nТакое сочетание возможностей в единой платформе делает Kafka уникальным (и успешным) инструментом.\n\r\n\nKafka — это НЕ:\n\r\n\n\r\n\nпрокси-сервер для миллионов клиентов\n (вроде мобильных приложений), но существуют Kafka-нативные прокси вроде REST или MQTT;\n\r\n\nплатформа \nуправления API\n, но эти инструменты обычно сопутствуют и используются для создания, управления жизненным циклом или монетизации API Kafka;\n\r\n\nбаза данных\n для сложных запросов и пакетной аналитики, но он подходит для транзакционных запросов и относительно простых агрегаций, особенно с ksqlDB;\n\r\n\nIoT-платформа\n с функциями управления устройствами, но возможна прямая Kafka-нативная интеграция с (некоторыми) IoT-протоколами вроде MQTT или OPC-UA;\n\r\n\nтехнология для приложений строго в реальном времени\n вроде критических для безопасности или детерминистских систем, но это верно и для любого другого фреймворка. Встроенное ПО — другое дело!\n\r\n\n\r\n\nТо есть Kafka дополняет, но не конкурирует с подобными технологиями. Выбирайте для решения задачи правильный инструмент!\n\r\n\nПримеры использования Apache Kafka в связанном мире\n\r\n\nВ этой главе я расскажу о нескольких примерах фантастических историй успеха, когда Kafka комбинировали с другими технологиями, потому что это было разумно и решало задачи бизнеса. Я взял случаи, когда для обработки сквозного потока данных необходим был не только Kafka. \n\r\n\nНе имеет значения, какие новостные источники вы читаете, вы найдете немало успешных историй о том, как с помощью Apache Kafka организовали потоковую передачу в реальном времени для больших объемов аналитических и транзакционных данных от автомобилей, IoT-устройств или игровых приложений на смартфонах. Например:\n\r\n\n\r\n\nAudi\n: платформа для подключения к сети автомобилей, работающая в разных регионах и у разных облачных провайдеров.\n\r\n\nBMW\n: умные заводы для оптимизации цепочек поставок и логистики.\n\r\n\nSolarPower\n: полноценные решения и сервисы на основе солнечной энергии по всему миру.\n\r\n\nRoyal Caribbean\n: развлечения на круизных лайнерах с автономными edge-сервисами и агрегированием в гибридном облаке.\n\r\n\nDisney+ Hotstar\n: мобильный интерактивный медиаконтент, игры и ставки для миллионов пользователей.\n\r\n\n\r\n\nИ многое другое.\n\r\n\nТак в чем же проблема всех этих замечательных историй успеха? Ну, проблемы нет. Однако нужно кое-что пояснить, чтобы было понятно, когда стоит применять потоковую передачу с помощью экосистемы Apache Kafka и чем ее обычно дополняют другие решения.\n\r\n\nКогда стоит использовать Apache Kafka?\n\r\n\nПрежде чем говорить о том, где от Kafka лучше отказаться, давайте разберемся, где его стоит применять, чтобы понимать, как и когда дополнять его другими технологиями по мере необходимости. Я буду описывать реальные примеры. По моему опыту, так будет куда проще понять ценность.\n\r\n\nKafka обрабатывает в реальном времени большие объемы IoT- и мобильных данных\n\r\n\nОбработка огромных объемов в реальном времени — одна из главных особенностей Kafka. Tesla — не просто автопроизводитель, это технологическая компания, которая создает много инновационного и передового ПО. Они предоставляют энергетическую инфраструктуру для автомобилей со своими Tesla Supercharger, вырабатывают электричество из солнечной энергии на своих Gigafactory и многое другое. Важная составляющая их успеха — это обработка и анализ данных от автомобилей, умных электросетей и фабрик, а также интеграция с бэкендом ИТ-сервисов в реальном времени. Tesla \nсоздала\n инфраструктуру платформы данных на основе Kafka «для поддержки миллионов устройств и триллионов точек данных в день». А в 2019-м компания \nпоказала\n впечатляющую историю развития их применения Kafka:\n\r\n\n\r\n\n\r\nНапомню, что Kafka способен делать гораздо больше, чем просто обрабатывать сообщения. Я повторяю это постоянно, и все же слишком многие этого не понимают. Kafka — это слой распределенного хранения, который отделяет производителей от потребителей. Кроме того, Kafka-нативные обработчики вроде Kafka Streams and ksqlDB обеспечивают обработку в реальном времени.\n\r\n\n\r\n\nKafka сопоставляет транзакционные и IoT-данные из MES- и ERP-систем\n\r\n\nМасштабная интеграция данных в реальном временем необходима для аналитики и использования транзакционных систем вроде ERP и MES. Для решения этой задачи ядро потоковой передачи дополняет Kafka Connect и стороннее промежуточное ПО.\n\r\n\nBMW \nиспользует\n критически важные данные из Kafka в edge- (например, на умных фабриках) и в публичных облаках. Kafka обеспечивает разделение, прозрачность и инновационность, а продукты и экспертиза из Confluent добавляет стабильности. Последнее необходимо для успешного производства, потому что каждая минута простоя обходится в целое состояние. Почитайте мою \nстатью\n Apache Kafka as Data Historian – an IIoT / Industry 4.0 Real-Time Data Lake, чтобы понять, как Kafka улучшает общую эффективность оборудования (Overall Equipment Effectiveness, OEE) на производстве.\n\r\n\nBMW оптимизирует свои цепочки поставок в реальном времени. Система предоставляет информацию о нужных запасах физически и в транзакционных системах вроде ERP на основе SAP. Девиз «в нужном месте и в нужное время» крайне важен для многих критических приложений. \nИнтеграция\n между Kafka и SAP необходима для почти половины моих читателей. Kafka лежит в основе не только интеграционных механизмов, но и \nмногих\n транзакционных ERP- и MES-платформ следующего поколения.\n\r\n\nВ корпоративном секторе Kafka интегрируется со всеми не-IoT-системами в edge-, гибридных или мультиоблачных средах\n\r\n\nМногокластерные развертывания на базе нескольких дата-центров Apache Kafka стали скорее нормой, чем исключением. \nЗдесь\n можно почитать о разных сценариях, для которых могут потребоваться многокластерные решения, о реальных примерах со специфическими требованиями и компромиссами, включая восстановление после сбоев, агрегирование для последующего анализа, миграцию в облака, критически важные длительные развертывания и глобальный Kafka.\n\r\n\nПолное разделение разных интерфейсов — уникальное преимущество Kafka \nпо сравнению\n с другими брокерами сообщений, такими как IBM MQ, RabbitMQ и MQTT. Я подробно рассмотрел это в своей \nстатье\n о Domain-driven-архитектуре с Kafka.\n\r\n\nВ отрасли стало привычным модернизировать инфраструктуру и создавать гибридные облачные архитектуры с помощью Apache Kafka.\n\r\n\nОдна из моих любимых историй успеха — история Unity. Эта компания предлагает платформу трехмерного моделирования в реальном времени для игровой индустрии, а также для внедрения функций дополненной и виртуальной реальности в других отраслях. К 2019 году продукты компании уже установили 33 млрд раз, на 3 миллиардах устройств по всему миру. Unity управляет одной из крупнейших сетей монетизации. Они перенесли свою платформу с самоуправляемого Kafka в полностью управляемое Confluent Cloud. Команда проекта выполнила переключение без простоев и потери данных. Почитайте об этом \nв блоге\n Confluent.\n\r\n\nKafka — масштабируемый бэкенд реального времени для мобильных сервисов, игровых платформ и тотализаторов\n\r\n\nОснова инфраструктуры многих игровых и мобильных сервисов — это управление потоком событий. Сюда входит обработка телеметрии, сервисы на основе географического местоположения, платежные сервисы, системы защиты от мошенничества и удержания пользователей, платформы лояльности и многое другое. Почти все инновационные приложения в этой отрасли требуют масштабной обработки данных в реальном времени. Вот несколько примеров:\n\r\n\n\r\n\nСервисы перемещений\n: Uber, Lyft, FREE NOW, Grab, Otonomo, Here Technologies и пр.\n\r\n\nИгровые сервисы\n: Disney+ Hotstar, Sony Playstation, Tencent, Big Fish Games и пр.\n\r\n\nТотализаторы\n: William Hill, Sky Betting и пр.\n\r\n\n\r\n\nПросто взгляните на карьерные разделы сайта любой компании из игровой отрасли или отрасли перемещений. Не все открыто говорят о своем использовании Kafka, но почти все ищут специалистов по этому продукту для разработки и управления своими платформами.\n\r\n\nА эти сценарии использования не менее важны, чем платежные процессы в основной банковской платформе. Крайне важно соблюдать законодательство и не допускать каких-либо потерь данных. Межрегиональные кластеры (например, Kafka-кластер, распределенный между восточным побережьем США, центральной частью и западным побережьем) обеспечивают высокую доступность без простоев и потерь данных в случае аварий.\n\r\n\n\r\n\n\r\n\nАвтомобили, техника или IoT-устройства привязаны к одному брокеру Kafka\n\r\n\nEdge-вычисления с нами надолго. В некоторых случаях требуется разворачивать Kafka-кластер или отдельный Kafka-сервер вне ЦОД. Низкая задержка, экономичность, кибербезопасность или отсутствие интернета — вот причины, из-за которых для работы с Kafka выбирают edge. Вот несколько примеров:\n\r\n\n\r\n\nАвтономный edge\n в логистике для сохранения журналов, информации с датчиков и изображений при отсутствии доступа к интернету (например, когда грузовик в пути или дрон летает вокруг корабля), пока не появится возможность выгрузить все это по сети.\n\r\n\nВзаимодействие Vehicle-to-Everything (V2X) в маленьких локальных ЦОДах\n вроде AWS Outposts (через шлюз наподобие MQTT в случае больших расстояний, большего количества устройств или неустойчивой сети) либо через прямое соединение с Kafka-клиентами для сотен единиц техники, например, на умном производстве.\n\r\n\nАвтономные сервисы перемещений\n наподобие интеграции автомобильной инфраструктуры с играми, ГИС или движками рекомендаций локально обслуживаемых партнерских сервисов (например, следующий «Макдоналдс» будет через 16 километров, вот скидка).\n\r\n\n\r\n\nКруизный оператор Royal Caribbean — прекрасный пример успешного использования Kafka. Компания управляет четырьмя крупнейшими пассажирскими лайнерами в мире. В январе 2021 года в ее флот входило 24 корабля и еще шесть было заказано. Royal Caribbean реализовала один из самых известных \nпримеров\n использования Kafka в граничных сетях. На каждом лайнере развернут локальный кластер, обеспечивающий обработку платежей и данных по программе лояльности, рекомендации о покупках и т.д.\n\r\n\n\r\n\n\r\nЯ уже рассказывал об этом и других примерах использования Kafka в граничных сетях: \nописывал\n такой сценарий, рассказывал об \nархитектуре\n для Kafka и \n5G-развертываниях\n с низкой задержкой на основе Kafka.\n\r\n\n\r\n\n\r\n\n\r\n\nКогда НЕ нужно использовать Apache Kafka?\n\r\n\nНаконец-то мы переходим к тому, что вы так все ждали, верно? Но ведь важно было сначала понять, когда стоит применять Kafka, чтобы легко было объяснить, когда этого делать не следует.\n\r\n\nДоговоримся, что мы будем рассматривать продуктовые сценарии, а не кривые костыли с прямым подключением Kafka ради проверки гипотез. Всегда есть быстрые и грубые способы протестировать что-нибудь, и это замечательно. Но все меняется, когда нужно масштабировать и раскатывать свою инфраструктуру по всему миру, соблюдать законодательство и гарантировать сохранность транзакционных данных. С учетом этого будет легко понять, подходит ли Kafka для определенных сценариев и задач.\n\r\n\nKafka не предназначен для работы строго в реальном времени\n\r\n\nС определением термина «реальное время» не все так просто. Зачастую это лишь маркетинговый термин. Программы реального времени обязаны гарантировать отклик в течение определенного периода времени. Kafka — и все остальные фреймворки, продукты и облачные сервисы, используемые в этом контексте, — относится к приложениям «мягкого» реального времени. А многие IoT-приложения должны работать строго в реальном времени без задержек.\n\r\n\n\r\n\n\r\n«Мягкое» реальное время используется для:\n\r\n\n\r\n\nОбмена сообщениями между приложениями.\n\r\n\nСбора данных из разных источников одним или несколькими потребителями.\n\r\n\nОбработки и сопоставления данных (часто называют потоковой передачей событий или обработкой потока событий).\n\r\n\n\r\n\nЕсли вашему приложению нужна задержка меньше миллисекунды, то Kafka не подходит. Например, системы высокочастотного трейдинга обычно создают на основе специально разработанных коммерческих решений. \n\r\n\nПомните: самой маленькой задержки можно добиться отказом от системы сообщений и простым использованием общей памяти. В гонке за снижением задержки Kafka всегда проигрывает. Однако для журналов аудита и транзакций или для системы хранения риск потери данных важнее задержки, и здесь Kafka выигрывает.\n\r\n\nВ большинстве сценариев в реальном времени требуется «всего лишь» обрабатывать данные в диапазоне от миллисекунды до секунды. В этом случае Kafka подходит идеально. Многие финтех-компании полагаются на него при работе с критически важными транзакционными данными, даже в трейдинге. Еще один хороший \nпример\n потоковой передачи с низкой задержкой с помощью Kafka и облачной 5G-инфраструктуры — это MEC, multi-access edge computing.\n\r\n\nKafka не является детерминистским для встроенных и критически важных для безопасности систем\n\r\n\nЗдесь все понятно и следует из предыдущей главы. Kafka — не детерминистская система, и критически важные приложения не могут использовать ее для управления двигателем автомобиля, кардиостимуляторов или промышленных контроллеров.\n\r\n\nВот несколько примеров, где Kafka НЕЛЬЗЯ использовать:\n\r\n\n\r\n\nКритически важная обработка данных в автомобиле или другой технике. Для этого есть Autosar, MINRA C, ассемблер и другие подобные технологии.\n\r\n\nСвязь по шине CAN между электронными блоками управления.\n\r\n\nРобототехника. Для этого есть C / C++ или другие низкоуровневые языки в сочетании с фреймворками вроде Industrial ROS (Robot Operating System).\n\r\n\nКритически важное машинное обучение или глубокое обучение (например, в автономном вождении).\n\r\n\nСвязь между транспортными средствами (Vehicle-to-Vehicle, V2V). Для этого есть прямое соединение 5G без посредников вроде Kafka.\n\r\n\n\r\n\nПодробнее на эту тему я рассказал в \nстатье\n Apache Kafka is NOT Hard Real-Time BUT Used Everywhere in Automotive and Industrial IoT.\n\r\n\nПодытоживая, связанную с безопасностью обработку данных нужно реализовывать на отдельном низкоуровневом языке и соответствующих решениях. Но не на Kafka! Это верно и для любого другого ПО для взаимодействия ИТ-систем. Поэтому замена Kafka на IBM MQ, Flink, Spark, Snowflake или другой подобный инструмент не поможет.\n\r\n\nKafka НЕ предназначен для плохих сетей\n\r\n\nДля Kafka нужно хорошее, стабильное соединение между клиентами и брокерами. Так что если ваша сеть нестабильна и клиентам нужно все время переподключаться к брокерам, тогда работать с Kafka будет трудно, как и выдерживать уровень обслуживания.\n\r\n\nИз этого правила есть несколько исключений, но вообще используйте технологии, специально разработанные для решения проблемы плохих сетей. Самый известный пример — MQTT. То есть Kafka и MQTT — это друзья, а не враги. Их сочетание обладает огромными возможностями и широко используется во многих отраслях, я написал о нем целую \nсерию статей\n. С помощью MQTT, Kafka и Tensorflow в архитектуре Kappa мы \nсделали\n инфраструктуру для подключения автомобилей, которая обрабатывает 100 000 потоков для прогнозирования в реальном времени.\n\r\n\nKafka НЕ обеспечивает подключение десятков тысяч клиентских приложений\n\r\n\nДругой особенностью, не позволяющей считать Kafka интеграционным решением, является невозможность подключаться к десяткам тысяч клиентов. Если вам нужно сделать инфраструктуру для подключения автомобилей или мобильную игровую платформу (например, для тех же автомобилей или смартфонов), то вы не сможете подключаться к Kafka напрямую. Правильным посредником между тысячами клиентов и Kafka для серверной обработки в реальном времени и интеграции с будущими потребителями в виде озер данных, хранилищ или самописных приложений будет выделенный прокси — HTTP-шлюз или брокер MQTT.\n\r\n\nКакие ограничения по количеству подключений к Kafka? Как это часто бывает, сложно сказать. У меня были заказчики, которые подключались из заводского цеха напрямую через .NET и из клиентов Java Kafka напрямую к облаку с кластером Kafka. Прямые гибридные соединения обычно работают хорошо, если количество машин, участков передачи данных по электросетям, IoT-шлюзов и IoT-устройств измеряется сотнями. А если их больше, то вам нужно решить: а) нужен ли промежуточный прокси или б) разворачивать ли «edge-вычисления» с Kafka или без него для снижения задержки и расходов.\n\r\n\nКогда ВЕРОЯТНО можно использовать Apache Kafka?\n\r\n\nВыше я рассказал о сценариях, когда относительно легко определить, что Kafka просто не обладает нужными возможностями. А теперь рассмотрим менее очевидные случаи, когда на выбор Kafka влияет несколько факторов.\n\r\n\nKafka (обычно) НЕ заменяет другую базу данных\n\r\n\nApache Kafka — это база данных. Он удовлетворяет критериям ACID и применяется в сотнях компаний в критически важных системах. Но чаще всего он не конкурирует с другими базами данных. Kafka — это платформа масштабной потоковой передачи сообщений, их обработки и интеграции в реальном времени без простоев и потерь данных. Из-за этого его часто применяют в качестве центрального потокового интеграционного слоя. А другие базы могут создавать материализованные представления для конкретных сценариев вроде анализа временных рядов в реальном времени, передачи данных в инфраструктуру текстового поиска почти в реальном времени или долгосрочного хранения в озере данных. \n\r\n\nИными словами, когда вас спрашивают, может ли Kafka заменить базу данных, нужно учитывать, что:\n\r\n\n\r\n\nKafka вечно может хранить данные надежно и с высокой доступностью, в соответствии с критериями ACID.\n\r\n\nKafka предлагает дополнительные возможности по работе с архивными данными.\n\r\n\nНативные для Kafka дополнения вроде ksqlDB и Tiered Storage еще больше расширяют его возможности по обработке и долгосрочному хранению сообщений.\n\r\n\nМожно создавать stateful-приложения, работающие с клиентами Kafka (микросервисы, бизнес-приложения) без дополнительных внешних СУБД.\n\r\n\nKafka не заменяет существующие базы данных, хранилища или озера данных вроде MySQL, MongoDB, Elasticsearch, Hadoop, Snowflake, Google BigQuery и т. д.\n\r\n\nKafka и другие базы дополняют друг друга, поэтому выбирайте инструмент в соответствии с задачей. Зачастую из центральной инфраструктуры на основе событий вырастают и обновляются в реальном времени специализированные материализованные представления.\n\r\n\nЕсть дополнительные возможности для двунаправленной pull- и push-интеграции между Kafka и другими базами данных, что позволяет им еще лучше дополнять друг друга.\n\r\n\n\r\n\nПодробнее об использовании Kafka в качестве базы данных рассказано в \nстатье\n Can Apache Kafka replace a database, data warehouse, or data lake?\n\r\n\nKafka (обычно) НЕ обрабатывает большие сообщения\n\r\n\nKafka не предназначен для больших сообщений. Точка.\n\r\n\nТем не менее, появляется все больше проектов, отправляющих и обрабатывающих через Kafka файлы и другие большие нагрузки размером 1 Мб, 10 Мб и даже больше. Дело в том, что Kafka проектировался для работы с большими объемами информации, а это требует больших сообщений. Очень часто приходится с помощью Kafka извлекать и обрабатывать большие файлы из старых систем, прежде чем отправлять их в хранилище.\n\r\n\nОднако не следует все большие сообщения обрабатывать в Kafka. Зачастую лучше применять подходящую систему хранения, а Kafka оставить роль оркестратора. Нередко целесообразнее обмениваться сообщениями на основе ссылок (например, храня файлы в другой системе и отправляя ссылки на них и метаданные).\n\r\n\n\r\n\n\r\nЗнайте о разных шаблонах проектирования и выбирайте для своей задачи правильную технологию. Подробнее о сценариях обработки больших файлов с помощью Kafka читайте в \nэтой\n статье: Handling Large Messages with Apache Kafka (CSV, XML, Image, Video, Audio, Files).\n\r\n\n\r\n\nKafka (обычно) НЕ IoT-шлюз для конечной интеграции промышленных протоколов\n\r\n\nКонечная интеграция с IoT-интерфейсами и мобильными приложениями — дело непростое. Как говорилось выше, Kafka не может подключаться к тысячам клиентов. Однако многие IoT- и мобильные приложения требуют лишь десятки или сотни подключений. В этом случае проще всего воспользоваться одним из Kafka-клиентов, доступных почти для всех существующих языков программирования.\n\r\n\nПредположим, что TCP-соединение с Kafka-клиентом не имеет смысла или невозможно. В таких ситуациях самое популярное решение — REST-прокси в качестве посредника между клиентами и Kafka-кластером. Клиенты взаимодействуют с потоковой платформой через синхронный HTTP(S).\n\r\n\nСценарии\n использования HTTP и API REST с Apache Kafka включают в себя слой управления, слой данных, который производит и потребляет сообщения, автоматизацию и соответствующие DevOps-задачи\n\r\n\nК сожалению, многие IoT-проекты требуют гораздо более сложной интеграции, и я не имею в виду относительно простые интеграции через коннектор MQTT или OPC-UA. К сложностям в промышленных IoT-проектах относится:\n\r\n\n\r\n\nЧасто при автоматизации используют не открытые стандарты, а медленные, небезопасные, не масштабируемые и с закрытым кодом.\n\r\n\nЖизненный цикл продукта очень длинный, десятки лет, без возможности простого изменения или улучшения.\n\r\n\nВ IoT обычно применяют несовместимые протоколы, с закрытым кодом и написанные под конкретного вендора.\n\r\n\nДорогие монолиты с закрытым кодом, не масштабируемые и не дополняемые.\n\r\n\n\r\n\nТаким образом, многие IoT-проекты дополняют Kafka специально разработанной IoT-платформой. Большинство IoT-продуктов и облачных сервисов имеют закрытый код, но предоставляют открытые интерфейсы и архитектуру. Сфера open-source в этой отрасли мала. Отличной альтернативой (в некоторых сценариях) является \nApache PLC4X\n — этот фреймворк интегрируется со многими закрытыми старыми протоколами, такими как Siemens S7, Modbus, Allen Bradley, Beckhoff ADS и другими. Также PLC4X предоставляет коннектор Kafka Connect для нативной и масштабируемой интеграции с Kafka.\n\r\n\nСовременные\n архивные хранилища — открытые и гибкие. В основе многих стратегических проектов IoT-модернизации производств и гибридных облаков лежит потоковая передача событий:\n\r\n\n\r\n\n\r\n\nKafka НЕ блокчейн (но актуален для web3, криптоторговли, NFT, off-chain, сайдчейнов и оракулов)\n\r\n\nKafka — это распределенный журнал фиксаций. Заложенные в него идеи очень похожи на блокчейн, я подробно рассматривал это в \nстатье\n Apache Kafka and Blockchain — Comparison and a Kafka-native Implementation.\n\r\n\nБлокчейн следует использовать ТОЛЬКО в тех случаях, когда необходимо сотрудничество различных недоверенных сторон. Для большинства корпоративных проектов это будет ненужным усложнением. Достаточно распределенного журнала регистраций (Kafka) или защищенной распределенной книги учета (расширенный Kafka).\n\r\n\nУчитывая это, особенно интересно, что я вижу все больше компаний, которые \nиспользуют\n Kafka в торговых криптоплатформах, биржах и NFT-магазинах.\n\r\n\nПодчеркну: на этих платформах Kafka НЕ блокчейн. Блокчейн — это криптовалюты вроде Bitcoin или платформы смарт-контрактов вроде Ethereum, на основе которых люди создают новые распределенные приложения, например, NFT для игровой индустрии и индустрии искусств. Kafka — это потоковая платформа для соединения этих блокчейнов с прочими «ораклами» (не блокчейн-приложениями) наподобие CRM, озер данных, хранилищ и т. д.\n\r\n\n\r\n\n\r\nTokenAnalyst — превосходный \nпример\n использования Kafka для интеграции блокчейн-данных из Bitcoin и Ethereum с их аналитическими инструментами. Kafka Streams предлагает потоковое stateful-приложение для защиты от использования некорректных блоков в последующих агрегирующих вычислениях. К примеру, в TokenAnalyst разработали компонент подтверждения новых блоков, который разрешает ситуации реорганизации с помощью временного удерживания блоков и их передачи только после достижения определенного количества подтверждений (при этом дочерние элементы этих блоков продолжают вычисляться).\n\r\n\nВ некоторых продвинутых сценариях Kafka используют для реализации сайдчейна или off-chain-платформ, когда оригинальные блокчейны недостаточно хорошо масштабируются (блокчейн относят к on-chain-данным). Проблема обработки только однозначной (!) транзакции в секунду характерна не только для Bitcoin. Большинство современных блокчейнов не способны и близко масштабироваться до рабочих нагрузок Kafka в реальном времени. \n\r\n\nВсем, от DAO до самых крупных компаний, необходимо отслеживать состояние блокчейн-инфраструктуры и IoT-компонентов даже в распределенных сетях, чтобы избегать простоев, защищаться от злоумышленников и обеспечивать доступность данных блокчейна. Kafka позволяет предоставлять эти данные заинтересованным сторонам без использования программных агентов, при необходимости масштабируя и обеспечивая отображение информации нужным пользователям до потери узла. Это актуально для передовых web3- и IoT-проектов вроде Helium или более простых, закрытых, распределенных бухгалтерских книг, таких как R3 Corda.\n\r\n\nВ моей недавней \nстатье\n об изменении розничных продаж с появлением торговых сервисов на основе потоков событий и Kafka показано, как розница и игровая индустрия соединяют виртуальный и физический мир. В рознице бизнес-процессы и взаимодействие с заказчиками происходит в реальном времени, вне зависимости от того, чем вы торгуете — одеждой, смартфонами или NFT для коллекционных или видеоигр.\n\r\n\nПодводя итоги, Kafka НЕ…\n\r\n\n…замена вашей любимой базе данных или хранилищу;\n\r\n…работает строго в реальном времени для критически важных встроенных нагрузок;\n\r\n…прокси для тысяч клиентов в плохих сетях;\n\r\n…решение для управления API;\n\r\n…IoT-шлюз;\n\r\n…блокчейн.\n\r\n\nЛегко определить, когда Kafka не подходит для какого-то сценария или требований. Однако его используют во всех отраслях для аналитики и работы с транзакционными потоками. Это стандарт де-факто для потоковой передачи событий. И поэтому Kafka часто комбинируют с другими технологиями и платформами.\n\r\n\nВебинар по Apache Kafka\n\r\n\nВсех, кто дочитал до конца, приглашаем 11 апреля в 11.00 на бесплатный практический вебинар, посвященный работе с Apache Kafka в микросервисном приложении.\n\r\n\nНа вебинаре мы не только разберем теорию по брокерам сообщений Apache Kafka, но и развернем кластер Apache Kafka в облаке и подключим его к микросервисному приложению. \n\r\n\nРегистрация \nздесь\n.\n \n ",
    "tags": [
        "kafka",
        "Apache",
        "Apache Kafka",
        "блокчейн",
        "озеро данных",
        "хранилище данных",
        "база данных",
        "шлюз",
        "прокси",
        "IoT"
    ]
}