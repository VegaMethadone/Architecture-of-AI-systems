{
    "article_id": "727756",
    "article_name": "Настройка Fastlane в React Native",
    "content": "Предисловие\nИдея для статьи зародилась после того, как я потратил кучу времени на настройку \nFastlane\n для своего проекта на \nReact Native\n. Во время настройки, я так и не смог найти публикацию, которая давала бы простую инструкцию по интеграции \nFastlane\n от А до Я. Эта статья должна стать не более чем \nпростой инструкцией\n по базовой настройке Fastlane под обе платформы \nIOS\n и \nAndroid\n.\nЗамечание:\nИнструкция предполагает, что ваше окружение уже готово к работе с React Native проектами и вы имеете установленные homebrew, ruby, xcode, android studio, созданное приложение в Apple Connect / TestFlight, Google Play и уже загруженна хотя бы одна сборка\n.\nСодержание\nнастройка окружения и проекта\nнастройка IOS\nнастройка Android\nЦель \nОдним скриптом загружать новые билды в TestFlight и Google Play.\nНастройка окружения и проекта\nПеред началом установки зависимостей, необходимо создать \nпустой репозиторий\n. Он будет содержать все сертификаты и профили подготовки, необходимые для создания и подписи приложений.\nУстанавливаем Fastlane\nsudo gem install fastlane\nВ корне проекте в Gemfile файл добавляем:\ngem \"fastlane\"\nТакже в корне проекта создаем директорию \nfastlane\n, а внутри создаем файл \nFastfile.\nСледующим шагом, выполняем команду\nfastlane match init\nВо время выполнения команды, нам необходимо будет выбрать \nstorage mode\n \ngit\n, а затем ввести ссылку на ранее созданный репозиторий для сертификатов. Итогом этой команды должен являться файла fastlane/\nMatchfile\n. \nЗамечание:\nЕсли файл не был создан или произошла ошибка, попробуйте установить fastlane с помощью homebrew \nbrew install fastlane\n , затем повторить этот шаг.\n \nНа этом этапе мы обновим .gitignore файл, добавив:\n# Fastlane\n\n**/fastlane/report.xml\n**/fastlane/Preview.html\n**/fastlane/screenshots\n**/fastlane/test_output\n**/fastlane/.env.default\n**/android/app/api.json\nА также, добавим два новых скрипта в package.json:\n\"ios:beta\": \"fastlane ios beta\",\n\"android:beta\": \"fastlane android beta\"\nВсе! C общей настройкой закончили, теперь можно переходить к настройкам IOS и Android. \nНастройка IOS\nВ fastlane/\nFastfile\n добавляем код специально для платформы IOS, который подписывает, собирает и отправляет билд в TestFlight. \nplatform :ios do\n    private_lane :testflight_build do \n      gym(scheme: 'YOUR_SCHEME_NAME', workspace: './ios/YOUR_PROJECT_NAME.xcworkspace')\n    end\n\n    lane :beta do\n      sync_code_signing(type: \"appstore\")   \n      testflight_build\n      upload_to_testflight(username: CredentialsManager::AppfileConfig.try_fetch_value(:apple_id), app_identifier: CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier))\n    end\nend\nЗамечание:\nВ коде необходимо заменить называние схемы и проекта на ваши реальные, их можно легко найти в Xcode.\nСоздаем новый файл в директории fastlane/\nAppfile\n, выглядеть он должен так:\nitc_team_id \"000000000\" # (iTunes Connect) team ID  \napple_id \"yourappleid@gmail.com\" \napp_identifier \"com.mobile.app\"\nЗамечание: На сколько я понял, itc_team_id необходим только если у вас есть несколько команд в одном акаунте на Apple Connect, если это не так попробуйте вовсе удалить itc_team_id из этого файла.\nitc_team_id не так просто найти)) Но вот один из вариантов как это сделать: \nавторизируемся на сайте \nhttps://appstoreconnect.apple.com/\n  \nзатем переходим на \nhttps://appstoreconnect.apple.com/WebObjects/iTunesConnect.woa/ra/user/detail\nЗдесь вы получите JSON файл в котором, по полю \"\nname\n\" необходимо найти нужную вам команду (та в которой у вас создано ваше приложение),  ее \ncontentProviderId\n и нужно подставить в \nitc_team_id\n. \nС остальными id в этом файле все понятно. Я думаю, не стоит объяснять как их достать.\nТеперь необходимо произвести изменения в fastlane/\nMatchfile\n:\ngit_url(\"https://gitlab.com/team/mobile-app/mobile-app-certificates\")\n\nstorage_mode(\"git\")\n\ntype(\"development\")\n\napp_identifier([\"com.mobile.app\"]) \nusername(\"yourappleid@gmail.com\") # Apple id\nteam_id(\"AAA0AA000A\")\nteam_id\n можно найти если на сайте \nhttps://appstoreconnect.apple.com/\n  перейти в настройки (редактирование) профиля,  он будет подписан как \nID команды\nСоздаем последний файл fastlane/\n.env.default\n:\nFASTLANE_USER=yourappleid@gmail.com\nFASTLANE_PASSWORD=yourappleIdPassword\nFASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD=application-specific-password\nc FASTLANE_USER и FASTLANE_PASSWORD все понятно - это ваши креды от apple connect. А вот с FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD интереснее:\nпереходим на \nhttps://appleid.apple.com/account/manage\n \nавторизируемся и переходим в раздел «Пароли приложений»\nжмем на плюс и вводим\n id\n \nприложения \nиз Apple Connect\nнас могут попросить ввести пароль от учетной записи, затем там же в модальном появится пароль, \nскопируйте его. \nЭто и будет FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD\nПоздравляю! Базовая настройка fastlane для ios закончена. Можем проверить это, выполнив скрипт\nyarn ios:beta\nЗамечание:\nСкрипт может попросить придумать и ввести ключевую фразу для Match storage, а также ввести какие либо другие данные для различных подтверждений - сделайте это.\nНастройка Android\nПриступаем к настройке Fastlane под Android. Для начала добавляем код для платформы Android (код добавляем ниже уже написанного) в fastlane/\nFastfile\n:\nplatform :android do\n    lane :beta do\n      keystore_password = ENV['KEYSTORE_PASSWORD']\n      key_password = ENV['KEY_PASSWORD']\n      key_alias = ENV['KEY_ALIAS']\n\n      releaseFilePath = File.join(Dir.pwd, \"../android/app\", \"release.keystore\")\n\n      gradle(task: 'clean', project_dir: 'android/')\n\n      gradle(\n        task: 'bundle',\n        project_dir: 'android/',\n        build_type: 'Release',\n        print_command: false,\n        properties: {\n          \"android.injected.signing.store.file\" => releaseFilePath,\n          \"android.injected.signing.store.password\" => keystore_password,\n          \"android.injected.signing.key.alias\" => key_alias,\n          \"android.injected.signing.key.password\" => key_password,\n        }\n      )\n      upload_to_play_store(\n        track: 'internal',\n        release_status: 'draft'\n      )\n      end\nend\nЭтот код сначала выполняет \ngrable clean\n, а затем собирает и наконец отправляет билд в Google Play, как билд для внутреннего тестирования. \nДобавим несколько переменных в fastlane/\n.env.default\n:\nKEYSTORE_PASSWORD=your_keystore_password\nKEY_ALIAS=your_alias\nKEY_PASSWORD=your_key_password\nKEY_PASSWORD, KEYSTORE_PASSWORD и KEY_ALIAS - вы указываете когда создаете свой release.keystore файл, он нужен для того чтобы вы могли подписывать и создавать release сборку.\nПишем еще пару строк кода в fastlane/\nAppfile\njson_key_file \"android/app/api.json\"\npackage_name \"com.my_mobile_app\"\nC package_name понятно, это android applicationId. А вот чтобы нам получить api.json, придется поднапрячься и выполнить следующую инструкцию:\nОткройте консоль Google Play\n Нажмите \nAccount Details\n и обратите внимание на указанный там \nDeveloper Account ID\nНажмите \nSetup\n → \nAPI access\n Нажмите кнопку \nCreate new service account\n Перейдите по ссылке \nGoogle Cloud Platform\n в диалоговом окне, которое откроет новую вкладку/окно\nНажмите кнопку \nCREATE SERVICE ACCOUNT\n в верхней части \nGoogle Cloud Platform Console\nУбедитесь, что вы находитесь в правильном проекте \nGoogle Cloud Platform Console\n, найдя \nDeveloper Account ID\n из 2-го пункта, в светло-сером тексте, предшествующем .iam.gserviceaccount.com. Если нет, откройте средство выбора на верхней панели навигации и найдите тот, который содержит этот \nID\nУкажите \nService account name\n и нажмите \nCreate\n.\nНажмите \nSelect a role\n, затем найдите и выберите \nService Account User\n и продолжите.\nНажмите кнопку \nDone\nЩелкните на кнопку троиточие напротив только что созданной учетной записи\nВыберите \nManage keys\nНажмите \nADD KEY\n -> \nCreate New Key\nУбедитесь, что в качестве типа ключа выбран \nJSON\n, и нажмите \nCREATE\n.\nСохраните файл в проекте, в директории \nandroid/app\n под именем \napi.json\n.\nВернитесь на вкладку \nGoogle Play Console\n и нажмите \nDONE\n, чтобы закрыть диалоговое окно.\nНажмите \nGrant Access\n для недавно добавленной учетной записи в нижней части экрана (возможно, вам придется нажать \nRefresh service accounts\n, прежде чем она появится)\nВыберите разрешения, которые вы хотели бы иметь для этой учетной записи. Мы рекомендуем \nAdmin\n (все разрешения), но вы можете вручную установить все флажки и не включать некоторые разрешения Releases, такие как Release to production\nНажмите \nInvite user\n, чтобы закончить\nНа этом настройка под Android окончена! Теперь мы можем выполнить скрипт\n \nyarn android:beta\nОн соберет и отправит билд в Google Play, на внутреннее тестирование.\nИтоги\nМы настроили Fastlane под две платформы IOS и Android в React Native проекте, и теперь можем загружать билды в TestFlight и Google Play с помощью одного скрипта! \nПо большому счету, такая настройка должна работать и на Flutter, потому что представляет из себя простую последовательную настройку под IOS и Android, только в одной директории. \nДальнейшими шагами будет являться настройка автоматического инкриминирования версии билда. Это делается нет так сложно, с помощью \nfastlane\n плагина \nversioning.\n Еще неплохо было бы, настроить ci/cd, например, в gitlab. \nЗамечание:\nЭто мой первый опыт в написании статей. Надеюсь вы нашли ее полезной и она сэкономит вам кучу времени!\n \n ",
    "tags": [
        "react native",
        "fastlane",
        "ios",
        "android",
        "javascript",
        "flutter"
    ]
}