{
    "article_id": "728840",
    "article_name": "Как создать множество документов на основе единого шаблона при помощи скрипта внутри гугл таблицы",
    "content": "Иногда бывает необходимо создать множество повторяющихся документов, которые отличаются лишь номером, датой и ещё парой текстовых строк. Очень грустно тратить на их создание своё время - ведь требуется совершить множество одинаково повторяющихся действий. Ещё можно понять затраты времени на создание 5 документов, но если их надо создать, например 500 штук?\nА ещё эта задача может усложнится за счёт необходимости вставки каких либо данных, которые надо сначала найти в интернете. Например, вставлять данные о погоде на дату создания документа.\nК счастью, гугл таблицы могут упростить процесс создания однотипных копий с помощью шаблона. В этой статье покажу как можно создать неограниченное число копий на основе одного шаблона с помощью гугл скрипта внутри гугл таблицы.\nСоздайте шаблон для вашего документа\nПервым шагом является создание шаблона. Пусть образцом для этой статьи станет протокол сварки. Его можно создать заново или перенести в гугл таблицы. \nВот ссылка на этот пример.\nШаблон протокола на одну страницу А4. Красным выделены поля, которые надо изменять\nКрасным выделены поля, которые надо изменять в процессе создания. \nДаты были заданы заранее, как и их порядковые номера. Даты для работы скрипта надо записать в виде массива:\nconst values = [\"2022-12-21\", \"2022-12-21\", \"2022-12-21\", \"2022-12-21\", \"2022-12-21\", \"2022-12-21\", \"2022-12-22\", \"2022-12-22\"];\nДля столбца из дат можно сделать это, например, через макросы в Notepad++:\n(знаете способ лучше - напишите в комментарии к статье)\nЗапись макроса и его дальнейший запуск\nНа гифке показано как сделать запись макроса в Notepad++ и его дальнейший запуск до конца файла, для того чтобы сделать из обычного столбца дат массив в гугл скриптах. \nГугл скрипты в помощь\nGoogle Apps Script — это простой язык сценариев, который использует синтаксис JavaScript.\nДля получения погоды (а это одно из полей, которые требует протокол) можно воспользоваться бесплатным \nFree Weather API\n, которое даже не требует получения ключа для работы с ним. Координаты местности задаются через параметры \nlatitude=58.08&longitude=55.76\n:\nfunction temperature(date) { //получаем погоду\n    // date = \"2022-10-04\"\n    // console.log(`temperature. date = ${date}`)\n    const url = `https://archive-api.open-meteo.com/v1/archive?latitude=58.08&longitude=55.76&start_date=${date}&end_date=${date}&timezone=Asia%2FYekaterinburg&daily=temperature_2m_mean,precipitation_sum,windspeed_10m_max`\n    CacheServis(url);\n    try {\n        const response = UrlFetchApp.fetch(url)\n        const json = JSON.parse(response.getContentText());\n        const temperature_2m_mean = json.daily.temperature_2m_mean[0]\n        // console.log(`Погода по координатам на ${date}: ${temperature_2m_mean}°C.`)\n        const precipitation_sum = json.daily.precipitation_sum[0]\n        // console.log(`Погода по координатам на ${date}: ${precipitation_sum} мм.`)\n        const windspeed_10m_max = json.daily.windspeed_10m_max[0]\n        // console.log(`Погода по координатам на ${date}: ${windspeed_10m_max} км/ч.`)\n        // console.log(`Погода по координатам на ${date}: ${temperature_2m_mean}°C, ${precipitation_sum} мм осадков, ветер ${windspeed_10m_max} км/ч.`)\n        return `${temperature_2m_mean}°C\\n${precipitation_sum} мм осадков\\nветер ${windspeed_10m_max} км/ч`\n    } catch (error) {\n        console.log(`temperature. Ошибка на ${date}: ${error}.`)\n        return \"\"\n    }\n}\nПоскольку даты повторяются пришлось воспользоваться сервисом кеширования, для того чтобы сократить время работы этой погодной функции:\n\nfunction CacheServis(url) { //кэширование результата запроса по url\n    var cache = CacheService.getScriptCache();\n    var cached = cache.get(url);\n    if (cached != null) {\n        // Logger.log(\"CacheServis.\\nУже было записано для \" + url);\n        return cached;\n    }\n    try {\n        var result = UrlFetchApp.fetch(url);\n    } catch (error) {\n        Logger.log(\"CacheServis.\\nОшибка обращения при кэшировании по url \" + url + \"\\n\\n\");\n        return \"\"\n    }\n    var contents = result.getContentText();\n    cache.put(url, contents, 21600); // cache for 6 hours\n    Logger.log(\"CacheServis.\\nЗаписали по новой для \" + url);\n    return contents;\n}\nДалее самая важная часть гугл скрипта - создание множества листов на основе одного шаблона:\nfunction index() {\n    var startTime = new Date();\n\n    const values = [\"2022-12-21\", \"2022-12-21\", \"2022-12-21\", \"2022-12-21\", \"2022-12-21\", \"2022-12-21\", \"2022-12-22\", \"2022-12-22\"];\n    \n    let n = 0\n    let time = 7;\n\n    values.forEach((date, index) => {\n        if (index === 0 || date !== values[index - 1]) {\n            time = 7;\n        } else {\n            time += 1;\n        }\n        n += 1\n        console.log(`Выполняю копирование №${n} для ${date}.`)\n        duplicate(date, n, time);\n\n    var endTime = new Date();\n    var duration = (endTime - startTime) / 60000; \n    Logger.log(\"Время выполнения скрипта: \" + duration.toFixed(2) + \" минут\");\n    });\n}\nИ сам код, который создаёт дубликаты вкладок и меняет их содержимое:\nfunction duplicate(date, n, time) {\n\n    var ss = SpreadsheetApp.getActiveSpreadsheet();\n    var lastTabName = ss.getSheets().pop().getSheetName(); \n    var sheet = ss.getSheetByName('Шаблон').copyTo(ss);\n\n    sheet.setName(n);\n    sheet.getRange(\"B2\").setValue(temperature(date));\n    sheet.getRange(\"B5\").setValue(n);\n    sheet.getRange(\"B33\").setValue(date);\n    sheet.getRange(\"B34\").setValue(date);\n    sheet.getRange(\"C33\").setValue(`${time}:${Math.floor(Math.random() * 3) + 1}:00`);\n    sheet.getRange(\"C34\").setValue(`${time+1}:${Math.floor(Math.random() * 6) + 4}:00`);\n\n    // ss.setActiveSheet(sheet);\n}\nЯ знаю что этот код написан не самым оптимальным образом и вряд ли стоит рассчитывать на скорость работы, но этот код может за 6 бесплатных минут работы гугл скрипта (а именно такое ограничение любого гугл аккаунта), создать около 300 дубликатов вкладки. А ещё обращение к внешнему сервису за погодой сильно замедляет его работу.\nКак пользоваться?\nДля того чтобы запустить этот скрипт из гугл таблицы и предоставить все необходимые разрешения для его работы надо выполнить несколько шагов:\nШаг 1. \nОткройте таблицу Google \nПротоколы_шаблон и скрипт\n:\nВойдите в свою учетную запись Google и откройте электронную таблицу, содержащую этот скрипт.\nШаг 2. Создайте собственную копию этой гугл таблицы примера:\nНажмите на меню «Файл», затем выберите «Создать копию...».\nВ окне «Создать копию» введите имя для своей копии электронной таблицы и выберите место для нее.\nНажмите «ОК», чтобы создать копию.\nВаша новая копия электронной таблицы откроется в новой вкладке, теперь вы можете начать работать с ней.\nВсе данные и форматирование исходной электронной таблицы будут перенесены в новую копию.\nЕсли вы сделали копию общей электронной таблицы, у вас будут свои собственные отдельные данные, и вы не испортите данные исходной электронной таблицы, которой с вами поделились.\nШаг 3. Откройте редактор в вашей таблице скриптов:\nЩелкните меню «Расширения», затем выберите «Apps Script».\nЭто откроет редактор скриптов в новом окне.\nШаг 4. Запустите скрипт:\nВ редакторе сценариев выберете вкладку \nreplication\n, а в ней функцию \nindex\n и щелкните кнопку «Выполнить».\nВам потребуется авторизовать сценарий, нажав «Просмотреть разрешения», а затем нажав «Разрешить», чтобы предоставить сценарию разрешение на доступ к информации вашей учетной записи для того, чтобы начать использовать этот скрипт. Вы в любое время можете посмотреть список выданных вами\n \nразрешений на специальной странице\n и в один клик их отозвать.  \nШаг 5. Проверьте результат:\nЕсли сценарий выполняется успешно, выходные данные функции будут отображаться на вкладке «Журнал выполнения» в нижней части окна редактора сценариев.\nВыполнение работы скрипта\nТакже во время работы скрипта вы можете открыть таблицу и наблюдать как появляются новые вкладки.\nВот и всё!\n Следуя этим простым шагам, вы можете запустить этот гугл скрипт из своей электронной таблицы и убедиться, что всё работает. После этого можно скачать готовую книгу как файл Экселя или pdf и передать её в дальнейшую работу.\nВновь созданные вкладки\nДополнительный шаг.\n При помощи функции \ndeleteRedundantSheets\n можно удалить все автоматически созданные листы, для того чтобы подготовить этот шаблон уже с другими параметрами.\nЧто в итоге\nИспользование связки гугл таблица + гугл скрипт для создания однотипных документов на основе единого шаблона является действенным способом автоматизации создания документов. \nЭтот процесс поможет сэкономить время и повысить производительность. С помощью пошагового руководства, представленного в этой статье, вы сможете легко настроить этот процесс самостоятельно, используя связку гугл таблица + гугл скрипт. \nНастраивая свои шаблоны и сценарии в соответствии со своими потребностями, вы сможете создавать свои собственные профессионально выглядящие документы. \nПосле того, как все будет работать хорошо, вы сможете воспользоваться преимуществами оптимизированного процесса создания документов и сосредоточиться на самом важном — легком и эффективном достижении ваших целей.\nАвтор: \nМихаил Шардин\n,\n14 апреля 2023 г.\n \n ",
    "tags": [
        "шаблон",
        "документ",
        "гугл скрипт",
        "таблицы"
    ]
}