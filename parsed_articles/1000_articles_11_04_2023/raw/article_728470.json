{
    "article_id": "728470",
    "article_name": "Сервер для лампочки",
    "content": "Всем здрям! Хочу поделиться своей реализацией «умного» (на самом деле очень «тупого» но практичного) освещения.\nДавным-давно, \nв тридесятом царстве\n, делал в жилище ремонт, и по задумке исключил из обстановки люстру. Вместо нее прицепил 10 метров светодиодной ленты под потолком по длинным стенам (по 5 метров на каждую). Пользовался, радовался, но всё не выходила из головы мысль, что лентой можно управлять не только при помощи аналогового выключателя на стене. Так шли годы, сменялись ленты на более яркие и блоки питания на более мощные, а по управлению ничего не менялось.\n Отдельное отступление по поводу «умного дома».\nДо сих пор не могу придумать реального применения системы «умный дом» в условиях квартиры. Если в отдельном частном доме еще более понятно (управление отоплением, поливом, светом на участке, датчики температуры и прочее) , но в квартире не вижу смысла городить что то сложнее умной подсветки в отдельно взятом уголке. Ну или какие либо датчики температуры (что бы просто посмотреть что ЖКХ не справляются, и почему тебе дома холодно), или датчики затопления (полезно конечно, но только для одной этой функции городить что то не вижу смысла, если нет какого то комплекса).  \n И вот однажды руки добрались до известного китайского магазина, где были закуплены модули NodeMCU на базе ESP8266, которые провалялись после получения еще с годик в долгом ящике. Сразу оговорюсь, автор не радиоэлектронщик, не программист, а обычный аникейщик-сисадмин. Поэтому чтобы сотворить что-либо требуется некоторое усилие, энтузиазм и свободное на изучение темы время.\nИ вот это время однажды наступило. Обрисовал на клочке бумаги задачу для себя, прикинул паяльник к носу, и собственно сотворил.\nИтак задача. Управление освещением в одной отдельно взятой комнате через Wi-Fi с любого устройства в домашней сети, без сторонних сервисов, интернета, отдельных приложений и заморочек. Для начала. Плюсом добавить управление с инфракрасного пульта.\nС моими скудными познаниями в программировании Ардуино и ESP, взялся за задачу начав с замечательной программы Flprog, нарисовав в ней WEB-интерфейс для непосредственного управления светом через браузер.\nСкриншот интерфейса.\nТут все просто. Отображение уровня яркости по шкале от 0 до 255 (переменная byte для ШИМ), увеличение/уменьшение яркости c шагом 10 единиц. Кнопка активации «заката» - плавное уменьшение яркости в течении приблизительно 7-ми минут (запас для гигиенических процедур, и укладывания себя в постель). Кнопка «рассвета» - плавное нарастание яркости в течении 20-ти минут (собственно основное предназначение управление светом, функция «Будильник-рассвета»).  И кнопка «ночное освещение» - активирует яркость света приблизительно на 10% от полной мощности (чтобы включать ночью сходить до холодильника/санузла, не выжигая при этом себе глаза), светит около 3-х минут и гаснет (как раз хватает на исполнение своих потребностей).\nСобственно интерфейс и управление через него готово в Flprog, переходим в ArduinoIDE для более тонкой настройки и добавлению функций управления через HTTP.  \nПоскольку одной из задач была универсальность управления с любого устройства без заморочек, был выбран именно HTTP, просто, надёжно, быстро. Можно управлять как просто через адресную строку бразузера на любом доступном устройстве, так и через команды из Терминала Linux/Командную строку Windows (а это уже путь к какой-никакой автоматизации).\n Да, конечно, код Сгенерированный Flprog громоздок, избыточен, но главное разбираться с написанием собственного интерфейса в ArduinoIDE не было ни желания, ни надобности.\nПоэтому просто взял сгенерированную основу, и добавил несколько функций HTTP сервера для непосредственного управления без использования WEB-морды.\nВесь сгенерированный код выкладывать не вижу смысла, ибо много строк и малоинформативно. Выложу только свои кривые наработки.\nПеременные:\n bool _gtv1 = 0; //статус ручного управления\n\nbyte _gtv2 = 255; //Уровень яркости\n\nbool _gtv3 = 0; //Включить рассвет\n\nbool _gtv4 = 0; //включить закат\n\nbool _gtv5 = 0; //ночное освещение\n\nint timerManage =0;\n\nint valueGet =0;\n\nuint32_t tmr1;\n\nuint32_t tmr2;\nКоманды GET для активации функий:\nESPControllerWifi_tspWebServer.on(\"/commands\", runcommand);\n//вызов функций через GET из сети\n\nESPControllerWifi_tspWebServer.on(\"/manual\", ManualValue);\n//вызов функций через GET из сети\nДобавленные функции:\nvoid rise(){ //Активация рассвета\n\n  if (_gtv3==true && _gtv1==true){\n\n    if (millis()-tmr1 > 5000){\n\n      tmr1=millis();\n\n      if (_gtv2<255) {\n\n        _gtv2++;\n\n      }\n\n      else {\n\n        timerManage =0;\n\n        _gtv3=false;\n\n        _gtv1=false;\n\n      }\n\n    }\n\n  }\n\n} \n\nvoid getsleep(){ //Активация заката\n\n  if (_gtv4==true && _gtv1==true){\n\n    if (millis()-tmr2 > 2000){\n\n      tmr2=millis();\n\n      if (_gtv2>2) {\n\n        _gtv2--;\n\n      }\n\n      else {\n\n        _gtv2=0;   \n\n        _gtv4=false;\n\n      }\n\n    }\n\n  }\n\n} \n\nvoid nightlight(){ //Активация ночного освещения\n\n  if (_gtv5==true && _gtv1==true){\n\n    _gtv2=50;\n\n    if (millis()-tmr2 > 1000){\n\n      tmr2=millis();\n\n      timerManage++;\n\n      if (timerManage>180){\n\n      timerManage=0;\n\n      _gtv5=false;\n\n      _gtv2=0;//  \n\n      }\n\n    }\n\n  }\n\n} \n\nvoid runcommand(){ //Приём команд  \n\nString com = ESPControllerWifi_tspWebServer.arg(\"com\");\n\n  if (com == \"rise\") {\n\n    _gtv3= true;\n\n    ESPControllerWifi_tspWebServer.send(200, \"text/plain\", \"rise\");\n\n  } \n\n  if (com == \"sleep\") {\n\n    _gtv4= true;\n\n    ESPControllerWifi_tspWebServer.send(200, \"text/plain\", \"sleep\");\n\n  } \n\n  if (com == \"light\") {\n\n    _gtv5= true;\n\n    ESPControllerWifi_tspWebServer.send(200, \"text/plain\", \"light\");\n\n  } \n\n  if (com == \"manon\") {\n\n    _gtv1= true;\n\n    ESPControllerWifi_tspWebServer.send(200, \"text/plain\", \"manual on\");\n\n  } \n\n  if (com == \"manoff\") {\n\n    _gtv1= false;\n\n    ESPControllerWifi_tspWebServer.send(200, \"text/plain\", \"manual off\");\n\n  } \n\n  if (com == \"reset\") {\n\n    _gtv3 = false;\n\n    _gtv4 = false;\n\n    _gtv5 = false;\n\n    ESPControllerWifi_tspWebServer.send(200, \"text/plain\", \"reset all task\");\n\n  } \n\n  } \n\n void ManualValue() { //Прием команд для выставления уровня яркости  \n\nString valueHands = ESPControllerWifi_tspWebServer.arg(\"value\");\n\n  valueGet = valueHands.toInt();\n\n  if (valueGet < 1) {\n\n    _gtv2 = 0; //\n\n     ESPControllerWifi_tspWebServer.send(200, \"text/plain\", \"min\");\n\n  }\n\n    if (valueGet > 254) {\n\n    _gtv2 = 255;\n\n     ESPControllerWifi_tspWebServer.send(200, \"text/plain\", \"max\");\n\n    }\n\n    if ((valueGet > 0) && (valueGet <255)) {\n\n    _gtv2 = valueHands.toInt();\n\n    ESPControllerWifi_tspWebServer.send(200, \"text/plain\", valueHands);\n\n  }\n\n }\n У AlexGyver подсмотрел как работать с millis и ШИМ, а так же об управлении МOSFETами и реле. А так же плавным управлением яркостью светодиодов.\n Поигрался со встроенным на плате светодиодом. Дальше переходим к электронной части.\nТут пришлось покурить мануалы, гайды, даташиты и прочую литературу и видосики.\nОднозначно решил что у платы управления будет два режима. Первый — это прямая подача напряжения с блока питания на светодиодную ленту. Дабы не напрягать лишний раз мосфеты. И второй режим собственно управление через ШИМ. Для этого установленно переключающее реле на одну из ног NodeMCU.\nРеле и мосфеты удачно нашлись в стареньком списанном ИБП  IPPON Back Power Pro 600.\nАга, вот этот парень.\nОдин мосфет на управление реле. И два мосфета параллельно на управление лентой (хоть в даташите и было указано что они способны выдерживать до 10А при управляющем напряжении 3,3V, на всякий случай перестраховался). Потребление ленты — 8А. То есть два 5-и метровых отрезка по 4А. Изначально хотел на каждый отрезок по своему отдельному мосфету, но потом забил на это, поскольку даже в голову не приходило зачем мне это может понадобиться. Мы же делаем практично, а не красиво. Поэтому просто запараллелил (заранее скажу, мосфеты не греются совершенно. Даже не тёплые).\nДополнительно на плате вывел контакты для подключения ИК-приёмника. Это так, на будущее, пока что нет даже пульта с которого планируется управление. Потом собираюсь приобрести какой нибудь ИК-пульт-брелок. Но кроме функции активации ночного освещения, пока что не могу придумать более широкое его применение.\n Плюс парочка резисторов, клемников и текстолит.  \nС ЛУТом у меня всегда были не лады, да и схема сейчас не такая уж замороченая, чтобы заморачиваться еще больше, поэтому рисуем лаковым маркером. Сверлим, травим в растворе перекиси водорода, лимонной кислоты и поваренной соли. Лудим и запаиваем.\nНесколько фоток процесса и результата:\n (и при первом же включении я спалил стабилизатор напряжения и преобразователь ch340g на плате NodeMCU, поскольку плата оказалась не способна принимать в качестве питания 12V, как было указано в на странице продавца. Поэтому на плату был припаян еще понижающий преобразователь на 3,3V для питания ESP)\n Впихиваем всё это чудо в коробку с блоком питания, и наслаждаемся своим успехом.\nФото коробки:\nОсновная самая сложная часть окончена. Играемся с режимами, выделываемся перед гостями.\nЗапросы get\nhttp://ip/commands?com=rise //активация рассвета \nhttp://ip/commands?com=sleep //активация заката \nhttp://ip/commands?com=light //активация ночного режима\n http://ip/commands?com=manon //активация режима управления \nhttp://ip/commands?com=manoff //деактивация режима управления \nhttp://ip/commands?com=reset //перезагрузка ESP \nhttp://ip/manual?value=0..255 //установка уровня яркости\nСразу после включения (а включение/выключение осталось прежним, аналоговым, через банальный выключатель на стене) управление деактивировано. Реле стоит в положении прямой подачи тока на светодиодную ленту. Режим управления включается либо вручную по надобности, либо при активации заката. (лёгкий щелчок реле, как побочный бонус, сигнализирует о том, что пора бы уже баиньки укладываться). Выключается управление так же вручную, либо после завершения режима рассвета. Собственно при выходе из дома мы просто щелкаем выключателем и обесточиваем всю схему, ибо зачем оно мне нужно если меня нет дома. А удаленное управление я вижу как бессмысленным, так и небезопасным в виду моей паранойи и на коленке собранной схемы .\nИтог: Закат\nИтог: Рассвет\nТеперь об автоматизации. Собственно возвращаемся к заголовку и читаем «Сервер для лампочки».  \nДа, ESP, сам себе вполне сервер, но использоваться будет исключительно как управляемое устройство. Управлять мы будем уже вручную либо автоматически с других устройств в сети.\nИ поскольку у нас есть «рассветный» режим, было бы неплохо к нему прикрутить и будильник. Давно вынашивал эту идею. Но не знал как лучше всего реализовать. У того же AlexGyver было видео с созданием подобной лампы из сантеха и Ардуино, но то был просто светильник. Но раз \nумный\n управляемый свет уже есть, то и работать мы будем с ним, не прибегая к отдельным девайсам. Добавим только звуковой будильник. И чтобы играл не абы что, а любимую интернет радиостанцию. Собственно исходя из этой хотелки и вырос отдельный сервер.\nИзначально Сервер представлял собой старенький планшет, с установленными на нём MacroDroid и PocketBell (планшет с MarcoDroid и сейчас иногда используется для активации ночного режима, вывел на главный экран кнопку кидающую GET запрос на ESP), но мне показалось это слишком усложненным и костыльным. Во-первых, это нужно качать приложения и настраивать каждое по отдельности. Во-вторых, просто неудобно и не отвечает требованиям универсальности.\nПоэтому под сервер выделяем отдельную железку и прячем с глаз долой.\nА под рукой оказался старенький тонкий клиент HP t510. \nHP Thin Client T510\nС него были сняты все лишние корпусные пластиковые детали, так он стал даже симпатичнее на мой взгляд. Вместо установленного там накопителя IDE (который объемом аж целый Гигабайт!!!) был установлен маленький SSD объемом 8 Гигабайт (когда то давно заказывал несколько штук), благо в тонком клиенте разъем SATA присутствует. С помощью смекалки и пассатижей впихиваем накопитель в корпус, и вот с этим уже можно работать.  \nHidden text\nВешаем этот девайс за монитором и на него же вешаем колонки. В качестве колонок использована неисправная Bluetooth колонка, из которой была выкинута вся электроника и вместо неё установлена плата усилителя с питанием от USB. (собственно силы на написание этой статьи нашлись после комментария под статьёй о переделке колонки \nhttps://habr.com/ru/post/724440/\n. Спасибо \nsergey-antonov\n ).\nФоток процесса к сожалению не делал, поэтому только фото конечного результата.\nВид \"сервера\":\nУстанавливаем на это чудо Debian 11 без GUI (работаем с ним через SSH), устанавливаем MPD и MPC (и забиваем адрес любимой радиостанции)\nДобавляем радиостанцию в MPC:\nmpc add https://radiorecord.hostingradio.ru/rmx96.aacp \nИ пишем несколько простеньких Bash скриптов (что полностью удовлетворяет условию универсальности.\nHidden text\nБудильник: \n #!/bin/bash mpc volume 1 //устанавливаем громкость плеера на минимум \n\nmpc play //включаем проигрывание  \n\nwget http://192.168.10.103/commands?com=rise -O /dev/null //кидаем команду на активацию рассвета \n\nsleep 600  for vol in 5 10 15 20 25 // потихоньку прибавляем громкости музыке   \n\n   do        \n\n     sleep 30       \n\n      mpc volume $vol\n\n   done \n Ложимся спать: \n#!/bin/bash  wget http://192.168.10.103/commands?com=manon -O /dev/null \n\nsleep 5 \n\nwget http://192.168.10.103/commands?com=sleep -O /dev/null  \nВыключаемся (и двигаем на работу):\n #!/bin/bash  \n\n\n/sbin/shutdown now  \nНастраиваем Cron\n0 6 * * 1-5 /usr/rise.sh \n40 6 * * 1-5 /usr/shut.sh \n0 9 * * 6,0 /usr/rise.sh  \n30 21 * * 0-4 /usr/sleep.sh \n15 23 * * 5-6 /usr/sleep.sh\nСобственно вот и всё. Теперь наслаждаемся тёплым рассветом и приятной музыкой в холодные зимние утра. И еще больше понтуемся перед гостями. И получаем чувство удовлетворения от успеха в начинаниях создания «умного дома» (главное что бы на этом всё и не закончилось).\nВсем спасибо за прочтение, комментируйте, критикуйте!\n \n ",
    "tags": [
        "esp8266",
        "arduino",
        "умныйдом",
        "умный дом",
        "освещение",
        "автоматизация",
        "linux"
    ]
}