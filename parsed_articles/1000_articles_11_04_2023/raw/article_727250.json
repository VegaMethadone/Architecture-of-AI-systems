{
    "article_id": "727250",
    "article_name": "Оценка производительности 1С + Postgres Pro при изменении различных параметров конфигурационного файла postgresql.conf",
    "content": "Прошлый 2022 год заставил много компаний пересмотреть свои предпочтения в выборе программного обеспечения. Все чаще встречаются кейсы, когда для работы 1С используется СУБД PostgreSQL, а вместо Windows Server используется Linux ОС.\nЦелью данной статьи является изучение в 2023 году производительности системы 1С в среде Hyper-V (ОС Windows Server 2019) во взаимодействии с сервером СУБД PostgreSQL Standart 13.9 (ОС Debian 11.5) от команды PostgresPro. В материале мы описываем исследование зависимости параметров конфигурационного файла, результаты замеров производительности при изменении данных параметров.\nСостав тестового стенда\n \nАппаратная часть\n  \nSupermicro X11DPL‑i*\n2 x Intel Xeon X 5690 3,4 GHz, each 6 Core **\nОЗУ 128 ГБ DDR3 \nХранилище RAID 1, Intel DC S3710 SSDSC2BA400G401 400 ГБ\n*Исследование проводим на проверенной временем аппаратной платформе Supermicro от 2011 года. \n**При использовании платформы Intel Gold в связке с скоростными дисками, большинство исследуемых параметров осталось в рамках погрешности. Не удалось сгенерировать нагрузку, чтобы заметить тенденцию к существенному изменению показателей.\n  \nПрограммная часть\nПлатформа 1С:Предприятие 8.3.22.1750.\nКонфигурации: 1С:ERP Управление предприятием 2. Демо база. Тест \"Полный\" на 33 пользователя. Редакция 2.5.8.179. Объем базы 4.2 ГБ. \nСервер приложений 1С: ОС Windows Server 2019 Standard.\nСервер базы данных: ОС Debian 11.5, Postgres pro Standart 13.9.\nПримечание:\n В рамках тестирования мы используем стандартный шаблон от фирмы 1С – полный, 33 пользователя. Безусловно, используемое железо сможет вытянуть и больше испытуемых. Наша цель отследить тенденцию, а не нагрузить железо.  \nОбщая методика тестирования\nВ рамках данной статьи мы применяем методику анализа используя абсолютные значения погрешности:\nОписание методики определения абсолютной погрешности:\nОпределяем идеальные условия испытаний. В нашем случае это два виртуальных сервера с ролью Application сервера 1С на Windows, и сервера баз данных с подготовленной конфигурацией.\nВыполняем по 3 теста APDEX с числом пользователей 33 на PostgreSQL.\nПроизводим расчет абсолютной погрешности по формуле:\nФормула расчета абсолютной погрешности\nОсновной этап тестирования:\nПроводим замер целевых значений. Проводится 3 замера  теста “Полный” в конфигурации ERP.\nПроводим серию основных испытаний (повторяем со всеми исследуемыми значениями). Проводится уменьшение первого исследуемого значения на 100%.\n Проводим увеличение первого исследуемого значения на 100%.\nЗначения в положении on\\off активируем или деактивируем соответственно (например, компоненты параллелизма).\nТест 1С:КИП (Апдекс)\nВ основе методики АПДЕКС лежит набор инструментов 1С:КИП. В данном случае, использовался весь функционал методологии. Использовалась стандартная демонстрационная база 1С:ERP с сайта 1С.\nСтандартная методология АПДЕКС использует прогрессивную шкалу от 0 до 1, где 1 – это замечательный результат, а 0 – неудовлетворительный. Требуется указать целевое значение параметра производительности той или иной операции, создать сценарии и запустить тест. \nПодготовка тестового стенда  \nПроводим установку и базовую настройку носителя виртуальных машин и операционных систем. \nНоситель виртуальных машин\nПеред работой с носителем были произведены твики биоса. В данном случае необходимо было вручную выставить режим “Maximum Perfomance” в расширенных настройках CPU. Данные настройки применены для всех участников тестирования\nPower Technology. Ставим Custom.\nPower Performance Tuning. Здесь нужно выбрать: или управлять питанием будет BIOS или ОС. Наш опыт с Hyper-v говорит о выборе в сторону OS control.\nEnergy_perf_bias_cfg mode. Ставим Maximum Performance.\nНастройки электропитания ОС. Ставим производительность. \nРезультатом наших манипуляций является фиксированная в режиме turbo-boost частота процессора (в нашем случае это 3,46 ГГц ). \nОперационные системы и приложения\n  \nApplication сервер 1С:\nУстановлена ОС Windows Server 2019 Standard. \nУстановлен 1С сервер.\nРежим электропитания - максимальная производительность.\nНоситель виртуальных машин:\nУстановлена ОС Windows Server 2019 Standard. \nРежим электропитания - максимальная производительность.\nSQL Server:\nУстановлена ОС Debian 11.5.\nУстановлен Postgres Pro 13.9.\nВыделяем ресурсы под виртуальные машины:\n Application сервер 1С – 12 ядер ЦП и 40 ГБ ОЗУ.\nSQL сервер – 10 ядер ЦП и 30 ГБ ОЗУ (параметры конфигурации рассчитываем исходя из 20 ГБ ОЗУ для того, чтобы был запас по росту).\nПроизводим проверку дисковой подсистемы Crystal Disk Mark. Настройки стандартные. Тест файлом 32ГБ:  \nРезультат теста Crystal Disk Mark\nНастройка Postgres  \nПодготовка исходного конфига\nПосле оформления заявки на сайте \nhttps://1c.postgres.ru/\n на нашу почту приходит письмо с командами:\nwget https://repo.postgrespro.ru/1c-13/keys/pgpro-repo-add.sh\nsh pgpro-repo-add.sh\nЕсли продукт единственный Postgres на вашей машине и вы хотите сразу получить готовую к употреблению базу:\napt-get install postgrespro-1c-13\nВыполняем их, не забывая:\nПеред этим сменить локаль на ru_RU.utf8\nЗадать пароль учетке Postgres.\nПроводим анализ файла \npostgresql.conf\n, находящегося по адресу: /var/lib/pgpro/1c-13/data\nБольшинство строк в нем закомментированы. Часть настроек изменяется при установке и зависит от числа ядер и ОЗУ выделенных на ВМ, это одно из преимуществ продукта.\nshared_buffers = 5000MB # 25% of RAM\ntemp_buffers = 128MB\nwork_mem = 256MB\nmaintenance_work_mem = 256MB\nmax_files_per_process = 10000\nmax_parallel_workers_per_gather = 0\nmax_parallel_maintenance_workers = 3 # Количество CPU/4, минимум 2, максимум 6\ncommit_delay = 1000\nmax_wal_size = 4GB\nmin_wal_size = 2GB\ncheckpoint_timeout = 15min\neffective_cache_size = 15000MB # 75% of RAM\nfrom_collapse_limit = 8\njoin_collapse_limit = 8\nautovacuum_max_workers = 6 # Количество CPU/2, минимум 2\nvacuum_cost_limit = 600 # 100* autovacuum_max_workers\nautovacuum_naptime = 20s\nautovacuum_vacuum_scale_factor = 0.01\nautovacuum_analyze_scale_factor = 0.005\nmax_locks_per_transaction = 256\nescape_string_warning = off\nstandard_conforming_strings = off\nshared_preload_libraries = 'online_analyze, plantuner'\nonline_analyze.threshold = 50\nonline_analyze.scale_factor = 0.1\nonline_analyze.enable = on\nonline_analyze.verbose = off\nonline_analyze.min_interval = 10000\nonline_analyze.table_type = 'temporary'\nplantuner.fix_empty_table = on\nrandom_page_cost = 1.0 \neffective_io_concurrency = 1\nЭто и будет наш основной эталонный конфиг для старта тестов. \nИсследуемые элементы и этапы тестирования:\nТест 1,2,3 – определение погрешности стоковых значений\nТест 4 – random_page_cost = 4.0\nТест 5 – effective_io_concurrency = 400\nТест 6 – shared_buffers = 2500MB\nТест 7 – shared_buffers = 10000MB\nТест 8 (комплексные значения):\nmax_parallel_workers_per_gather = 4\nmax_parallel_maintenance_workers = 3 # Количество CPU/4, минимум 2, максимум 6\nmax_worker_processes = 10\nmax_parallel_workers = 10\nПройдемся кратко по основным значениям:\nshared_buffers = 5GB # 25% of RAM \nЗадаёт объём памяти, который будет использовать сервер баз данных для буферов в разделяемой памяти. Согласно рекомендации команды Postgres pro, рекомендуемое значение: 25% от ОЗУ сервера SQL.\ntemp_buffers = 128MB\nЗадает максимальный объем памяти, выделяемой для временных буферов в каждом сеансе. Эти, существующие только в рамках сеанса буферы, используются исключительно для работы с временными таблицами.\nwork_mem = 256MB\nЗадает базовый максимальный объём памяти, который будет использоваться во внутренних операциях при обработке запросов (например, для сортировки или хеш-таблиц), прежде чем будут задействованы временные файлы на диске.\nmaintenance_work_mem = 256MB\nЗадает максимальный объем памяти для операций обслуживания БД, в частности VACUUM, CREATE INDEX и ALTER TABLE ADD FOREIGN KEY. \nmax_parallel_workers_per_gather = 0\nКоличество воркеров, которые запускаются на узел. Это основополагающая настройка, если вы ее выставите в ноль, параллелизм не будет отрабатывать, будет работать один процесс, один оператор. Когда оптимизатор запросов принимает решение, что для запроса нужно применять параллелизм, он смотрит на этот параметр и определяет, сколько ему нужно воркеров, чтобы выполнить этот оператор запроса.\nmax_parallel_maintenance_workers = 3 # Количество CPU/4, минимум 2, максимум 6\nЗадаёт максимальное число рабочих процессов, которые могут запускаться одной служебной командой.\nmax_wal_size = 16GB и min_wal_size = 4GB\nМинимальный и максимальный размер файлов журнала предзаписи. \neffective_cache_size = 15000MB # 75% of RAM\nЭтот параметр влияет на планировщик запросов, а не ограничивает дисковый кэш. Чем выше, тем больше вероятность, что будет применяться сканирование по индексу. Чем ниже, тем более вероятно, что будет выбрано последовательное сканирование.\nrandom_page_cost = 1.0\nЗадает приблизительную стоимость чтения одной произвольной страницы с диска. Значение по умолчанию равно 4.0. С хранилищем, у которого стоимость произвольного чтения ненамного выше последовательного, как, например, у твердотельных накопителей, лучше выбрать меньшее значение random_page_cost. Параметр наиболее эффективен, при условии что база полностью помещается в ОЗУ. Сервер SQL не знает какая у нас дисковая подсистема и какое время Seek Time, потому данный параметр необходимо задать вручную в среде Linux. В Windows параметр проставляется автоматически:\n4.0 – для HDD;\n1.5-2.0 – для RAID из HDD;\n1.1 – 1.5 – для SSD;\n0.1 – 1.0 – для NVMe.\neffective_io_concurrency = 200\nЗадаёт допустимое число параллельных операций ввода/вывода, которое говорит PostgreSQL о том, сколько операций ввода/вывода могут быть выполнены одновременно. Чем больше это число, тем больше операций ввода/вывода будет пытаться выполнить параллельно PostgreSQL в отдельном сеансе. Диски SSD и другие виды хранилища в памяти часто могут обрабатывать множество параллельных запросов, так что оптимальным числом может быть несколько сотен.\nРезультаты тестирования\nТаблица определения погрешностей:\nНазвание параметров\nЗначение Апдекс\nСреднее значение Апдекс\nОтносительная погрешность Апдекс\nАбсолютная погрешность Апдекс\nТест определения погрешности 1\n0,816\n0,81\n0,01\n0,65%\nТест определения погрешности 2\n0,805\nТест определения погрешности 3\n0,808\nТаблица результатов тестирования:\nНазвание параметров\nСтандартное значение параметров\nИзмененное значение параметров\nАпдекс\nАбсолютная разница со средним значением\nrandom_page_cost \n1.0\n4.0\n0,791\n3,35%\neffective_io_concurrency \n1\n400\n0,783\n3,20%\nshared_buffers\n5000MB\n2500\n0,797\n1,50%\n10000\n0,807\nв пределах погрешности\nmax_parallel_workers_per_gather\n0\n4\n0,808\nв пределах погрешности\nwork_mem\n256MB\n128MB\n0,806\nв пределах погрешности\n512MB\n0,798\n1,50%\nОценка результатов\nrandom_page_cost = 4.0\nОжидаемо ухудшение показателей. Значение 4 – для HDD дисков.\neffective_io_concurrency = 400\nСогласно общей рекомендации 1С, а также документации с сайта разработчика, увеличение данного параметра должно было позитивно отразиться на производительности дисковой системы, на деле это не так. \nИзменение данного параметра проводить с осторожностью\n.\nshared_buffers = 2500 shared_buffers = 10000\nНе стоит выставлять слишком высокие, а так же слишком низкие значения данного показателя. Согласно общей рекомендации 1С, значения 25% от общего объема ОЗУ – достаточно для работы.\nmax_parallel_workers_per_gather = 4\nПри использовании типовых конфигурации, активация данной настройки пользы не несет. Используется другой механизм, данное замечание разберем в наших следующих материалах. Рекомендуемое значение – 0. \nwork_mem = 128MB work_mem = 512MB\nИзменение данных показателей практической ценности не несет.\nПри изменении показателей общая тенденция на ухудшение. Это означает, что изначально были выбраны корректные настройки конфигурации для конкретной базы. Также это говорит о том, что все изменения файла конфигурации необходимо применять исключительно со знанием физики процесса. В случае, если опыта не хватает, мы рекомендуем изменять только один параметр random page cost, а все остальные оставлять по умолчанию.\nВыводы\n2023 год продолжит тенденцию к импортозамещению. Уже сейчас можно сказать, что Postgres Pro можно использовать в продакшн среде. Данный продукт есть в реестре продуктов импортозамещения.\nК основным плюсам продукта можно отнести:\nединственное на текущий момент коммерческое решение с полноценной поддержкой.\nпрактически полностью автоматическая настройка конфигурации под ваше железо/ВМ.\nМинусы:\nвысокий порог входа в Linux, и, как следствие, увеличение требований к персоналу и затратам.\nВ ближайшей перспективе мы ожидаем роста конкурентоспособности отечественных решений на рынке и постепенный отказ от продуктов Microsoft.\n \n ",
    "tags": [
        "1c",
        "тестирование по",
        "postgres",
        "1с предприятие",
        "1с сервер",
        "1с:предприятие"
    ]
}