{
    "article_id": "727798",
    "article_name": "Если не использовать «React»",
    "content": "Коллеги со стороны бакэнда иногда любезно спрашивают: \"а нафига вам тут реакт\"? Будем честны и ответим, что без него можно написать довольно приличный код, отдать его на ревью коллеге-фулстеку и получить аппрув после 15 секунд (так быстро не потому, что коллега не беспокоится за качество кода, а просто код весьма компактен, cмотрите ниже). Если подумать чуть-чуть дольше (например, за время заварки чая, которое, как все знают, равно трем минутам), можно найти не менее шести ошибок, а может и больше. Любая ошибка, конечно, весьма субъективна, но я постараюсь объективно объяснить каждую из них.\nНиже код представляет собой обычный список с кнопкой \"добавить\", код рабочий в том смысле, что его можно скопировать в файл и открыть в браузере.\n<body>\n<script>  \n\nclass Component {\n  constructor(\n    container,\n    callback, // callback on add\n    emails = [], // state \n  ) {\n    this.container = container;\n    this.callback = callback;\n    this.emails = emails;\n  }\n\n  templateForOneEmail(title, body) {\n    return `\n      <h4>${title}</h4>\n      <div>${body}</div>\n      <hr />\n    `;\n  }\n\n  template() {\n    const str = this.emails\n      .map(([title, body]) => this.templateForOneEmail(title, body))\n      .join(\"\");\n    return `\n      <div id=\"my-emails\">${str}</div>\n      <button id=\"my-button\">Add</button>\n    `;\n  }\n\n  subscribe() {\n    const node = this.container.querySelector(\"#my-button\");\n    if (node) \n      node.addEventListener(\"click\", this.callback);\n  }\n\n  unsubscribe() {\n    const node = this.container.querySelector(\"#my-button\");\n    if (node)\n      node.removeEventListener(\"click\", this.callback);\n  }\n\n  render() {\n    this.unsubscribe();\n    this.container.innerHTML = this.template();\n    this.subscribe();\n  }\n\n  clear() {\n    this.unsubscribe();\n    this.container.innerHTML = \"\";\n  }\n}\n\n\nfunction main() {\n  const container = document.createElement(\"div\");\n  document.body.appendChild(container);\n  const emails = [];\n\n  let comp = null;\n  const callback = () => {\n    if (!comp) { return; }\n    emails.push([\"title\", \"body\"]);\n    comp.clear();\n    comp = new Component(container, callback, emails);\n    comp.render();\n  }\n  comp = new Component(container, callback, emails);\n  comp.render();\n}\n\nmain();\n\n</script>\n</body>\n\nИтак, ошибки:\nНачнем, пожалуй, с самой безобидной - Array.join в методе template. Вот, не свойство компонента конвертировать между массивом и строкой для рендинга. [jsx]\nПерерисовка всего экрана при добавлении элемента. Интуитивно хочется дорисовать, а не перерисовать :) [virtual dom]\nВынужденные неточности с подписками - вызов unsubscribe (ресурсный метод) то тут, то там. Можно возразить, что в данном примере unsubscribe в рендере не нужен, так как мы можем вызвать clear следом, но в этом случае мы, к сожалению, теряем idempotence рендера (см. плиз \nhttps://en.wikipedia.org/wiki/Idempotence\n) [lifecycle]\nСсылка на самих себя в колбеке. Тут хороший вопрос, насколько это плохо для движка V8, но интуитивно создание цикла из ссылок не очень хорошая идея. [тут тег, в котором реакт не одобряет такое]\nСоздание компонента на каждый колбэк. Тут, возможно, и нет ничего плохого, но данное действие, скорее, увеличивает энтропию (о понимании программы) в целом, чем уменьшает ее. [state observers]\nРучная чистка ресурсов (метод clear нужно вызывать извне), как следствие, легко что-то забыть или потерять. [ownership]\nИ напоследок, вопрос о композиции таких компонентов - но это, как и на самом среднем проекте, обычно думается потом.\n \n ",
    "tags": [
        "js",
        "react"
    ]
}