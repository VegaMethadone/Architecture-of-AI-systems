{
    "article_id": "726332",
    "article_name": "Создаем читабельный e2e тест для микросервисов на Spring Boot с помощью Cucumber 7 и Wiremock",
    "content": "Дорогой читатель, это мой первый туториал и если я что‑то упустил или не объяснил, хотя стоило бы, напиши пожалуйста комментарий и я обновлю статью.\nTL;DR\nВесь код для микросервисов и e2e теста тут \nРекомендую быстро пробежаться по коду перед прочтением статьи т к в самой статье я объясню только неочевидные моменты реализации e2e тестирования.\nПроблема\nНужно организовать сквозное/e2e (end-to-end) тестирование (далее буду использовать термин e2e) приложения, которое состоит из нескольких микросервисов, микросервисы используют сторонние апи.\nЗнакомимся c проектом\nВ качестве примера у нас социальная сеть. Пользователи могут создавать в ней аккаунты и публиковать посты.\nАккаунт можно создать только когда тебе есть 18 лет.\nА в постах нельзя использовать матные слова. Если найдено матное слово — пост не будет создан.\nРазные детали про проект\nв проекте используется монорепозиторий\nтехнологии: maven, Spring Boot, Hibernate, H2, Feign client (из Spring Cloud)\nв целях упрощения туториала не используем никаких либ для миграции базы (liquibase, flyway) и создаем таблицы с помощью Hibernate\nв целях упрощения в качестве базы используем in-memory базу H2\nдля примера используется приложение с двуми микросервисами, но их может быть и больше\ne2e тесты лежат в отдельном модуле с названием e2e-tests\nдля запуска сервисов для e2e тестирования будем использовать Spring профиль с название ‘e2e’\nПро сервисы и их обязанности\nУ нашей социальной сети есть два микросервиса и эти микросервисы пользуются сторонними апи. Ниже диаграмма с описанием приложения.\nUserService — отвечает за все, что связано с пользователем.\nPostService — отвечает за все, что связано с постами.\nAge API — сторонний сервис, который помогает нашей соцсети узнать реальный возраст пользователя.\nWord API — сервис, который помогает понять есть ли в тексте матные слова.\nКраткое описание технологий для e2e тестирования\nДля создания e2e тестов будут использованы следующие либы: JUnit 5, Wiremock 2, Cucumber 7, Awaitility 4.\nWiremock — для мокирования(имитации) http ответов. В нашем случае используем wiremock для мокирования ответов от сторонних API. Короткий пример (создаем мок для get запроса на получение пользователя с id 1):\nwiremockServer.stubFor(get(\"/api/users/1\").willReturn(aResponse()\n        .withStatus(200)\n        .withHeader(\"Content-Type\", \"application/json\")\n        .withBody(jsonHelper.fromObjectToString(user)))\n );\nCucumber — для создания удобного для чтения e2e теста. Короткий пример:\nФункция: Снятие денег со счета\n    Сценарий: Успешное снятие денег со счета\n    Дано на счете пользователя имеется 1200 рублей\n    Когда пользователь снимает со счета 200 рублей\n    Тогда на счете пользователя имеется 1000 рублей\nAwaitility — для создания проверок в нашем e2e тесте с условиями, которые могут выполниться не сразу, а через какое-то время. Короткий пример:\n// сделали что-то с кастомером\nsomeCustomerService.doSomething();\n\n// тут мы ждем 5 секунд и проверяем обновился ли статус кастомера\nawait().atMost(5, SECONDS).until(customerStatusIsUpdated());\n\n\n// или могли бы проверять обновился ли статус кастомера каждые\n// 2 секунды в течение 10 секунд\nAwaitility.await().atMost(10, TimeUnit.SECONDS)\n                .pollInterval(2, TimeUnit.SECONDS)\n                .until(customerStatusIsUpdated());\nПроговариваем логику e2e теста\nЦель протестировать весь жизненный цикл пользователя в нашей социальной сети.\nНапомню, что в соцсети нельзя создавать акки, если тебе меньше 18 лет и нельзя использовать маты в постах.\nЛогика теста: пользователь создает аккаунт в соцсети (попробуем создать аккаунт для двух людей: одному есть 18 лет, другому нет) и ведет какую-то активность (создадим пару постов с матами и без) и в итоге решает удалить свой аккаунт.\nЧто нужно сделать для успешного выполнения e2e теста\nЧтобы провести e2e тестирование нам нужно замокать все сторонние сервисы, в этом нам поможет Wiremock. Наши сервисы будут работать и ничего не подозревать о том, что сторонние API не настоящие. На диаграмме ниже можно увидеть, что сервисы соцсети обращаются к wiremock, а не к реальным апи.\nПодготавливаем сервисы для e2e тестирования\nДля ускорения выполнения e2e тестов можно использовать in-memory базы данных. В нашем примере мы так и делаем — используем H2 базу данных вместо, например, MySql.\nТак же нужно чтобы http клиенты, которые используются для общения со сторонними API, можно было перенаправить на Wiremock (то есть нужно изменить хост и порт для сторонних API). При этом хотелось бы чтобы использовался тот же самый клиент что и для прода. В нашем примере это сделано через спринговые проперти.\nВ проекте нашей социальной сети для создания клиентов используется FeignClient (из Spring Cloud), но и для других либ для создания клиентов логика будет такая же.\nКлиент:\nПроперти в аппликейшен файле для e2e профиля с указанием хоста и порта Wiremock-a:\nЧитаем готовый e2e тест и разбираемся как писать свои\nНаша цель создать легкочитаемый e2e тесты. Для этого мы используем либу Cucumber. А читабельное описание нашего теста будет храниться в файле с расширением .feature\nНиже готовый файл с шагами для нашего e2e теста:\nНаш файл .feature содержит ключевые слова:\n“Функция” — тут обычно пишут описание тестируемого функционала. В нашем случае у нас один тест,  который тестит вообще всё приложение, поэтому я использовал подходящее описание.\n“Сценарий” — название и краткое описание нашего e2e теста.\n“Дано”, “Когда”, “Тогда” — это ключевые слова, которые мы используем для описания шагов теста.\nТак же доступны такие ключевые слова: Допустим, Если, Затем, И, Иначе, Ктомуже, Но, Пусть, Также, То.\nНапомню, что все эти ключевые слова это синтаксический сахар.\nПлагин для файлов .feature\nДля удобного редактирования файлов типа .feature нужно установить плагин. IntelliJ Idea подскажет установить его когда вы откроете файл типа .feature\nПишем в фича файле на русском языке\nНазвание шагов на русском можно писать без каких-либо дополнительных настроек. А чтобы можно было использовать русские ключевые слова нужно в начале .feature файла добавить это:\n# language: ru\nПример можно увидеть на скриншоте выше.\nСоздаем новый шаг в фича файле\nШаг, для которого еще нет кода, который будет выполняться, подсвечивается желтым цветом:\nЕсли навести курсов на этот шаг или прожать Alt+Enter когда курсор стоит на этой строке, то можно увидеть такое меню\nТут идея предлагает создать так называем step definition или метод, который будет содержать код, который будет выполнен для этого шага во время теста.\nЕсли кликнуть на ”Create step definition”, то появится такое меню\nЯ выбрал существующий файл ThirdPartyServicesStepsDefinitions, если у вас таких пока нет, то выбирайте первый вариант.\nДля меня в классе был создан метод с аннотацией @Дано, а также название метода на русском (если вдруг не знали, то можно писать на java используя русский язык 😉). В этом методе нужно будет поместить код для этого шага\nДавайте посмотрим на то, что я положил в этот метод. Чтобы произошло то, что написано в названии этого шага, в коде мы должны замокать ответ от Age Api. Вот как это сделано:\nТут создается мок для POST запроса по урлу /is-person-adult а также добавлено условие, что в теле запроса должен быть определенный джисон.\nПроверяем с помощью Awaitility условие, которое выполнится не сразу\nДавайте так же рассмотрим шаг, где используется библиотека Awaitility. Напомню, что Awaitility нам нужен в случае, если нужно проверить условие, которые выполнится не сразу, а через какое-то время.\nВ нашем e2e тесте Awaitility используется на шаге проверки того, что у пользователя больше нет постов в соцсети. Тут нам нужен Awaitility т к в нашей соцсети удаление пользователя и его постов занимает много времени.\nВ этом методе мы запускаем проверку того, что у пользователя больше нету постов. Каждые 2 секунды на протяжении 10 секунд Awaitility будет выполнять код из метода .until()\nЕсли в течение 10 секунд лямбда из .until() не вернет true, то вылетит эксепшен и тест завалится.\nРеализацию остальных шагов в нашем .feature файле я объяснять не буду т к они содержат либо  простой код, либо код похожий на тот, что я объяснил выше.\nСмотрим вспомогательный код для e2e теста\nКод для реализации логики в шагах из фича файла:\nв пакете src/main/java/org/example можно увидеть класс c кодом для запуска Spring Boot приложения (в нем выключены сервлеты чтобы запускался только spring контекст). Этот класс нужен нам т к без него не получится запустить e2e тест со spring контекстом, и значит не получится удобно и красиво инжектировать бины в классы.\nв пакете src/test/java/org/example/common/client у нас клиенты для сервисов для проведения CRUD операций для постов и пользователей.\nsrc/test/java/org/example/common/config — пакет с конфигами, про них чуть ниже.\nкласс JsonHelper это обертка для ObjectMapper для работы с джисонами.\nкласс TestContext это класс для удобного хранения и передачи данных между шагами теста, который в сути своей обычная мапа.\nкласс AbstractStepsDefinitions — содержит код, который будет использован всеми остальными StepsDefinitions классами\nКонфиги для запуска e2e теста\nBeanConfig — тут ничего особенного, он содержит методы для создания spring бинов (в этом классе мы создаем инстанс Wiremock сервера)\nCucumberSpringConfiguration — класс для конфигурации application context (в нашем случае это Spring контекст) который будет подниматься при запуске .feature файлов.\nEndToEndCucumberTestConfiguration — в этом классе содержатся настройки для запуска .feature файлов с помощью JUnit 5. Давайте пройдемся по аннотациям из этого класса т к они могу ввести в замешательство.\n@Suite — это аннотация из JUnit 5 для создания класса-запускатора тестов\n@IncludeEngines(\"cucumber\") — эта аннотация для добавления Cucumber engine (движка для запуска тестов созданных с использованием Cucumber).\n@ConfigurationParameter(key = GLUE_PROPERTY_NAME, value = \"org.example\") — тут мы указываем местоположение джава классов со StepsDefinitions и также в пакете должен быть класс с аннотацией @CucumberContextConfiguration иначе будет ошибка\n@ConfigurationParameter(key = FEATURES_PROPERTY_NAME, value = \"src/test/resources/features/\") — тут указываем путь к пакету с .feature файлами\nЗапуск сервисов и e2e теста\nЗапускаем сервисы с e2e профилем. В корне модуля для PostService (/social-network-java-spring-wiremock-cucumber-e2e-test/post-service) запускаем:\nmvn spring-boot:run '-Dspring-boot.run.profiles=e2e'\nТаким же образом запускаем UserService.\nЗапускаем тесты из консоли. Переходим в модул с e2e тестами (/social-network-java-spring-wiremock-cucumber-e2e-test/e2e-tests) и запускаем:\nmvn clean install\nРезультат:\nЕсли у вас появились какие-то вопросы, пишите, отвечу или обновлю пост.\n \n ",
    "tags": [
        "java",
        "e2e",
        "e2e-тесты",
        "cucumber",
        "wiremock",
        "junit5",
        "сквозное тестирование",
        "awaitility",
        "микросервисы",
        "апи"
    ]
}