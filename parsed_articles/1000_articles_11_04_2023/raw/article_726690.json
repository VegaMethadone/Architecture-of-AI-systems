{
    "article_id": "726690",
    "article_name": "Без рутины и тоски: как провести код-ревью",
    "content": "Привет, Хабр! Мы перевели \nстатью\n, посвящённую не самой любимой задаче разработчиков — код-ревью. Как полюбить и превратить рутину в инструмент развития — в пересказе Medium.\nСтатья пригодится начинающим и опытным разработчикам, которые хотят упорядочить знания, оптимизировать процесс и получить практические советы.\nПочему разработчики не любят код-ревью\nСразу оговоримся — разработчики любят чужой код, но грамотный, написанный по общепринятым стандартам и с логичными комментариями. \nПрограммисты не любят ревьюрить код, написанный безграмотно и запутанно, без соблюдения стиля и нужной документации.\nБольшинство разработчиков недолюбливает этот процесс по этим причинам: \n1.\tТрата времени \n— нельзя знать заранее, сколько времени займёт проверка кода. Каждое изменение в основном коде проходит через код-ревью, в зависимости от количества изменений, этот процесс занимает от двух минут до двух часов. \n2.\tСмена контекста\n — задача на код-ревью часто возникает в то время, когда специалист сосредоточен на других задачах. Приходится переключаться на новый процесс, что тормозит выполнение текущих задач и приводит к переключению контекста. \nP.S. Не рекомендуется сразу же после получения уведомления бросаться делать ревью, поскольку переключение между задачами снижает продуктивность. \n3.\tРазница во мнениях\n — часто автор и ревьюер спорят об изменениях. Оба приводят аргументы в пользу предложенного решения, ищут способ реализации, который устроит автора и ревьюера.\n4.\t Стиль кода\n — большинство проектов имеют свой стиль, который нужно соблюдать. Если же он отсутствует, то процесс ревью усложняется, так как нет чёткого видения стиля.\n5.\tОтсутствие документации\n — отсутствие документации увеличивает время ревью, так как вам приходится постигать реализованную логику самостоятельно. Используйте автотесты и линтеры, принятые в команде.\nЗачем это нужно?\nНесмотря на негативное отношение к код-ревью, это та вещь, которая превращает хорошего разработчика в отличного. Задача помогает понять, как мыслят другие разработчики, и косвенно поучаствовать в создании проектов.\nКод-ревью — практический способ расширить свою базу знаний, сделать свой вклад в проект и помочь другим разработчикам.\nТехника помогает на ранних стадиях найти некоторые ошибки и избавиться от непонятных и запутанных решений. В работе над кодом участвует не один человек, а команда проекта, поэтому часто может появиться свежий взгляд со стороны.\nПрограммист, который заранее знает, что коллеги будут проверять его работу, стремится писать более аккуратно и организованно. В итоге, код получается более качественным, его понимают несколько человек, а процесс ревью ускоряется.\nПринять недостатки\nГлавный и единственный недостаток этого процесса — его длительность. Все участники код-ревью тратят время на то, чтобы посмотреть и при необходимости прокомментировать код, а разработчики — на исправление ошибок.\nМинимизировать недостаток и полюбить ревью помогут три рекомендации.\n1. \nВыделяйте время\n \nСтруктурируйте свой рабочий день так, чтобы у вас оставалось время для ревью. Если у вас на проекте внедрены спринты или канбан, вы можете определить среднее количество времени, которое вы тратите на ревью в течение недели. Разделите общее время на рабочие дни и выделите на ревью один час, например — с 11 до 12 ежедневно.\nТакой подход позволит постоянно находить время для ревью, причём об этом будете знать и вы, и ваша команда. Раннее планирование заметно облегчит вам жизнь.\n2. \nСоставьте чек-лист\n \nЧек-лист упрощает процесс ревью для разработчика. Стандартный чек-лист включает в себя две и более колонки: задача, промежуточные этапы, выполнение.\nЧек-лист разработчика может выглядеть так:\nдобавление требования к тикету в пул-реквест;\nдобавление автоматизации кода;\nзапуск инструментов, например, линтер, для исправления проблем с синтаксисом, \nвыполнение внутреннего тестирования;\nнаписание unit тестов;\nзапуск самого кода. \n \n3. \nИзбегайте словесных перепалок\nЧасто код-ревью становится полем битвы разработчиков из-за различий в образе мыслей, стиле кода или стремлений защитить свою работу.\nЗдесь нужно приводить логичные комментарии, не поддаваться эмоциям и подкреплять мысли весомыми аргументами. \nЕсли дискуссия превращается в спор, лучше предложить оппоненту обсудить моменты лично, вне ревью. \nСоветы для оптимизации\nКод-ревью — процесс, порой, долгий и трудоёмкий. Проверка кода может сопровождаться мелкими замечаниями и бесконечными обсуждениями малозначимых деталей, что отнимает несколько часов времени у всей команды.\nВ порыве эмоций некоторые программисты даже предлагали кардинальные меры — вообще отказаться от пул-реквестов и ревью. Идею не поддержали, и это верное решение, потому что есть эффективные способы оптимизировать процесс ревью.\nВот 6 методов, которые подходят для авторов кода и ревьюеров:\n1.\tПройдитесь по техническим требованиям\n — это должно стать отправной точкой код-ревью, чтобы избежать ошибок и траты времени. Часто разработчики упускают требования в начале ревью, а они могут дублироваться или существенно меняться с момента своего создания, поэтому решение часто отклоняется от них, а в некоторых случаях написанный код вообще не связан с требованиями. \n2.\tКомментируйте только изменения\n — не тратьте время на комментирование изменений, несвязанных с пул-реквестом, даже если считаете его неверным. Из-за этого код-ревью занимает гораздо больше времени, чем было запланировано. Можно использовать шаблон пул-реквестов, чтобы предусмотреть краткое описание выполненных действий и их обоснование, ссылку на тикет задачи, а также план тестирования для проверки правильности изменений.\n3.\tЗапустите код\n — в 90% случаев недостаточно просто посмотреть на код, чтобы найти ошибки. Проблемы обнаруживаются только при запуске и просмотре логов. В некоторых случаях для запуска кода может потребоваться особая конфигурация, подготовка которой должна быть частью процесса код-ревью.\n4.\tРефакторинг VS поддержка кода\n — баланс выбора между двумя процессами тонкий: во время ревью нужно подумать, в каких случаях разработчику нужно написать избыточный код или же провести рефакторинг. Здесь нет единственного верного ответа, на выбор будут влиять факторы: наличие времени у разработчика, возможность использования кода в других целях и вероятность регрессии. Оба процесса должны упростить ревью и улучшить код. \n5.\tСначала логика, потом синтакси\nс — комментарии код-ревью относятся к двум параметрам кода: стиль плюс синтаксис и реализованная логика. Важно найти баланс, чтобы одно не перевесило другое. В код-ревью предпочтительнее комментировать логику, а если хочется прокомментировать синтаксис, лучше ссылаться на документацию, определяющую стиль кода в команде или поднять эти вопросы на встречах разработчиков. \n6.\tЧитаемость важнее производительности\n — сверхпроизводительный код не всегда понятен другим разработчикам, плохо поддаётся переделке и ведёт к багам при рефакторинге, поэтому лучше написать расширенный код, который будет проще понять и исправить. Другой выход — дать поясняющий комментарий, если есть основания полагать, что он поможет понять замысел автора кода.\nНесколько советов\nВо время ревью важно оценивать, насколько комментарии улучшают состояние кода, эффективность и работоспособность систем. Комментируйте код строго в контексте улучшения работоспособности системы или её части. Можно дать примеры хорошей реализации и ссылки на паттерны.\nЕсли ваши ревью объёмны и занимают много времени, предложите авторам кода делать изменения небольшими кусочками и создавать пул-реквесты по мере выполнения задач. Дозированную информацию проще ревьюрить.\nПодытожим \nОптимизация код-ревью превращает утомительный процесс в эффективный инструмент, который развивает навыки и улучшает качество общения с членами команды.\nРекомендации и перечисленные практики из статьи рекомендуется использовать совместно и по отдельности. Методы помогут оптимизировать процесс и перебороть неприязнь к процессу. \nВо время ревью просмотрите каждую строку кода и контекст, убедитесь, что вы улучшаете качество кода, не забудьте похвалить разработчиков за хорошую работу — это делает рабочую атмосферу благоприятной.\nЕсли вы тоже хотите поделиться фишками проведения код-ревью, что-то посоветовать или рассказать историю из опыта — пишите в комментариях.\n \n ",
    "tags": [
        "рсхб",
        "рсхб-интех",
        "рсхб в цифре",
        "код-ревью",
        "ревью",
        "ревью кода",
        "советы",
        "советы начинающим",
        "советы и рекомендации",
        "советы разработчику"
    ]
}