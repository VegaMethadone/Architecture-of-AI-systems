{
    "article_id": "727288",
    "article_name": "Кроссплатформенная сборка Qt5 для Nvidia Jetson TX2",
    "content": "Введение\nНачать работу с \nNvidia Jetson\n можно как с обычным персональным компьютером, подключив к нему монитор и мышку, однако это не всегда удобно. В случае, если \nJetson\n является частью некоторого устройства и доступ к нему ограничен, то смена прошивки может превратиться в проблему. В таком случае помогает кроссплатформенная сборка. Если проект написан на C++, то кросскомпиляцию можно организовать с помощью \ncmake\n. Файл \ntoolchain.cmake\n легко можно найти на просторах интернета. Однако, если проект написан на Qt, то приведенные в интернете инструкции оказываются неполными и информацию приходится собирать с различных источников, попутно исправляя ошибки в них. Поэтому, мы постарались собрать в одной статье полную и достоверную инструкцию по кроссплатформенной сборке Qt5 для \nNvidia Jetson TX2\n на момент февраля 2023 года.\nОбраз для Jetson\nНа сайте \nNvidia\n \nhttps://developer.nvidia.com/drive/sdk-manager\n скачиваем утилиту под названием \nsdkmanager\n. На момент написания статьи в \nsdkmanager\n не было поддержки \nubuntu\n версий выше 18й. Однако это ограничение можно обойти. Для этого на хосте необходимо изменить значение поля VERSION_ID на 18.04 в файле /usr/lib/os-release:\n \nsudo vi /usr/lib/os-release\n NAME=\"Ubuntu\" \n VERSION=\"20.04.5 LTS (Focal Fossa)\"\n ID=ubuntu\n ID_LIKE=debian\n PRETTY_NAME=\"Ubuntu 20.04.5 LTS\"\n VERSION_ID=\"20.04\"\n HOME_URL=\"https://www.ubuntu.com/\"\n SUPPORT_URL=\"https://help.ubuntu.com/\"\n BUG_REPORT_URL=\"https://bugs.launchpad.net/ubuntu/\"\n PRIVACY_POLICY_URL=\"https://www.ubuntu.com/legal/terms-and-policies/privacy-policy\"\n VERSION_CODENAME=focal\n UBUNTU_CODENAME=focal\n \n После замены: \n \n \nNAME=\"Ubuntu\" \n VERSION=\"20.04.5 LTS (Focal Fossa)\"\n ID=ubuntu\n ID_LIKE=debian\n PRETTY_NAME=\"Ubuntu 20.04.5 LTS\"\n VERSION_ID=\"18.04\"\n HOME_URL=\"https://www.ubuntu.com/\"\n SUPPORT_URL=\"https://help.ubuntu.com/\"\n BUG_REPORT_URL=\"https://bugs.launchpad.net/ubuntu/\"\n PRIVACY_POLICY_URL=\"https://www.ubuntu.com/legal/terms-and-policies/privacy-policy\"\n VERSION_CODENAME=focal\n UBUNTU_CODENAME=focal\n \n Для \nJetson TX2\n существует множество плат-носителей (\ncarrier board\n) и, как правило, производители плат предоставляют инструкцию по осуществлению патча образа для работы с их платой, поскольку образы из \nsdkmanager\n из коробки работают только с платами от \nNvidia\n. В нашем случае используется плата носитель \nAuvidea J120\n. На сайте \nhttps://auvidea.eu/firmware/\n находим подходящий патч образа (рисунок 1) и скачиваем архив. Позже он понадобится для внесения изменений в образ.\nРисунок 1: Патч ядра для платы \nAuvidea j120\n.\nВообще есть более свежий патч образа от декабря 2021 года, однако после прошивки этого образа USB порты на плате не работают, поэтому был выбран патч от февраля 2020 года.\nДалее запускаем \nsdkmanager\n:\nsdkmanager --archivedversions\nКлюч \narchivedversions\n нужен для того, чтобы в списке версий можно было выбрать нужную нам версию \nJetPack 4.3.\n Иначе она не будет представлена в списке.\nПосле запуска \nsdkmanager\n появится меню с просьбой ввести логин и пароль от аккаунта \nNvidia\n (Рисунок 2). Если аккаунта нет, то можно бесплатно зарегистрироваться на сайте \nnvidia.com\n.\nРисунок 2: Начальное меню \nsdkmanager\nПосле регистрации появится возможность выбора версии \nJetPack\n и тип \nJetson\n (Рисунок 3). Выбрать нужно так же как на рисунке 3.\nРисунок 3: Выбор версий \nJetPack\n и \nJetson\n.\nДалее переходим ко второму шагу (рисунок 4).На этом шаге скачивается образ и устанавливаются компоненты на хост.\nРисунок 4: Выбор компонентов для установки.\nСледующий шаг пропускаем, поскольку необходимо пропатчить образ джетсона для работы с платой \nauvidea j120\n. Допустим, что директория для установки была выбрана \"/tools/nvidia/\". Архив с патчем, загруженный с сайта \nauvidea\n распаковываем и вносим необходимые изменения в образ в соответствии с инструкцией:\ncp -r kernel_out/* /tools/nvidia/JetPack_4.3_Linux_JETSON_TX2/Linux_for_Tegra/\n cd /tools/nvidia/JetPack_4.3_Linux_JETSON_TX2/Linux_for_Tegra/\n sudo ./apply_binaries.sh\nПосле подключаем \njetson\n к ПК и переводим его в \nrecovery mode\n, для этого зажимаем кнопку \nForce recovery\n, затем нажимаем кнопку \nreset\n и отпускаем \nForce recovery\n. Далее прошиваем \nJetson\n:\n \ncd /tools/nvidia/JetPack_4.3_Linux_JETSON_TX2/Linux_for_Tegra/\n sudo ./flash.sh jetson-tx2 mmcblk0p1\nК \nJetson\n подключаем клавиатуру, мышку и монитор. Необходимо настроить сеть и рекомендуется выставить корректное время. Далее будем полагать, что адрес настроен такой: 192.168.0.160, пользователь - \nnvidia\n и пароль - \nnvidia\n.\nСборка Qt\nНа хосте переходим в директорию \"\nrootfs\"\n и чиним символьные ссылки:\ncd /tools/nvidia/JetPack_4.3_Linux_JETSON_TX2/Linux_for_Tegra/rootfs\nsudo ln -sf lib/aarch64-linux-gnu/libz.so.1  usr/lib/aarch64-linux-gnu/libz.so\n sudo ln -sf lib/aarch64-linux-gnu/libm.so.6  usr/lib/aarch64-linux-gnu/libm.so\n sudo ln -sf lib/aarch64-linux-gnu/libdl.so.2 usr/lib/aarch64-linux-gnu/libdl.so\n sudo ln -sf lib/aarch64-linux-gnu/libpng12.so.0.54.0 usr/lib/aarch64-linux-gnu/libpng.so\n Клонируем репозиторий и выбираем рабочую ветку:\ngit clone git://code.qt.io/qt/qtbase.git -b dev\n cd qtbase\n git checkout v5.12.10\n Переходим в папку с репозиторием и конфигурируем сборку \nQt\n:\n \n./configure -opensource --confirm-license -no-pkg-config -device linux-jetson-tx1-g++\n -device-option CROSS_COMPILE=aarch64-linux-gnu-\n -sysroot /tools/tx2/nvidia/JetPack_4.3_Linux_JETSON_TX2/Linux_for_Tegra/rootfs/ -prefix\n /usr/local/qt5 -extprefix /tools/tx2/qt5 -hostprefix /tools/tx2/qt5-host\n -nomake examples -nomake tests -no-opengl\n Далее собираем \nQt\n:\n \nmake -j8\n make install\n Собранные версии Qt для хоста и для девайса будут лежать по адресу, указанному при конфигурации сборки, в данном случае по адресу \"\n/tools/tx2/\n\". На джетсоне создаём папку и назначаем ей права пользователя:\n \nmkdir /usr/local/qt5\n sudo chown nvidia:nvidia qt5\n Затем синхронизируем папки с хоста:\n \nrsync -e ssh -avz qt5 nvidia@192.168.0.160:/usr/local\nНастройка сборки в Qt Creator\nПосле сборки Qt рекомендуется настроить \nQt Creator\n. Для сборки в \nQT Creator\n нужно указать компилятор, сборку Qt и связать их в один комплект (\nKit\n). В качестве компилятора мы использовали компилятор \nLinaro\n, скачать который можно на сайте \nhttps://releases.linaro.org/components/toolchain/binaries/\n.\nРисунок 5: Добавление компилятора в \nQt Creator\n.\nНа рисунке 5 изображен добавленный компилятор \nLinaro\n версии 4.9. После выбора компилятора, указываем путь до \nqmake (\nрисунок 6\n)\n.\nРисунок 6: Добавление версии Qt в \nQt Creator\n.\nДалее объединяем добавленные инструменты в один комплект под названием \"\nJetsonTx2\n\" (Рисунок 7).\nРисунок 7: Создание комплекта в \nQt Creator\n.\nТеперь можно собирать проекты под \nJetson\n в \nQt Creator\n!\n \n ",
    "tags": [
        "jetson",
        "qt5",
        "ubuntu",
        "cross-compile"
    ]
}