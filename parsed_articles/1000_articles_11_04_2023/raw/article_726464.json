{
    "article_id": "726464",
    "article_name": "Алерты в микросервисной архитектуре",
    "content": "В этом материале я постараюсь описать один из способов организации алертов в микросервисной архитектуре.\nВ незапамятные времена, когда еще не вышла последняя серия «Во все тяжкие», алерты чаще всего хранились в одном месте — будь то icinga, zabbix, TICK stack или тот же самый Prometheus. В этом есть свои плюсы — можно легко отслеживать изменения, грепнуть нужный алерт, накидать CI и так далее. Но когда речь заходит о микросервисной архитектура, где бизнес логика представлена отдельными сервисами, было бы логичным держать бизнес алертинг в коде микросервиса. \nЧто ж, давайте попробуем реализовать такой подход.\nВ представленном примере будет использоваться система мониторинга Prometheus/Alertmanager, развернутая в k8s. Микросервис тоже работает в k8s. Нотификации будем слать в Slack.\nИтак приступим.\nЧтобы хранить тело алерта рядом с микросервисом, воспользуемся ресурсом, который называется \nPrometheusRule\n. \nДобавим в values нашего микросервиса нужные значения и создадим правило в директории с хельм чартом:\n{{- if .Values.prometheusRule.enabled }}\n---\napiVersion: monitoring.coreos.com/v1\nkind: PrometheusRule\nmetadata:\n  labels:\n    {{- include \"ms-awesome.labels\" . | indent 4 }}\n    release: {{ .Values.prometheusRule.release |default(\"kube-prometheus-stack\") }}\n  name: ms-awesome-rule\nspec:\n  groups:\n    - name: ms-awesome-alerts\n      rules:\n       - alert: ms-awesome-alert\n         expr: test_metric{kubernetes_pod_name=~\"ms-awesome.*\"} == 1\n         for: 20s\n         labels:\n           severity: critical\n           product: \"{{ .Values.alert_info.product }}\"\n         annotations:\n           description: 'Test header in ms-awesome alert'\n           summary: 'This is test alert from ms-awesome'\n{{- end }}\nДалее установим и настроим Prometheus и Alertmanager. Для этого воспользуемся чартом kube-prometheus-stack. Настроим отправку алертов на основе label product:\nms-awesome-k8s-chart.yml\n---\n## Alertmanager configuration directives\n## ref: https://prometheus.io/docs/alerting/configuration/#configuration-file\n##      https://prometheus.io/webtools/alerting/routing-tree-editor/\n\nalertmanager:\n  enabled: true\n  ## Api that prometheus will use to communicate with alertmanager. Possible values are v1, v2\n  ##\n  apiVersion: v2\n\n  alertmanagerSpec:\n    externalUrl: http://prometheus-url-for-our-ms/prometheus/alerts?search=\n\n  ## Service account for Alertmanager to use.\n  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\n  ##\n  serviceAccount:\n    create: true\n    name: \"\"\n    annotations: {}\n\n  ## Configure pod disruption budgets for Alertmanager\n  ## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/#specifying-a-poddisruptionbudget\n  ## This configuration is immutable once created and will require the PDB to be deleted to be changed\n  ## https://github.com/kubernetes/kubernetes/issues/45398\n  ##\n  podDisruptionBudget:\n    enabled: false\n    minAvailable: 1\n    maxUnavailable: \"\"\n\n  config:\n    global:\n      resolve_timeout: 5m\n      slack_api_url: 'https://hooks.slack.com/services/awesome-link-for-alerts-channel'\n    templates:\n      - '/etc/alertmanager/config/*.tmpl'\n    route:\n      group_by: ['alertname', 'cluster', 'namespace']\n      group_wait: 30s\n      group_interval: 1m\n      repeat_interval: 1m\n      receiver: 'blackhole'\n      routes:\n        - receiver: \"default-receiver\"\n          matchers:\n            - severity =~ \"critical\"\n          continue: true\n        - receiver: \"ms-awesome-receiver\"\n          matchers:\n            - product = \"ms-awesome\"\n            - severity =~ \"warning|critical\"\n          continue: true\n\n    receivers:\n      - name: 'blackhole'\n      - name: 'default-receiver'\n      - name: 'ms-awesome-receiver'\n        slack_configs:\n          - channel: '{{ index ((index .Alerts 0).Labels) \"slack_channel_monitoring\" }}'\n            color: \"{{ if eq .Status `firing` }}#000080{{ else }}good{{ end }}\"\n            title: '{{ if eq .Status `firing` }}:scream:{{ else }}:heavy_check_mark:{{ end }} [{{ .Status | toUpper }}] {{ .Annotations.description }}'\n            text: '{{ .Annotations.summary }}'\n  tplConfig: false\n\n  ## Alertmanager template files to format alerts\n  ## By default, templateFiles are placed in /etc/alertmanager/config/ and if\n  ## they have a .tmpl file suffix will be loaded. See config.templates above\n  ## to change, add other suffixes. If adding other suffixes, be sure to update\n  ## config.templates above to include those suffixes.\n  ## ref: https://prometheus.io/docs/alerting/notifications/\n  ##      https://prometheus.io/docs/alerting/notification_examples/\n  ##\n  ## templateFiles: {}\n\nprometheus:\n  ingress:\n    hosts:\n\t  - prometheus-url-for-our-ms\n  prometheusSpec:\n    externalUrl: http://prometheus-url-for-our-ms\nЗаливаем хельм чарт с прометеем:\nhelm upgrade --install kube-prometheus-stack -f ms-awesome-k8s-chart.yml prometheus-community/kube-prometheus-stack -n monitoring\nЗаливаем чарт с микросервисом.\nЕсли все хорошо, то в неймспейсе, где залит микросервис, должен появится ресурс PrometheusRules, с описанием, которые указано выше. Именно этот ресурс должен в итоге поднять Prometheus. Идем по урлу Prometheus во вкладку alerts, там должен появится наш алерт. В случае, если этого не случилось, нужно проверить лейблы — а именно label release. Его значение должно совпадать со значением, которое указано в Prometheus в параметре ruleSelector. Если они не совпадают, то Prometheus просто не найдет это правило.\nГенерируем ошибку, чтобы метрика поменяла значение, ждем, пока алерт поменяет свое состояние, и, если alertmanager настроен правильно, наслаждаемся полученным результатом\np/s\nВ интернетах есть статья\n, как прокидывать канал из тела алерта. Эту опция, если честно, я не тестил, но вариант выглядит рабочим. Поэтому если кто то проверит и напишет результат, будет плюсик в карму ))\n \n ",
    "tags": [
        "мониторинг",
        "бизнес алерты",
        "prometheus monitoring",
        "микросервисы",
        "alertmanager"
    ]
}