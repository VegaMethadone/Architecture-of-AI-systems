{
    "article_id": "724632",
    "article_name": "«Прокачиваем» кнопочный Android смартфон за 13$. Как довести до ума телефон без официальной поддержки?",
    "content": "\r\n\n\r\nНе всегда производители различной техники выпускают действительно удобные и юзабельные гаджеты на рынок. Иногда на полки магазинов попадают довольно сырые устройства, а в случае бюджетных моделей — про них забывают сразу после выхода с конвейера. Другое дело, когда девайс оказывается непаханым полем в плане моддинга и всем свои видом намекает «давай, начни во мне копаться!», как и сегодняшний герой — Android-кнопочник Nobby 230! Сегодня мы с вами: напишем свой лаунчер, переработав UI телефона, портируем кастомное рекавери, добавим поддержку ROOT-доступа, вычистим хлам от производителя, предустановим необходимые приложения и оформим это всё в виде готового образа, который сможет поставить себе каждый владелец подобного телефона! Интересно?\n\r\n\n\r\n\n❯\n \n Предисловие\n\r\nЧестно сказать, я не ожидал такой обширной реакции на статью об этом кнопочнике. Многие читатели выражали неподдельный интерес к подобному классу устройств и хотели бы получить смартфон в формате классического кнопочника. И в целом вариантов не так уж и мало, на любой вкус, бери — да выбирай! Тут и QWERTY смартфоны, которыми можно управлять почти полностью с клавиатуры, такие как BlackBerry KeyOne и его формальный наследник — UniHertz Titan:\n\r\n\n\r\n\n\r\n\n\r\n\n\r\n\nДва красавца!\n\r\n\n\r\nТак и модели 2010-2011 годов, когда был настоящий бум на QWERTY клавиатур и почти каждый известный бренд выпускал модели в подобном форм-факторе, например, Acer BeTouch E130 или Galaxy Y Pro. Самое приятное в подобных девайсах — найти подобные смартфоны вы можете и сейчас по 500-1.500 рублей на барахолках, если вы вдруг не сильно привередливы к функционалу устройства.\n\r\n\n\r\n\n\r\n\nBeTouch 130 с трекболлом\n\r\n\n\r\n\n\r\n\nGalaxy Y Pro с очень точным оптическим трекпадом!\n\r\n\n\r\nНо всё же некоторым людям нужен обычный «тапок» в исполнении «моноблок». И вот тут всё гораздо сложнее: производители не хотят выпускать что-то серьёзное на этот рынок из-за рисков понести серьёзные убытки, ведь большинству людей кнопки не нужны вовсе. Однако, определенные шажки в эту сторону делаются. В первую очередь компанией Xiaomi, которая в 2018 выпустила Qin1s, оказавшийся весьма удачным, породив кучу (не смейтесь) реплик! Xiaomi оценили успех своего первенца и теперь время от времени развивает линейку Qin, выпуская кнопочные смартфоны на очень неплохом железе, которое тянет даже \nPUBG \nи \nGenshin Impact\n (!)\n\r\n\n\r\n\nQin 1S\n\r\n\n\r\n\nДа, это выглядит странно :)\n\r\n\n\r\nОригинальный Qin 1s был построен на слабом и дешевом железе от UniSOC — SC9820E, который при ближайшем рассмотрении оказывается унаследованным от давнего знакомого бюджетников из 2014 — SC7715. Российские ритейлеры смекнули — если себестоимость подобных телефонов копеечная, то нужно дать потребителю кнопочный смартфон с максимальной ценой до 2.000 рублей. И таки сделали — Nobby 230, BQ 2400G/2800, SenseIT L250. Мобилки неплохо продавались, даже на 4pda появлялись темы про них, но особого развития в моддинг-сообществе они не получили. И это надо исправлять.\n\r\n\n\r\n\n❯\n \n Что мы будем делать?\n\r\nСвой «нобби» я сейчас использую в качестве резервного смартфона, из которого можно выйти в ВК и настрочить сообщение. Но у него есть объективные косяки, которые мне очень не нравятся:\n\r\n\n\r\n\n\r\n\nДико неудобное меню (лаунчер). Оно не анимировано, слишком красочное и заставляет идти в подменю для просмотра всех приложений.\n\r\n\nОтсутствие ROOT-доступа. Я люблю моддить и копошиться в своих девайсах и точно знаю, что я такой далеко не один! Плюс наличие root-прав позволит нам на лету менять говерноры и ограничивать тактовую частоту чипсета, позволяя серьёзно экономить аккумулятор.\n\r\n\nНенужные и не удаляемые приложения — например Facebook Lite и WhatsApp, который не обновить штатными средствами.\n\r\n\n\r\nЗагрузчик устройства оказался разблокированным, поэтому никаких проблем с моддингом не возникнет. Ещё один важный момент: дешевые Android смартфоны хардварно практически идентичны — те же чипсеты, те же чипы памяти, даже дисплеи схожи. Вы скорее всего без каких-либо проблем сможете поставить на свой девайс готовую кастомную прошивку (которую я оставлю в конце статьи).\n\r\n\n\r\n\n❯\n \n Recovery\n\r\nКак я уже сказал, подобные устройства работают на базе очень старого чипсета SC7715, поэтому с портированием recovery проблем никаких не будет — уже есть готовые версии TWRP и CWM с других смартфонов, которые нужно будет пропатчить. Суть вот в чём: в этих смартфонах используется не eMMC, а дешевая NAND память малой емкости, для работы с которой используется механизм называемый UBI. UBI — это стандарт, состоящий из механизма описания разделов (как GPT/MBR) и UBIFS — специальной файловой системы, оптимизированной для работы на флэш-накопителях. Просто так его распаковать и работать с ним не выйдет — нужна машина с Linux на борту и пакетами для работы с UBI, а поскольку мы хотим моддить из под Windows — придётся немного мудрить.\n\r\n\n\r\nTWRP и CWM из коробки умеют монтировать раздел /system/ и предоставлять полный R/W доступ через adb. Так почему бы не использовать эту особенность для дальнейшей работы? Для портирования рекавери нам понадобится т. н. «кухня» для работы с образами — MTK Img Tools (после распаковки архива с софтом создаем папки Pack/Image и Unpack/Image), фирменная программа для прошивки ResearchDownload, родная \nпрошивка\n и какой-нибудь TWRP с другого телефона на SC7715. Я брал от ZTE A9.\n\r\n\n\r\nВ SP Flash Tool открываем PAC со скачанной прошивкой и видим в директории программы папку ImageFiles. Заходим в неё, копируем оттуда recovery.img в папку Unpack/Image нашей «кухни» и туда же копируем .img образ рекавери, которое мы портируем.\n\r\n\n\r\n\n\r\nРаспаковываем оба рекавери с помощью Unpack -> Recovery/Boot, идём в Unpack/Image/recovery/kernel/ (подразумевается \nродной\n recovery) и копируем ядро kernel из стока в папку kernel/ портируемого рекавери. Если его сейчас собрать и прошить — то рекавери запустится, но раздел system не увидит — из-за ubi, который нужно проинициализировать в init'е. Заходим в файл ramdisk/init.rc донорского рекавери и в on boot добавляем это:\n\r\n\n\r\n\nubiattach 0 ubipac\n\r\nmount_all /fstab.scx15\n\r\nmount -t ubifs /dev/ubi0_system /system/\n\r\n\n\r\nСохраняем, запаковываем наш модифицированный рекавери(Pack -> Recovery/Boot) и прошиваем его. А как же его прошить без ROOT прав, спросите вы? И тут нам поможет тот самый ResearchDownload! Нажимаем на шестеренки, жмем на строку recovery и выбираем выхлоп, который появился в Pack/Image MTKImgTool. В моем случае — recoverytwrp.img.\n\r\nВсе остальные галки снимаем — нам необходимо прошить только один раздел, закрываем диалог и жмем «старт». Подключаем смартфон \nвыключенным\n с зажатой кнопкой 5 и ждём, когда девайс прошьется! После прошивки передергиваем батарею.\n\r\n\n\r\n\n\r\nЗайти в рекавери легко: включаем отладку по USB, открываем командную строку и пишем \nadb reboot bootloader\n (если у вас конечно уже есть пакет adb). Устройство перезагрузится и если все сделано правильно — вы увидите рекавери, а ПК определит устройство как adb в режиме recovery с root доступом.\n\r\n\n\r\n\n❯\n \n ROOT доступ\n\r\nТут варианта два: прошить готовый архив SuperSU или ручками положить бинарник su в /system/sbin и прописать ему необходимые права, а затем установить само приложение SuperSU. Я выбрал второй вариант для наглядности процесса — помещаем su в /system/xbin, назначая ему права 06755, а SuperSU.apk — в /system/app. Всё — у нас появились ROOT права! Кроме того, отсюда можно прошить MicroG или даже полноценные гаппсы. Но как они будут работать на этом устройстве… я не знаю. :)\n\r\n\n\r\n\n❯\n \n Вычищаем хлам и заменяем приложения\n\r\nПоразительно! В прошивке не оказалось хлама, вообще. Тут нет никаких левых пакетов, ничего подозрительного. Но в вашем телефоне может быть по другому: см. папки /system/app и /system/priv-app. Я лично удалил WhatsApp.apk, Facebook.apk и заменил стандартный лаунчер с клавиатурой: оба от Xiaomi (сюда ссылку на архив), а также добавил Opera Mini для более комфортного серфинга в сети.\n\r\n\n\r\n\n\r\nЕсли у вас плохое зрение или вы модифицируете телефон для пожилого человека, вы можете увеличить размер элементов на дисплее, поменяв его dpi. Заходим в build.prop и меняем параметр «ro.sf.lcd_density» в большую сторону (125-130).\n\r\nА ещё можно поменять анимацию загрузки или убрать противный громкий звук. Ну если уж пустились в пляски, то почему бы не поставить яблочко на загрузку? :) Идём в /system/media/ и заменяем bootanimation.zip на скачанный из интернета (гугл 240x320 boot animations).\n\r\n\n\r\n\n\r\nКроме того, если у вас вдруг есть еще кнопки (качелька громкости например), вы можете ее назначить на какое-нибудь полезное действие — например, многозадачность или открытие шторки уведомлений. Для этого заходим в /system/usr/keylayout/gpio-keys.kl (ваш может называться по другому, ищите файл без копирайтов Android), смотрим где действие VOLUME_DOWN/VOLUME_UP и меняем на желаемое действие (можно посмотреть \nздесь\n) \n\r\n\n\r\nИз коробки на стоковой прошивке приложения устанавливать нельзя — так решил производитель, видимо, чтобы не ломать пользователю экспиренс несовместимыми приложениями. Однако это легко поправить — достаем build.prop:\n\r\n\n\r\n\nadb pull /system/build.prop\n\r\n\n\r\nМеняем в нем парааметр \npersist.sys.disable.app=true\n на false, и закидываем обратно:\n\r\n\n\r\n\nadb push build.prop /system/\n\r\n\n\r\n\n❯\n \n Кастомизировал прошивку под себя — что дальше?\n\r\nТеперь нам нужно сделать т. н. «вайпы» — стереть раздел с данными приложений, иначе Android может начать конфликтовать с ними и упасть в «бутлуп». Если примонтированы /data/ и /cache/, то достаточно прописать в \nadb recovery --wipe_data --wipe_cache\n. Перезагружаемся — работает? Загрузились? Первая загрузка может занимать пару минут, но если уж смартфон запустился и все работает как нужно — то значит вы всё сделали правильно!\n\r\n\n\r\nКак теперь поделится ей с сообществом? Вариантов три: использовать встроенный механизм бэкапов CWM (работает при условии, что вы починили все точки монтирования), запаковать весь образ /system/ в .tar архив, чтобы потом его распаковать одной командой, либо подготовить update архив (требует написания скрипта обновления, который сохранит все разрешения файлов). Плюс этого способа заключается в частичной автоматизации процесса установки прошивки. Делается это так:\n\r\n\n\r\n\ntar -cvf /sdcard/system.tar /system/\n\r\n\n\r\nНа флэшке должен появится system.tar, который уже хранит в себе все разрешения файлов и симлинки.\n\r\n\n\r\nКак потом кому-то установить вашу кастомную прошивку? Например вот так:\n\r\n\n\r\n\ntar -xvf /sdcard/system.tar -C /\n\r\n\n\r\nНе забываем вайпы! Вроде бы все довольно легко и просто, да? Ну это пока мы не касались темы модификации SystemUI или даже android.jar напрямую… Но в любом случае, информация в статье может оказаться полезной не только обладателям подобных кнопочников, но и обычных смартфонов, которые не знают с чего начать. На 4pda информация есть, но она недостаточно централизована, поэтому надеюсь, что эта статья будет полезной.\n\r\n\n\r\n\n❯\n \n Пишем свой лаунчер\n\r\nНадоел стандартный интерфейс системы? Напиши его сам! В процессе написания статьи меня очень сильно начал раздражать стандартный лаунчер. Он тормозной, у него нет плавности и он банально неудобен. Ну а лаунчеров под подобные версии системы практически нет…\n\r\n\n\r\n\n\r\nИ я решил запилить свой домашний экран, с виджетами и плавной анимацией! Сказано — сделано, лаунчер писался в попыхах, с учетом слабых мест UI-фреймворка Android. Минимум аллокаций, вся навигация в приложении через смену contentView (любой вызов startActivity занимал \nминимум\n одну секунду), плавные анимации через \nanimate\n, перерисовка только по необходимости и конечно же хоткеи!\n\r\n\n\r\n\n\r\nЛаунчер не имеет никаких внешних зависимостей кроме android.jar, в том числе и от мною нелюбимого AppCompat. Благодаря этому, конечный размер приложения составил всего 27кб, а потребление ОЗУ ~11мб. А ещё он добавляет удобные хоткеи: кнопка вверх откроет шторку уведомлений, влево откроет браузер, вправо — whatsapp, а вниз — музыкальный плеер!\n\r\nЗаценить \nкостыли\n лаунчер, написанный за один день, можно на моем \nGitHub\n!\n\r\n\n\r\n\nТеперь то он хоть юзабелен?\n\r\n\n\r\n\n\r\nВот теперь девайсом можно действительно пользоваться с некоторым комфортом! К сожалению, конкретно у моего экземпляра есть дефект с двойным нажатием кнопок — и дело не в мембранах, а самой пластиковой клавиатуре. Китайцы и тут решили сэкономить :(\n\r\n\n\r\n\n\r\nНо в остальном — смартфон работает вполне ничего. У нас появился относительно адекватный домашний экран, возможность накатить патчи интерфейса с помощью Magisk и без проблем обновлять WhatsApp (в одной из официальных прошивок был баг, который не позволял обновлять системные приложения).\n\r\n\n\r\n\n\r\nКак я уже говорил — на смартфоне без проблем работают WhatsApp и ВК, можно посерфить некоторые страницы или поиграть в несложные игрушки. Ребята с 4pda пишут, что берут его в армию, а кто-то на режимные объекты! И всё таки идея офигенная: теперь я точно уверен, что концепция смартфонов-кнопочников имеет право на жизнь и в первую очередь, если у них появится такое же моддинг-коммьюнити, как и в своё время у первых Android смартфонов!\n\r\n\n\r\nЭтот телефон мне очень напоминает жигули. Жигуль — неплохая машина за свою скромную цену, но как по мне — АвтоВАЗ сделал лишь минимум, чтобы машина могла привезти из точки А в точку Б (в случае нобби — позвонить и написать сообщение), открывая своей простотой кладезь возможностей различного тюнинга и доработок. Тоже самое и с нобби — ты покупаешь просто телефон. Но в отличии от большинства «тапков» — ты его ещё можешь довести под себя — а это самое ценное для техногика и любителя покопаться в различных девайсах!\n\r\n\n\r\n\n\r\nА вы как думаете? :) Жду ваше мнение в комментариях.\n\r\n\n\r\n\n \n ",
    "tags": [
        "timeweb_статьи",
        "моддинг",
        "кнопочники",
        "телефоы",
        "смартфоны",
        "android",
        "linux",
        "unix",
        "разработка",
        "java",
        "девайсы",
        "гаджеты"
    ]
}