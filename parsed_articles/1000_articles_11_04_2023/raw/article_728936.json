{
    "article_id": "728936",
    "article_name": "Как взломать Kubernetes (и как его защитить)",
    "content": "Kubernetes — ценный ресурс и ведущая система управления контейнерами в конвейерах разработки по всему миру, но это не освобождает её от вредоносных атак. Использование Kubernetes требует глубокого понимания среды, включая разные уязвимости, с которыми можно столкнуться при создании, развертывании или запуске приложений в ваших кластерах.\nПоскольку кластер Kubernetes один из самых ценных облачных ресурсов, он нуждается в защите. Его безопасность обеспечивает безопасность облака, кластеров приложений, контейнеров, приложений и кода. Хотя Kubernetes обеспечивает преимущества в области безопасности, укрепление способов защиты имеет решающее значение для обороны вашей системы от хакеров и других кибер-угроз.\nВ этом обзоре рассматриваются семь основных способов, которые могут подвергнуть кластер атаке, с соответствующими мерами противодействия к каждому.\nЗачем вам нужна защитная тактика для избегания взлома\nИз-за распределенной и динамичной природы кластера Kubernetes необходимо применять тактику защиты, соответствующую лучшим методам обеспечения безопасности на \nпротяжении всего жизненного цикла контейнера\n.\nХотя в Kubernetes есть несколько проблем безопасности на протяжении всего жизненного цикла приложения (сборка, развертывание и время выполнения), некоторые из наиболее важных проблем безопасности включают:\nИспользование кодов из непроверенных публичных реестров с открытым исходным кодом\n. Это создаёт бэкдоры, которыми могут воспользоваться субъекты угроз, получив доступ к критически важным ресурсам. Нужно защитить цепочку поставок программного обеспечения от вредоносных атак.\nНесоблюдение принципа наименьших привилегий (PoLP)\n. PoLP гарантирует, что вы ограничиваете привилегии, к которым имеют доступ пользователи. Согласно \nCISA\n, если субъекту не требуется право доступа, у него не должно быть этого права. Предоставление ненужных привилегий расширяет возможности атаки и создает больше лазеек в системе безопасности, которыми могут воспользоваться злоумышленники.\nСоздание сложных кластеров Kubernetes.\n Это затрудняет изоляцию и замену скомпрометированных кластеров при атаке, затрудняя процесс исправления. Так разработка адекватных стратегий защиты является ключом к постоянной защите кластеров от злоумышленников и неправильных настроек.\nСемь лучших тактик защиты кластеров Kubernetes\nХотя Kubernetes по умолчанию включает некоторые важные меры безопасности, разработчики должны изучить наиболее действенные методы для обеспечения безопасности своих кластеров.\nТактика защиты, описанная в этой статье, была выбрана на основе рекомендаций отраслевых стандартов по предотвращению взлома Kubernetes. В ней содержатся комментарии нескольких экспертов, объясняющие, как и почему эти стратегии помогут обезопасить рабочие нагрузки Kubernetes и снизить риски облачной среды.\n1. ABAC против RBAC  \nХотя управление доступом на основе атрибутов (ABAC) является отличным методом контроля доступа, его сложно понять и управлять им. Помимо своей сложности, ABAC предоставляет права доступа пользователям на основе пользовательских атрибутов, таких как атрибуты субъекта, атрибуты ресурса и атрибуты среды. ABAC предоставляет пользователям общекластерное разрешение делать все, что они хотят: создавать ресурсы в кластере, просматривать секреты, удалять коды и многое другое. Это не обеспечивает максимальной защиты и может иметь катастрофические последствия.\nKubernetes объявила о выпуске \nKubernetes 1.6\n 28 марта 2017 года, заявив, что управление доступом на основе ролей (RBAC), \nkubefed\n, \nkubeadm\n и другие функции планирования переходят в бета-версию. Переход RBAC в бета-версию стал главным событием этого анонса. Эндрю Грант, соучредитель \nControl Plane\n и соавтор \nHacking Kubernetes\n, отметил в \nстатье\n, что ABAC был заменен RBAC с версии 1.6 и что его не следует использовать на сервере API.\nПо словам Гранта, отключение ABAC и включение RBAC с наименьшими привилегиями обеспечивают мощную защиту от взлома. В отличие от ABAC, RBAC предоставляет права доступа пользователям на основе их ролей. Например, в то время как команда DevOps может иметь доступ к файлам программирования, команда управления проектом будет иметь доступ ко всем файлам проекта. Это пример того, что делает RBAC — включение разрешений на основе функций пользователей.\nВы можете включить RBAC, запустив сервер kube-apiserver с флагом \n--authorization-mode:\n  \nkube-apiserver --authorization-mode=Example,RBAC --other-options --more-options\nБолее подробную информацию о RBAC можно найти в \nдокументации Kubernetes\n и \nKubernetes API Access Hardening\n.  \n2. Следите за логами\nДругой способ предотвратить взлом кластеров — убедиться, что вы отслеживаете логи и регулярно проводите их аудит на предмет подозрительных действий, таких как необычные или нежелательные API-вызовы, особенно сбои аутентификации. Хотя ведение журнала аудита помогает анализировать и выявлять тенденции с течением времени, как отмечает \nАмир Каушански\n, вице-президент по продуктам Armo, оно чаще всего используется организациями для мониторинга производительности кластера Kubernetes и обеспечения безопасности.\nНапример, если запись в логе отображает статус сообщения типа «Запрещено», которое не было авторизовано администратором кластера, это может означать, что злоумышленник пытается использовать украденные учетные данные. Пользователи Kubernetes могут получить доступ к этим данным в своей консоли и настроить уведомления при сбое авторизации.\nВедение журнала аудита позволяет настраивать ведение журнала событий. Вы можете установить один из четырех уровней ведения журнала API:\nNone;\nТолько метаданные;\nRequest: при этом регистрируются метаданные и запросы, но не ответы;\nRequestResponse: регистрирует метаданные, запросы и ответы. \nПримечание: \nХранение этих логов внутри кластеров представляет угрозу безопасности, поскольку компрометация сектора любого кластера может предоставить хакерам логи, хранящиеся в этом кластере, и поставить под угрозу общую безопасность кластеров. Любые конфиденциальные журналы следует транспортировать за пределы кластера, чтобы снизить риск.\nЧтобы включить ведение журнала аудита, вам необходимо использовать флаг \n--audit-policy-file\n при запуске kube-apiserver. Файл политики содержит правила, которые определяют, что будет регистрироваться. Вот пример файла шаблона политики:\napiVersion: audit.k8s.io/v1\nkind: Policy\n# Ignore all requests in RequestReceived stage.\nomitStages:\n  - \"RequestReceived\"\nrules:\n  # Log pod changes at RequestResponse level\n  - level: RequestResponse\n    resources:\n    - group: \"\"\n      resources: [\"pods\"]\n3. Регулярно меняйте ключи шифрования  \nОдин из лучших методов обеспечения безопасности для защиты Kubernetes от злоумышленников — регулярная смена ключей шифрования и сертификатов. По умолчанию эти сертификаты выдаются с годичным сроком действия, так что вам не придется часто их продлевать. Однако вы также можете настроить их на более подходящее для вас время.\nKubernetes позволяет автоматически генерировать новый ключ и запрашивать новый сертификат у сервера API по мере истечения срока действия текущего сертификата. Как только новый сертификат станет доступен, он проверит подлинность подключений к API Kubernetes. Этот процесс экономит время, поскольку пользователю не нужно часто менять ключи и сертификаты.\nВажно всегда шифровать свои резервные копии с помощью хорошо зарекомендовавшего себя решения для шифрования резервных копий и по возможности использовать полное шифрование диска.\nРегулярная смена ключей шифрования и сертификатов ограничивает ущерб в случае компрометации ключа. К счастью, автоматизированный процесс смены ключей и сертификатов Kubernetes устраняет возможность человеческой ошибки: утечки конфиденциальных ключей.\nЕсли вы хотите узнать, как вращать ключи шифрования etcd в Kubernetes, ознакомьтесь с этой \nстатьей\n.\n4. Обновление версии Kubernetes  \nПоддержание Kubernetes в актуальном состоянии — отличный способ обезопасить кластеры от атак. Чтобы получить представление о том, насколько безопасна текущая версия, можете найти список уязвимостей Kubernetes в этом списке \nCVE\n.\nТем разработчикам, которые используют хостинг-провайдер, такой как AWS EKS, нужно проверить, автоматически ли ваш провайдер обновляет версию Kubernetes.\n5. Процессы внесения заявок в белый список  \nБелый список процессов помогает идентифицировать процессы, которые запускаются неожиданно.\nПервый шаг к использованию белого списка процессов для защиты Kubernetes — наблюдение и идентификация каждого процесса, который выполняется, когда приложение ведет себя нормально. Затем используйте этот список в качестве белого списка для проверки на наличие любых аномалий в будущем поведении приложения.\nЕсли хакеру удается получить доступ к кластеру и запустить вредоносные процессы, белый список помогает быстро выявлять и отмечать такие нарушения.\n6. Запускайте контейнеры от имени пользователя, не являющегося root\nЗапуск контейнеров от имени пользователя root приводит к нарушениям безопасности. Как пишет технический обозреватель Ракель Кампузано Годой \nна Bitnami\n, «любой, кто получает доступ к вашему контейнеру, работающему от имени root, может запустить в нем нежелательные процессы — такие как внедрение вредоносных кодов». Запуск контейнеров docker от имени пользователя \nroot\n также делает ваши приложения уязвимыми, поскольку позволяет пользователям изменять идентификатор пользователя или группы при запуске контейнера.\nПеренастройка ваших контейнеров с \nroot\n на \nnon-root\n обеспечивает дополнительный уровень защиты, который защищает вас от хакеров. Подборка \nnon-root\n  контейнеров изображений с пометкой «\nnon-root\n» доступна здесь, в репозитории \nBitnami на GitHub\n.\nЧтобы запустить контейнер от имени пользователя \nnon-root\n, вам необходимо установить поле \nsecuritycontext\n, чтобы точно указать, какие разрешения должен иметь контейнер. В этом контексте вам необходимо настроить \nsecuritycontext.RunAsUser\n и \nSecurityContext.runAsGroup\n для запуска контейнеров от имени пользователя, не являющегося root.\nВот\n как настроить контекст безопасности для модуля или контейнера.  \n7. Аудит использования kubectl\nИнтеграция Kubernetes со сторонним поставщиком аутентификации, таким как \nTeleport\n, является еще одним эффективным способом защиты ваших кластеров от субъектов угроз. Он предоставляет дополнительные функции безопасности, такие как многофакторная аутентификация, и гарантирует отсутствие изменений на сервере \nkube-api\n при добавлении или удалении пользователей.\nTeleport предлагает прокси-сервер доступа на основе идентификации для нескольких кластеров Kubernetes. Сертификаты пользователей выдаются после проверки их личности поставщиками единого входа (SSO), такими как Okta, GitHub, Google Apps и другими. \nTeleport Kubernetes Access\n предлагает простой унифицированный способ доступа ко всем средам через единую точку доступа, используя одного и того же поставщика удостоверений. Это обеспечивает одинаковые правила доступа на основе ролей (RBAC) для всех ваших кластеров и ресурсов Kubernetes, обеспечивая безопасный доступ к ним.\nTeleport предоставляет компаниям передовые методы обеспечения безопасности. Используйте его, чтобы:\nЗащитите свои кластеры Kubernetes, соблюдая требования соответствия;\nБезопасный доступ к базовой инфраструктуре Linux;\nПредотвратите атаки honeypot и устраните проблему доверия при первом использовании;\nРазрешить пользователям перечислять все серверы и другие текущие онлайн-ресурсы;\nУлучшите прозрачность доступа и поведения в вашей инфраструктуре;\nПолное воспроизведение \nkubectl execs\n;\nСократите операционные издержки, связанные с внедрением передовых методов обеспечения безопасности.\nВывод\nХотя многие команды DevOps включают меры безопасности по умолчанию, которые поставляются с Kubernetes, этих мер недостаточно для защиты кластеров от атак. \nНа курсе \n«Kubernetes: Мега»\n мы рассказываем о том, как отладить механизмы обеспечения стабильности и безопасности, отказоустойчивости приложений и масштабирования.\nhttps://slurm.club/3mpeC0h\nБдительные команды DevOps должны делать больше для создания защиты, необходимой для предотвращения проникновения хакеров в системы.\n \n ",
    "tags": [
        "network",
        "kubernetes",
        "k8s",
        "slurm",
        "it-компании",
        "it-инфраструктура",
        "карьера программиста",
        "карьера ит-специалиста"
    ]
}