{
    "article_id": "725788",
    "article_name": "44 совета по Ansible: рекомендации и Best Practices",
    "content": "Ansible — один из наиболее часто используемых программных инструментов с открытым исходным кодом для управления конфигурацией, предоставления программного обеспечения и развертывания приложений в облачных и локальных средах. В этой статье мы поделимся Practices по настройке Ansible, предложим интересные подходы для эффективной работы с внутренними компонентами продукта.\nБазовые Best Practices\nВыбирайте YAML вместо JSON: \nХотя Ansible позволяет использовать синтаксис JSON, с YAML читать файлы и проекты гораздо легче.\nИспользуйте одинаковые пробелы:\n Чтобы красиво разделить объекты и улучшить читаемость, оставьте пустую строку между блоками, задачами или другими компонентами.\nИспользуйте последовательную стратегию тегирования\n: Тегирование — это мощная функция в Ansible, поскольку она позволяет группировать задачи и детальнее ими управлять. Теги дают нам возможность добавлять тонкие элементы управления выполнением задач.\nДобавляйте комментарии:\n Если вы считаете, что это необходимо, не стесняйтесь использовать комментарии, объясняющие цель и причину возникновения задач, переменных и так далее.\nИспользуйте стратегию с последовательным именованием\n: Прежде, чем приступить к настройке своих проектов в Ansible, подумайте о применении последовательной стратегии именования для задач, плейбуков, переменных, ролей и модулей.\nОпределите руководство по стилю\n: Следуйте букве руководства — оно поможет последовательно выполнять задачи. Если вы ищете вдохновение, посмотрите на это руководство по стилю от \nOpenShift\n.\nБудьте проще\n: Ansible предоставляет множество опций и расширенных возможностей, но это не значит, что мы должны использовать их все в один момент времени. Найдите те инструменты Ansible, которые подходят для вашего случая, и попытайтесь максимально упростите свой проект. Например, начните с простого плейбука и файла инвентаризации, а более сложные инструменты или рефакторинг добавьте позже.\nХраните свои проекты в системе контроля версий (VCS)\n: Сохраняйте файлы Ansible в репозитории кода и регулярно фиксируйте новые изменения.\nНе храните конфиденциальные значения в обычном тексте\n: Для секретов и конфиденциальных значений используйте Ansible Vault для шифрования переменных и файлов и защиты любой конфиденциальной информации.\nТестируйте проекты\n: Используйте инструменты типа Ansible Lint и добавляйте этапы тестирования в конвейеры CI/CD для ваших репозиториев Ansible. Для тестирования ролей Ansible рекомендуем взглянуть на \nMolecule\n. Для тестирования вводимых данных или проверки пользовательских выражений можно использовать модуль assert.\nОрганизуйте каталоги\nПосмотрите, как выглядит хорошо организованная структура каталогов Ansible:\ninventory/\n    production                # inventory file for production servers\n    staging                   # inventory file for staging environment\n    testing                   # inventory file for testing environment\n \ngroup_vars/\n   group1.yml             # variables for particular groups\n   group2.yml\nhost_vars/\n  host1.yml               # variables for particular systems\n  host2.yml\n \nlibrary/                  # Store here any custom modules (optional)\nmodule_utils/             # Store here any custom module_utils to support modules (optional)\nfilter_plugins/           # Store here any filter plugins (optional)\n \nmaster.yml                # master playbook\nwebservers.yml            # playbook for webserver tier\ndbservers.yml             # playbook for dbserver tier\n \nroles/\n   example_role/               # this hierarchy represents a \"role\"\n       tasks/            #\n           main.yml      #  <-- tasks file can include smaller files if warranted\n       handlers/         #\n           main.yml      #  <-- handlers file\n       templates/        #  <-- files for use with the template resource\n           ntp.conf.j2   #  <------- templates end in jinja2\n       files/            #\n           bar.txt       #  <-- files for use with the copy resource\n           foo.sh        #  <-- script files for use with the script resource\n       vars/             #\n           main.yml      #  <-- variables associated with this role\n       defaults/         #\n           main.yml      #  <-- default lower priority variables for this role\n       meta/             #\n           main.yml      #  <-- role dependencies\n       library/          # roles can also include custom modules\n       module_utils/     # roles can also include custom module_utils\n       lookup_plugins/   # or other types of plugins, like lookup in this case\n \n   monitoring/              # same kind of structure as \"common\" was above, done for the monitoring role\nBest Practices инвентаризации \nBest Practices\nИспользуйте группы инвентаризации\n: Группируйте узлы на основе общих атрибутов, которые они могут разделять — расположение, цель, роли, среда.\nДелайте отдельную инвентаризацию для каждой среды\n: Определите отдельный файл инвентаризации для каждой среды — производственной, промежуточной, тестовой и так далее, чтобы изолировать их друг от друга и избежать ошибок, связанных с неправильным выбором среды.\nПроводите динамическую инвентаризацию\n: При работе с облачными провайдерами или быстро меняющимися средами ведение статических инвентаризаций может стать сложной задачей. \nИспользуйте динамическую группировку во время работы\n: Мы можем создавать динамические группы с помощью модуля `group_by` на основе заданного атрибута — к примеру, на основе их операционной системы — и выполнять различные задачи на каждом из них без определения таких групп в инвентаризации.\n- name: Gather facts from all hosts\n  hosts: all\n  tasks:\n    - name: Classify hosts depending on their OS distribution\n      group_by:\n        key: OS_{{ ansible_facts['distribution'] }}\n \n# Only for the Ubuntu hosts\n- hosts: OS_Ubuntu\n  tasks:\n    - # tasks that only happen on Ubuntu go here\n    \n# Only for the CentOS hosts\n- hosts: OS_CentOS\n  tasks:\n    - # tasks that only happen on CentOS go here\nBest Practices для плейбуков и сценариев\nВсегда указывайте статус задач: \nЧтобы сделать ваши задачи более понятными, задавайте параметр state, даже если это не требуется из-за значения по умолчанию.\nРазмещайте каждый аргумент задачи в отдельной строке\n: Это помогает сделать файлы Ansible более удобными для чтения. Рассмотрим несколько примеров:\nЭто рабочий, но плохо читаемый вариант:\n- name: Add the user {{ username }}\n  ansible.builtin.user: name={{ username }} state=present uid=999999 generate_ssh_key=yes\n  become: yes\nВместо этого вы можете использовать данный синтаксис: он улучшает читабельность и понятность задач и их аргументов:\n- name: Add the user {{ username }}\n  ansible.builtin.user:\n     name: \"{{ username }}\"\n     state: present\n     uid: 999999\n     generate_ssh_key: yes\n  become: yes\nИспользуйте плейбуки верхнего уровня для оркестровки плейбуков нижнего уровня\n: Вы можете логически сгруппировать задачи, сценарии и роли в низкоуровневых плейбуках и использовать плейбуки верхнего уровня для требуемой вам оркестровки. \nГруппируйте задачи с помощью блочного синтаксиса\n: Задачи, которые связаны друг с другом и имеют общие атрибуты или теги, могут быть сгруппированы с помощью функции blok. Еще одним преимуществом этой опции является более простой задач, находящихся в одном блоке.\n- name: Install, configure, and start an Nginx web server\n  block:\n    - name: Update and upgrade apt\n      ansible.builtin.apt:\n        update_cache: yes\n        cache_valid_time: 3600\n        upgrade: yes\n \n    - name: \"Install Nginx\"\n      ansible.builtin.apt:\n        name: nginx\n        state: present\n \n    - name: Copy the Nginx configuration file to the host\n      template:\n        src: templates/nginx.conf.j2\n        dest: /etc/nginx/sites-available/default\n        \n    - name: Create link to the new config to enable it\n      file:\n        dest: /etc/nginx/sites-enabled/default\n        src: /etc/nginx/sites-available/default\n        state: link\n \n    - name: Create Nginx directory\n      ansible.builtin.file:\n        path: /home/ubuntu/nginx\n        state: directory\n \n    - name: Copy index.html to the Nginx directory\n      copy:\n        src: files/index.html\n        dest: /home/ubuntu/nginx/index.html\n      notify: Restart the Nginx service\n  when: ansible_facts['distribution'] == 'Ubuntu'\n  tags: nginx\n  become: true\n  become_user: root\nИспользуйте контроллеры для запущенных задач:\n Контроллеры позволяют выполнить задачу после внесенных изменений. Контроллер будет запущен, когда произойдут изменения в файле \nindex.html\n из приведенного выше примера.\nhandlers:\n  - name: Restart the Nginx service\n    service:\n      name: nginx\n      state: restarted\n    become: true\n    become_user: root\nBest Practices для переменных\nПеременные позволяют пользователям параметризовать различные компоненты Ansible и хранить значения, которые мы можем повторно использовать. \nВсегда задавайте значения по умолчанию для ваших переменных\n: Установите значения по умолчанию для всех групп в \ngroup_vars/all\n. Для каждой роли установите переменные по умолчанию в \nroles/<role_name>/defaults.main.yml\n.\nИспользуйте каталоги groups_vars и host_vars\n: Чтобы файл инвентаризации был максимально аккуратным и лаконичным,  устанавливайте переменные групп и хостов в каталогах \ngroups_vars\n и \nhost_vars\n.\nСсылайтесь на роль в переменных в качестве префикса:\n Старайтесь быть четкими при определении имен переменных для ролей. \nnginx_port: 80\napache_port: 8080\nBest Practices для модулей\nХраните локальные модули рядом с плейбуками\n: Используйте каталог .\n/library\n каждого проекта Ansible для хранения соответствующих пользовательских модулей. Плейбуки, которые имеют каталог \n./library\n относительно своего пути, могут напрямую ссылаться на любые модули внутри него.\nНе используйте модули command и shell\n: Рекомендуем использовать их только тогда, когда нет другого выбора. Вместо этого выбирайте специализированные модули, которые обеспечивают отказоустойчивость и необходимую обработку ошибок.\nУказывайте аргументы модуля, когда это имеет смысл\n: Во многих аргументах модулей значения по умолчанию могут быть опущены. Для удобства можно указать некоторые из этих аргументов, например, для определения статуса плейбука.\nОтдавайте предпочтение многозадачности в модуле, а не циклам:\n Наиболее эффективным способом определения списка однотипных задач типа установки пакетов является использование нескольких задач в одном модуле.\n- name: Install Docker dependencies\n  ansible.builtin.apt:\n     name:\n       - curl\n       - ca-certificates\n       - gnupg\n       - lsb-release\n     state: latest\nДокументируйте и тестируйте пользовательские модули\n: Каждый пользовательский модуль должен содержать примеры, записанные настройки и описание полученных ответов. Новые модули следует тщательно тестировать перед выпуском. Вы можете создать плейбуки для тестирования пользовательских модулей и проверки различных сценариев для тестов.\nBest Practices для ролей\nСледуйте структуре каталога ролей Ansible Galaxy\n: Используйте команду \nansible-galaxy init <role_name>\n для создания стандартного каталога ролей.\nСохраняйте назначение ролей\n: Каждая роль должна иметь отдельную ответственность и отдельную функциональность. Разделяйте роли на основе различных функциональных возможностей или технических областей задач.\nОграничивайте зависимости между ролями:\n Избегая большого количества зависимостей в ваших ролях, вы поддерживать их слабосвязанными, разрабатывать их независимо друг от друга и использовать их без заморочек со сложными зависимостями между ними.\nОтдавайте предпочтение модулям import_role или include_role\n: Чтобы лучше контролировать порядок выполнения ролей и задач, используйте модули \nimport_role\n или \ninclude_role\n, а не классические роли.\nБудьте осторожны в отношении Ansible Galaxy Roles\n: При загрузке и использовании содержимого и ролей из Galaxy проверяйте содержимое файлов и выбирайте роли от надежных авторов.\nХраните используемые роли Galaxy локально\n: Чтобы не зависеть от внешнего репозитория Ansible Galaxy, вы можете хранить любые роли из Galaxy в своих репозиториях кода и управлять ими как частью проекта.\nBest Practices для развертывания среды\nСначала протестируйте изменения в staging: \nЭто отличный способ убедиться в том, что изменения приведут к ожидаемому результату, а не к новым проблемам.\nОграничьте выполнение задач заданными узлами\n: Если вы хотите запустить плейбук на определенном хосте, вы можете использовать флаг \n--limit\n. Если вам нужно запустить только определенные задачи из плейбука на основе тегов, вы можете определить, какие теги будут выполняться, с помощью флага \n--tags\n.\nПроверьте, какие задачи будут запущены перед выполнением\n: Вы можете использовать флаг \n--list-tasks\n для подтверждения того, какие задачи будут запущены без их фактического выполнения. Вы можете использовать флаг \n--list-hosts\n: так вы убедитесь в том, на какие хосты повлияет плейбук, но при этом не запустить его.\nУбедитесь в том, что вы собрались менять, но при этом не запускайте обновления\n: Используйте флаг \n--check\n для прогнозирования изменений, которые могут произойти. Объедините его с флагом \n--diff\n, чтобы показать различия в измененных файлах.\nНачните с конкретной задачи\n: Используйте флаг \n--start-at-task\n, чтобы плейбук начал работать с выбранной вами задачи.\nИспользуйте Rolling Updates для контроля количества целевых машин\n: По умолчанию Ansible пытается запустить программу параллельно на всех хостах. Чтобы добиться непрерывных обновлений, вы можете использовать ключевое слово serial. Используя это ключевое слово, вы можете определить, на скольких хостах изменения могут выполняться параллельно.\nУправляйте стратегией выполнения (запуска) playbook\n: По умолчанию Ansible завершает выполнение каждой задачи на всех хостах перед переходом к следующей задаче. Если вы хотите выбрать другую стратегию выполнения, ознакомьтесь с\n этой документацией\n. \nОт редакции\nС инструментами Ansible мы подробно знакомимся на курсе \nDevOps Upgrade\n — интенсивном курсе для тех, кто хочет стать DevOps-инженером. Поток стартует с практическими заданиями и поддержкой от спикеров курса стартует уже 15 мая — узнать подробнее о программе и присоединиться к группе вы можете на нашем сайте.  \n \n ",
    "tags": [
        "ansible",
        "ansible playbook",
        "ansible roles",
        "ansible-lint",
        "администрирование",
        "devops",
        "it-инфраструктура",
        "карьера it-специалиста"
    ]
}