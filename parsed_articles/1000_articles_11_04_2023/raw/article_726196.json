{
    "article_id": "726196",
    "article_name": "Методика портирования пакетов Python в операционную систему «Нейтрино»",
    "content": "Многие расширения (модули) \nPython\n поставляются в виде \nплатформонезависимого\n \nбайт-кода\n и могут быть использованы в системах с любой архитектурой. Однако, в некоторых случаях расширения поставляются в виде \nPy-исходников\n лишь частично. Например, часть внутренних функций может быть реализована на Си и для обеспечения работоспособности всего расширения потребуется их предкомпиляция для каждой требуемой архитектуры. В контексте ОС «Нейтрино» перечень последних \nдостаточно широк\n.\nВ статье рассмотрим общий подход к портированию \nPython\n-расширений в нашу ОС. Для примера возьмем \nNumPy\n, чей жизненный путь проходит следующие стадии: нативный \nPyhton \nкод →трансляция в Си (\nCython\n) → компиляция → запаковка результатов с \nwrapper\n-ами для \nPython\n.\nПодготовка окружения для cross-сборки\nВ состав \nКомплекта Разработчика (КР)\n наряду с \nruntime\n-компонентами самого \nPython\n входит сборочное окружения для \ncross\n-компиляции расширений\n. С его помощью можно выполнять как автоматизированную подготовку пакетов, так и ручную с необходимым уровнем кастомизации.\nСразу стоит отметить, что поддержка \ncross\n-сборки расширений \nPython\n осуществляется \nтолько\n для инструментальных систем на базе дистрибутивов \nLinux\n. Для отдельных процедур может потребоваться подключение к сети.\nВо избежание проблем с совместимостью инструментальные средства (КР) включают версию \nPython\n, которая будет доступна и в \nruntime\n-окружении. Также на инструментальной системе должен быть установлен \nPython\n-модуль \ncrossenv\n, однако, это не является обязательным условием, так как впоследствии он может быть загружен автоматически (см. далее).\nПерво-наперво следует воспользоваться скриптом \npython-setup-crossenv.sh\n, который произведёт настройку сборочного окружения. Ключевыми параметрами здесь являются опция \n-t\n, задающая целевую архитектуру, и \nкаталог\n, в котором будут развёрнуты платформо-зависимые компоненты. Так, после выполнения команды\n$ python-setup-crossenv.sh\nв текущей директории будет создан каталог \n./venv/\n и в нем будут созданы независимые окружения для всех поддерживаемых архитектур. Лог его выполнения позволяет получить представление о составе окружения:\nЛог исполнения скрипта python-setup-crossenv.sh\n$ python-setup-crossenv.sh\nCreating virtual Python environment in /home/a-n-d/venv...\nBuilding cross environment for python3.9 (x86)... done!\nPatching /home/a-n-d/venv/x86/cross/bin/python3.9... done!\nUse \". /home/a-n-d/venv/x86/bin/activate\" command to enable cross environment for x86 platform.\nBuilding cross environment for python3.9 (armle-v7)... done!\nPatching /home/a-n-d/venv/armle-v7/cross/bin/python3.9... done!\nUse \". /home/a-n-d/venv/armle-v7/bin/activate\" command to enable cross environment for armle-v7 platform.\nBuilding cross environment for python3.9 (ppcbe)... done!\nPatching /home/a-n-d/venv/ppcbe/cross/bin/python3.9... done!\nUse \". /home/a-n-d/venv/ppcbe/bin/activate\" command to enable cross environment for ppcbe platform.\nBuilding cross environment for python3.9 (ppcbe-spe)... done!\nPatching /home/a-n-d/venv/ppcbe-spe/cross/bin/python3.9... done!\nUse \". /home/a-n-d/venv/ppcbe-spe/bin/activate\" command to enable cross environment for ppcbe-spe platform.\nBuilding cross environment for python3.9 (mipsbe)... WARNING: CC is a compound command (['mips-unknown-nto-qnx6.5.0-gcc', '-EB'])\nWARNING: This can cause issues for modules that don't expect it.\nWARNING: Consider setting CC='mips-unknown-nto-qnx6.5.0-gcc' and CFLAGS='-EB'\nWARNING: CXX is a compound command (['mips-unknown-nto-qnx6.5.0-g++', '-EB'])\nWARNING: This can cause issues for modules that don't expect it.\nWARNING: Consider setting CXX='mips-unknown-nto-qnx6.5.0-g++' and CXXFLAGS='-EB'\ndone!\nPatching /home/a-n-d/venv/mipsbe/cross/bin/python3.9... done!\nUse \". /home/a-n-d/venv/mipsbe/bin/activate\" command to enable cross environment for mipsbe platform.\nBuilding cross environment for python3.9 (mipsle)... WARNING: CC is a compound command (['mips-unknown-nto-qnx6.5.0-gcc', '-EL'])\nWARNING: This can cause issues for modules that don't expect it.\nWARNING: Consider setting CC='mips-unknown-nto-qnx6.5.0-gcc' and CFLAGS='-EL'\nWARNING: CXX is a compound command (['mips-unknown-nto-qnx6.5.0-g++', '-EL'])\nWARNING: This can cause issues for modules that don't expect it.\nWARNING: Consider setting CXX='mips-unknown-nto-qnx6.5.0-g++' and CXXFLAGS='-EL'\ndone!\nPatching /home/a-n-d/venv/mipsle/cross/bin/python3.9... done!\nUse \". /home/a-n-d/venv/mipsle/bin/activate\" command to enable cross environment for mipsle platform.\nBuilding cross environment for python3.9 (e2kle)... done!\nPatching /home/a-n-d/venv/e2kle/cross/bin/python3.9... done!\nUse \". /home/a-n-d/venv/e2kle/bin/activate\" command to enable cross environment for e2kle platform.\nСтоит отметить, что при запуске \ncross\n-окружения, становится доступна \nспециализированная версия\n интерпретатора \nPython\n, именно в которой должна производиться работа с портируемыми пакетами:\n$ . ./venv/x86/bin/activate\n(cross) $ cross-python3 ...\nДля удаления артефактов сборки в последующем будет достаточно удалить сами каталоги \n./venv/\n, \n./cache/\n и репозитории проектов. При успешном завершении этого шага можно переходить к сборке расширений и их пакетов (\nк вопросу о яйцах и колёсах\n).\nАвтоматизированный режим установки расширений\nПопробуем спортировать достаточно простое расширение, не требующее патчей в исходники или предкомпиляции. Их есть в достатке, например, \nhuman_math\n. Запускаем \ncross\n-окружение для соответствующей архитектуры и пробуем установить пакет \"из коробки\":\n$ . ./venv/x86/bin/activate \n(cross) $ cross-python3 -m pip install human_math\nCollecting human_math\n  Downloading human_math-0.1-py3-none-any.whl (13 kB)\nInstalling collected packages: human-math\nSuccessfully installed human-math-0.1\nПри успешном завершении в каталоге \n./venv/x86/cross/lib/python3.9/site-packages/\n появятся каталоги \nhuman_math/\n  и \nhuman_math-0.1.dist-info/\n. Один из вариантов дальнейших действий — руками затащить эти каталоги на таргет в эквивалентную директорию \n/usr/lib/python3.9/site-packages\n. Альтернативно, и, наверное, более правильно, их можно запаковать в архив, эквивалентный оригиналу:\n$ cd venv/x86/cross/lib/python3.9/site-packages\n$ zip -r human_math-0.1-py3-none-any.whl human_math*\nИ установить его через пакетный менеджер, предварительно накатив \npip\n по его \nштатной инструкции\n. В конечном счете это позволит проверить пакет \nпо ванильным рекомендациям авторов\n:\n$ uname -a\nKPDA EAea7e68 20.09 2020/09/03-14:45:00-MSK x86pc x86\n$\n$ python -m ensurepip --upgrade\n...\nInstalling collected packages: setuptools, pip\nSuccessfully installed pip-20.2.3 setuptools-49.2.1\n$\n$ python3 -m pip install ./human_math-0.1-py3-none-any.whl\nProcessing ./human_math-0.1-py3-none-any.whl\nInstalling collected packages: human-math\nSuccessfully installed human-math-0.1\n$\n$ python3\nPython 3.9.0 (default, Sep  3 2020, 14:45:00) \n[GCC 4.8.3]\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import human_math as hm\n>>> tree = hm.parse(\"2 - (-sin(3pi/2)) - 3.0\")\n>>> tree\n((2 - (-1 * sin(3 * (pi / 2)))) - 3)\n>>> tree.evaluate()\n-2\nПри анализе приведённых логов можно заметить, что непосредственно \ncross\n-сборки в данном случае не наблюдается. Для рандомного пакета это не всегда заведомо известно и стоит сначала проверить эмпирически (на самом деле информация о расширении может быть найдена на сайте разработчика и при анализе заявленных языков \nв каталоге пакетов\n, но это не всегда точно). Фактически, при установленном \npip\n, в данном случае всю рассмотренную процедуру \nможно производить прямо на таргете\n. Очевидно, что для этого пакета также нет зависимости от архитектуры и проводить повторное портирование для всех вариантов не нужно ‒ о чем нам намекает постфикс \n-none-any\n в имени пакета.\nРассмотрим второй пример, в котором компиляция гарантировано требуется. Возьмем, к примеру, \nрасширение для расчета расстояния Левенштейна\n. Заявлено, что оно написано на Си и \nPython\n. Порядок действий точно такой же, разве что добавим вызову \npip install\n вербозности, чтобы увидеть свидетельства вызова компилятора:\nФрагмент лога сборки расширения polyleven\n$ python-setup-crossenv.sh -tx86\nCreating virtual Python environment in /home/a-n-d/venv...\nBuilding cross environment for python3.9 (x86)... done!\nPatching /home/a-n-d/venv/x86/cross/bin/python3.9... done!\nUse \". /home/a-n-d/venv/x86/bin/activate\" command to enable cross environment for x86 platform.\n$\n$ . ./venv/x86/bin/activate\n(cross) $\n(cross) $ cross-python3 -m pip install -v polyleven\nUsing pip 20.2.3 from /home/a-n-d/venv/x86/build/lib/python3.9/site-packages/pip (python 3.9)\nNon-user install because user site-packages disabled\nCreated temporary directory: /tmp/pip-ephem-wheel-cache-fg_fuga_\nCreated temporary directory: /tmp/pip-req-tracker-f3sa3exq\nInitialized build tracking at /tmp/pip-req-tracker-f3sa3exq\nCreated build tracker: /tmp/pip-req-tracker-f3sa3exq\nEntered build tracker: /tmp/pip-req-tracker-f3sa3exq\nCreated temporary directory: /tmp/pip-install-kfgre1ru\n1 location(s) to search for versions of polyleven:\n* https://pypi.org/simple/polyleven/\nFetching project page and analyzing links:\n...\nGiven no hashes to check 6 links for project 'polyleven': discarding no candidates\nUsing version 0.8 (newest of versions: 0.3, 0.4, 0.5, 0.6, 0.7, 0.8)\nCollecting polyleven\n  Created temporary directory: /tmp/pip-unpack-mg3leorj\n  Starting new HTTPS connection (1): files.pythonhosted.org:443\n  https://files.pythonhosted.org:443 \"GET ... polyleven-0.8.tar.gz HTTP/1.1\" 200 6373\n  Downloading polyleven-0.8.tar.gz (6.4 kB)\n  Added polyleven from https://...\n    Running setup.py (path:/tmp/pip-install-kfgre1ru/polyleven/setup.py) egg_info for package polyleven\n    Created temporary directory: /tmp/pip-pip-egg-info-kpfd_tqt\n    Running command python setup.py egg_info\n    running egg_info\n    creating /tmp/pip-pip-egg-info-kpfd_tqt/polyleven.egg-info\n    writing /tmp/pip-pip-egg-info-kpfd_tqt/polyleven.egg-info/PKG-INFO\n    writing dependency_links to /tmp/pip-pip-egg-info-kpfd_tqt/polyleven.egg-info/dependency_links.txt\n    writing top-level names to /tmp/pip-pip-egg-info-kpfd_tqt/polyleven.egg-info/top_level.txt\n    writing manifest file '/tmp/pip-pip-egg-info-kpfd_tqt/polyleven.egg-info/SOURCES.txt'\n    reading manifest file '/tmp/pip-pip-egg-info-kpfd_tqt/polyleven.egg-info/SOURCES.txt'\n    reading manifest template 'MANIFEST.in'\n    warning: no files found matching 'README.md'\n    writing manifest file '/tmp/pip-pip-egg-info-kpfd_tqt/polyleven.egg-info/SOURCES.txt'\n  Source in /tmp/pip-install-kfgre1ru/polyleven has version 0.8, which satisfies requirement polyleven from https://...\n  Removed polyleven from https://...\nUsing legacy 'setup.py install' for polyleven, since package 'wheel' is not installed.\nInstalling collected packages: polyleven\n  Created temporary directory: /tmp/pip-record-m5pksfmh\n    Running command /home/a-n-d/venv/x86/cross/bin/python3 -u -c 'import sys, setuptools, tokenize; sys.argv[0] = '\"'\"'/tmp/pip-install-kfgre1ru/polyleven/setup.py'\"'\"'; __file__='\"'\"'/tmp/pip-install-kfgre1ru/polyleven/setup.py'\"'\"';f=getattr(tokenize, '\"'\"'open'\"'\"', open)(__file__);code=f.read().replace('\"'\"'\\r\\n'\"'\"', '\"'\"'\\n'\"'\"');f.close();exec(compile(code, __file__, '\"'\"'exec'\"'\"'))' install --record /tmp/pip-record-m5pksfmh/install-record.txt --single-version-externally-managed --compile --install-headers /home/a-n-d/venv/x86/cross/include/site/python3.9/polyleven\n    running install\n    running build\n    running build_ext\n    building 'polyleven' extension\n    creating build\n    creating build/temp.qnx--i486-3.9\n    i486-pc-nto-qnx6.5.0-gcc -Wno-unused-result -Wsign-compare -DNDEBUG -g -O3 -Wall -fno-aggressive-loop-optimizations -fPIC -D_QNX_SOURCE -std=c99 -DNDEBUG -g3 -I. -I. -I. -I. -I. -I. -I. -I. -I. -DBUILDENV_qss -D__KPDA__ -D__KPDANTO__ -I/home/a-n-d/venv/x86/cross/include -I/opt/kpda2020/target/neutrino/x86/usr/include/python3.9 -c polyleven.c -o build/temp.qnx--i486-3.9/polyleven.o\n    creating build/lib.qnx--i486-3.9\n    i486-pc-nto-qnx6.5.0-gcc -shared -L. -L. -L. -L. -L. build/temp.qnx--i486-3.9/polyleven.o -o build/lib.qnx--i486-3.9/polyleven.so\n    running install_lib\n    copying build/lib.qnx--i486-3.9/polyleven.so -> /home/a-n-d/venv/x86/cross/lib/python3.9/site-packages\n    running install_egg_info\n    running egg_info\n    writing polyleven.egg-info/PKG-INFO\n    writing dependency_links to polyleven.egg-info/dependency_links.txt\n    writing top-level names to polyleven.egg-info/top_level.txt\n    reading manifest file 'polyleven.egg-info/SOURCES.txt'\n    reading manifest template 'MANIFEST.in'\n    warning: no files found matching 'README.md'\n    writing manifest file 'polyleven.egg-info/SOURCES.txt'\n    Copying polyleven.egg-info to /home/a-n-d/venv/x86/cross/lib/python3.9/site-packages/polyleven-0.8-py3.9.egg-info\n    running install_scripts\n    writing list of installed files to '/tmp/pip-record-m5pksfmh/install-record.txt'\n    Running setup.py install for polyleven ... done\nSuccessfully installed polyleven-0.8\nСборка также прошла в автоматизированном режиме, но, в отличие от первого примера, потребовала полноценной предкомпиляции (см. в логе \n-gcc\n),  однако, можно заметить предупреждение об отсутствии пакета \nwheel\n. Если установить его, то также будут созданы материалы для формирования \nколеса\n:\n$ cd venv/x86/cross/lib/python3.9/site-packages\n$ zip -r polyleven-0.8-py3-none-any.whl polyleven*\nВ конечном счете следует проверить работоспособность расширения на таргете по \nсоответствующей методике\n:\n$ python3 -m pip install ./polyleven-0.8-py3-none-any.whl\nProcessing ./polyleven-0.8-py3-none-any.whl\nInstalling collected packages: polyleven\nSuccessfully installed polyleven-0.8\n$\n$ python3\nPython 3.9.0 (default, Sep  3 2020, 14:45:00) \n[GCC 4.8.3]\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from polyleven import levenshtein\n>>> levenshtein('aaa', 'ccc')\n3\n>>> levenshtein('deadbeef', 'coffee')\n6\nПодобные действия \nвыполнимы только в режиме \ncross\n-сборки\n на инструментальной системе.\nНо не все расширения настолько автономны.\nРучной режим сборки и портирование исходников\nВ некоторых случаях сборка может потребовать более тщательного подхода. Так, всем известный \nNumPy\n, при сборке проходит более интересные стадии: нативный \nPyhton \nкод →трансляция части исходников в Си (\nCython\n) → компиляция (\nGCC\n) → запаковка результатов с \nwrapper\n-ами для \nPython\n.\nВ первую очередь скачиваем официальный репозиторий проекта и переключаемся на стабильную версию (в нашем случае на ту, которая проверялась на совместимость с дистрибутивом ОС соответствующей редакции):\n$ git clone https://github.com/numpy/numpy.git\n$ cd numpy/\n$ git checkout v1.20.2\nПриступая к портированию, запасёмся каталогом для размещения результатов сборки, и переключаемся в окружение \ncross\n-сборки. После этого пробуем выполнить авторские рекомендации по сборке, размещённые \nв оригинальном репозитории\n и тут же получаем ошибку вида:\n(cross) $ cross-python3 setup.py build -j16 install --prefix /home/a-n-d/install/\nRunning from numpy source directory.\n...\nModuleNotFoundError: No module named 'Cython'\nБешеной собаке, как говорится... Забегая немного вперёд, в этом случае понадобится не только \nCython\n, но и ещё один пакет (если он не был установлен при воспроизведении предыдущего подхода).\n(cross) $ cross-pip3 install wheel\n(cross) $ cross-pip3 install Cython\n(cross) $ cross-python3 setup.py build -j16 install --prefix /home/a-n-d/install/\n...\nДо своего финала сборка не дойдет, поскольку \nNumPy\n не сможет определить платформу компилятора. Для выяснения причин проблемы всегда начинать стоит с чтения логов сборки и, что ещё важнее, их \nосознания\n. Из гуманных соображений сами логи приводить не стану. Патч же к исходникам имеет вид:\nnumpy/distutils/ccompiler_opt.py:\n@ -894,3 +894,3 @@ class _CCompiler(object):\n            (\"cc_on_x64\",      \".*(x|x86_|amd)64.*\"),\n---            (\"cc_on_x86\",      \".*(win32|x86|i386|i686).*\"),\n+++            (\"cc_on_x86\",      \".*(win32|x86|i386|i486|i686).*\"),\n            (\"cc_on_ppc64le\",  \".*(powerpc|ppc)64(el|le).*\"),\n\nВся сборка в 16 потоков на \nRyzen 7 5700G\n / \nHDD\n занимает около полутора минут. По факту создаётся \nяйцо\n. Поскольку данный формат пакетов считается устаревшим, при желании, с помощью следующей команды, можно собрать и \nколесо\n:\n(cross) $ cross-python3 setup.py sdist bdist_wheel\nПоступать с ним следует ровно также, как и в предыдущем случае. Если работа с пакетами по каким-то причинам не подходит, материалы для ручного тиражирования на таргете(-ах) можно обнаружить в инсталляционной директории. В заключении выполним \nпервичную проверку работоспособности\n, рекомендуемую авторами на главной странице сайта проекта:\n$ python3 -m pip install ./numpy-1.20.2-py3-none-any.whl\nProcessing ./numpy-1.20.2-py3-none-any.whl\nInstalling collected packages: numpy\nSuccessfully installed numpy-1.20.2\n$\n$ python3\nPython 3.9.0 (default, Sep  3 2020, 14:45:00) \n[GCC 4.8.3]\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import numpy as np\n>>> x = np.arange(15, dtype=np.int64).reshape(3, 5)\n>>> x[1:, ::2] = -99\n>>> x\narray([[  0,   1,   2,   3,   4],\n       [-99,   6, -99,   8, -99],\n       [-99,  11, -99,  13, -99]], dtype=int64)\n>>> x.max(axis=1)\narray([ 4,  8, 13], dtype=int64)\n>>> rng = np.random.default_rng()\n>>> samples = rng.normal(size=2500)\n>>> samples\narray([ 1.32379234,  0.29264934, -1.03925619, ..., -0.68672435,\n       -1.55879728,  1.21000793])\nВ некоторых пакетах авторы документируют что нужно предпринять для успешного портирования в новое окружение. Примером такого расширения является, например, \nRedlibssh2\n (см разделы \"\nSystem library build\n\" и \"\nCustom Compiler Configuration\n\"). Но это делают лишь добросовестные разработчики. В достаточно крупных проектах, к которым относится и \nNumPy\n, обычно с этим не заморачиваются. А фикс исходников и/или правил сборки как раз и составляют \nосновную трудоемкость\n при портировании.\nP.S. При установке через \npip\n на таргете может потребоваться изменить последний компонент в имени колеса на \nany\n, поскольку штатный скрипт \nsetup.py\n проекта может неправильно назвать формируемый пакет.\nP.P.S. В процессе подготовки статьи \nнейросетью\n сгенерирован ряд иллюстраций, а выкидывать жалко:\nСерпентарий\n \n ",
    "tags": [
        "операционные системы",
        "зосрв",
        "зосрв «нейтрино»",
        "программирование",
        "встраиваемые системы",
        "python",
        "packages",
        "numpy"
    ]
}