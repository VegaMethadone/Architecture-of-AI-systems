{
    "article_id": "726324",
    "article_name": "–ê–ª–≥–æ—Ä–∏—Ç–º Diffie-Hellman: –ö–ª—é—á –∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º—É –æ–±—â–µ–Ω–∏—é",
    "content": "–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç!\n \n–î–∞–≤–Ω–æ —Ö–æ—Ç–µ–ª –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—å—é —Ç—É—Ç, –Ω–æ –Ω–∏–∫–∞–∫ –Ω–µ –Ω–∞—Ö–æ–¥–∏–ª –ø–æ–≤–æ–¥–∞ –¥–ª—è —Ö–æ—Ä–æ—à–µ–π —Ç–µ–º—ã. –û–¥–Ω–∞–∫–æ —è —É–∂–µ –¥–∞–≤–Ω–æ –≤–µ–¥—É \n—Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª –ø–æ Backend —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ,\n –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—É–±–ª–∏–∫—É—é —Ä–∞–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Backend, —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—é –ø—Ä–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –¥–µ–ª—é—Å—å –ø–æ–ª–µ–∑–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º.\n–°–µ–≥–æ–¥–Ω—è —è —Ö–æ—á—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –≤–∞–º –æ \n–≤–æ–ª—à–µ–±–Ω–æ–º\n –∞–ª–≥–æ—Ä–∏—Ç–º–µ, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç–æ–∏—Ç –∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –æ–±—â–µ–Ω–∏–µ–º –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ, –∏, –≤ —á–∞—Å—Ç–Ω–æ—Å—Ç–∏, –≤ –Ω–∞—à–µ–º –ª—é–±–∏–º–æ–º –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ - \nTelegram\n. –≠—Ç–æ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º –î–∏—Ñ—Ñ–∏-–•–µ–ª–ª–º–∞–Ω–∞, –∏ –µ–≥–æ –∏—Å—Ç–æ—Ä–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤ –¥–∞–ª–µ–∫–æ–º 1976 –≥–æ–¥—É. –ù–∞ —ç—Ç–æ–º —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∑–∞–∫–æ–Ω—á–∏–º üôÇ\n–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?\n–ê–ª–≥–æ—Ä–∏—Ç–º –î–∏—Ñ—Ñ–∏-–•–µ–ª–ª–º–∞–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –¥–≤–µ —Å—Ç–æ—Ä–æ–Ω—ã –º–æ–≥–ª–∏ —Å–æ–∑–¥–∞—Ç—å –æ–±—â–∏–π \n—Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á\n, –µ–≥–æ –µ—â–µ –Ω–∞–∑—ã–≤–∞—é—Ç \n¬´—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–π –∫–ª—é—á¬ª\n, –∫–æ—Ç–æ—Ä—ã–π –∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è \n—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è\n –∏ \n–¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è\n —Å–æ–æ–±—â–µ–Ω–∏–π.¬†\n‚ùóÔ∏è–°–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ - —ç—Ç–æ—Ç –∫–ª—é—á —Å–æ–∑–¥–∞–µ—Ç—Å—è –±–µ–∑ –ø—Ä—è–º–æ–≥–æ –æ–±–º–µ–Ω–∞ –∏–º –º–µ–∂–¥—É —Å—Ç–æ—Ä–æ–Ω–∞–º–∏.\n–ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã\n–ê–ª–≥–æ—Ä–∏—Ç–º –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –ø—Ä–∏–Ω—Ü–∏–ø–µ\n \"—Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–∏—Å–∫—Ä–µ—Ç–Ω–æ–≥–æ –ª–æ–≥–∞—Ä–∏—Ñ–º–∞\"\n.¬†\n–ó–≤—É—á–∏—Ç —Å—Ç—Ä–∞—à–Ω–æ, –Ω–æ —Å—É—Ç—å –≤ —Ç–æ–º, —á—Ç–æ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –ª–µ–≥–∫–æ –≤—ã—á–∏—Å–ª–∏—Ç—å –≤ –æ–¥–Ω—É —Å—Ç–æ—Ä–æ–Ω—É, –Ω–æ –æ—á–µ–Ω—å —Å–ª–æ–∂–Ω–æ –æ–±—Ä–∞—Ç–Ω–æ. –ù–∞–ø—Ä–∏–º–µ—Ä –µ—Å–ª–∏ –æ–±—Ä–∞—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —Å–ª–æ–∂–µ–Ω–∏—è —ç—Ç–æ –≤—ã—á–∏—Ç–∞–Ω–∏–µ, –∞ –¥–ª—è —É–º–Ω–æ–∂–µ–Ω–∏—è —ç—Ç–æ –¥–µ–ª–µ–Ω–∏–µ, —Ç–æ –≤–æ—Ç –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞—Ç–∫–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ—Ç.¬†–ü–æ—ç—Ç–æ–º—É –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –î–∏—Ñ—Ñ–∏-–•–µ–ª–ª–º–∞–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏.¬†\n–ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞\n–î–æ–ø—É—Å—Ç–∏–º, –ê–ª–∏—Å–∞ –∏ –ë–æ–± —Ö–æ—Ç—è—Ç —Å–æ–∑–¥–∞—Ç—å –æ–±—â–∏–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á, –∏—Å–ø–æ–ª—å–∑—É—è –∞–ª–≥–æ—Ä–∏—Ç–º –î–∏—Ñ—Ñ–∏-–•–µ–ª–ª–º–∞–Ω–∞. –û–Ω–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:\n–ê–ª–∏—Å–∞ –∏ –ë–æ–± –≤—ã–±–∏—Ä–∞—é—Ç –æ–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: \n–æ—Å–Ω–æ–≤–∞–Ω–∏–µ\n \ng\n (–¥–æ–ø—É—Å—Ç–∏–º, 5) –∏ \n–±–æ–ª—å—à–æ–µ –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ\n \np\n (–¥–æ–ø—É—Å—Ç–∏–º, 23).\n –ê–ª–∏—Å–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á \na\n (–¥–æ–ø—É—Å—Ç–∏–º, 6) –∏ –≤—ã—á–∏—Å–ª—è–µ—Ç —Å–≤–æ–π –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á A:¬†\nA = g^a mod p = 5^6 mod 23 = 15625 mod 23 = 8.\n –ë–æ–± –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á \nb\n (–¥–æ–ø—É—Å—Ç–∏–º, 9) –∏ –≤—ã—á–∏—Å–ª—è–µ—Ç —Å–≤–æ–π –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á B:¬†\nB = g^b mod p = 5^9 mod 23 = 1953125 mod 23 = 11.\n –ê–ª–∏—Å–∞ –∏ –ë–æ–± –æ–±–º–µ–Ω–∏–≤–∞—é—Ç—Å—è –ø—É–±–ª–∏—á–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏: –ê–ª–∏—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ–π –∫–ª—é—á A (8) –ë–æ–±—É, –∞ –ë–æ–± –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ–π –∫–ª—é—á B (11) –ê–ª–∏—Å–µ.\n –ê–ª–∏—Å–∞ –≤—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â–∏–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á s:¬†\ns = B^a mod p = 11^6 mod 23 = 1771561 mod 23 = 9.\n–ë–æ–± –≤—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â–∏–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á s: \ns = A^b mod p = 8^9 mod 23 = 134217728 mod 23 = 9.\n–¢–µ–ø–µ—Ä—å –ê–ª–∏—Å–∞ –∏ –ë–æ–± –∏–º–µ—é—Ç –æ–±—â–∏–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á s, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–≤–µ–Ω 9. –≠—Ç–æ—Ç –∫–ª—é—á –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–∂–¥—É –Ω–∏–º–∏.\n–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –æ–±—â–µ–Ω–∏—è\n–¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ —Å—Ç–æ—Ä–æ–Ω—ã –∏–º–µ—é—Ç –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á, –æ–Ω–∏ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –¥–ª—è \n—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è\n –∏ \n–¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è\n —Å–æ–æ–±—â–µ–Ω–∏–π. –ù–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –≤—Å–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä—è–º–æ–π –æ–±–º–µ–Ω —Å–µ–∫—Ä–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –º–µ—Ç–æ–¥ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –¥–ª—è –æ–±—â–µ–Ω–∏—è.\n–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ Diffie-Hellman –∞–ª–≥–æ—Ä–∏—Ç–º–∞\n–ê–ª–≥–æ—Ä–∏—Ç–º Diffie-Hellman –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤, —Ç–∞–∫–∏—Ö –∫–∞–∫:\n1. TLS/SSL: –ü—Ä–æ—Ç–æ–∫–æ–ª—ã –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—â–∏–µ –∑–∞—â–∏—â–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–æ–º –∏ —Å–µ—Ä–≤–µ—Ä–æ–º.\n2. IPSec: –ü—Ä–æ—Ç–æ–∫–æ–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –∑–∞—â–∏—Ç—ã –¥–∞–Ω–Ω—ã—Ö, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã—Ö —á–µ—Ä–µ–∑ —Å–µ—Ç–∏, –≤ —Ç–æ–º —á–∏—Å–ª–µ –≤ VPN-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è—Ö.\n3. SSH: –ü—Ä–æ—Ç–æ–∫–æ–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±–æ–ª–æ—á–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–µ—Ä–∞–º –∏ –æ–±–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã–º–∏ –º–µ–∂–¥—É –Ω–∏–º–∏.\n–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ GoLang\n–ê —Ç–µ–ø–µ—Ä—å –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ —Ä–∞—Å—Å–∫–∞–∂—É –∫–∞–∫ —è —ç—Ç–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª, –≤–µ—Å—å –∫–æ–¥ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –≤ —ç—Ç–æ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏: \nhttps://github.com/vseriousv/diffiehellman\n.\n–ù–∞—á–Ω–µ–º —Å —Ç–æ–≥–æ —á—Ç–æ —è –±—É–¥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Go-Ethereum –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∏ –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–ª—é—á–µ–π. –¢–∞–∫–æ–π –ø–∞–∫–µ—Ç —è —É–∂–µ –Ω–∞–ø–∏—Å–∞–ª —Ä–∞–Ω–µ–µ, –µ–≥–æ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ —ç—Ç–æ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏: \nhttps://github.com/vseriousv/blockchainkeys\n.\n–¢–∞–º –≤—Å–µ –ø—Ä–æ—Å—Ç–æ, –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –∏ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é \nNewBlockchain()\n, –≤ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Ç–∏–ø –±–ª–æ–∫—á–µ–π–Ω–∞ \nblockchainkeys.Ethereum\n. –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É, —É –∫–æ—Ç–æ—Ä–æ–π –º–æ–∂–µ–º –≤—ã–∑–≤–∞—Ç—å –º–µ—Ç–æ–¥ GenerateKeyPair(). –ü–æ–ª—É—á–∏–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∏ –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á–∏.\n// –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä—É –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∏ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞\n\nfunc getKeys() (string, string, error) {\n\tbc, err := blockchainkeys.NewBlockchain(blockchainkeys.Ethereum)\n\tif err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t\treturn \"\", \"\", err\n\t}\n\n\tprivateKey, publicKey, _, err := bc.GenerateKeyPair()\n\tif err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t\treturn \"\", \"\", err\n\t}\n\n\treturn privateKey, publicKey, nil\n}\n–°–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä—É –∫–ª—é—á–µ–π –¥–ª—è –ê–ª–∏—Å—ã –∏ –ë–æ–±–∞ –∏—Å–ø–æ–ª—å–∑—É—è –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é:\n\t// Generation ALisa pair\n\tprivateAlisa, publicAlisa, err := getKeys()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\t// Generation Bob pair\n\tprivateBob, publicBob, err := getKeys()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–π –∫–ª—é—á, –Ω–∞–ø–∏—à–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏ –Ω–∞—à –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á.\nfunc GetTransportKey(publicKey, privateKey string) (string, error) {\n    // –¢–∞–∫ –∫–∞–∫ –∫–ª—é—á–∏ –≤ Ethereum –∏–º–µ—é—Ç –ø—Ä—Ñ–∏–∫ 0x, –æ–±—Ä–µ–∑–∞–µ–º –µ–≥–æ\n\tprivateKeyAHex := privateKey[2:]\n    // –ü—Ä–∏–≤–æ–¥–∏–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∫ BigInt\n\tprivateKeyABigInt, success := new(big.Int).SetString(privateKeyAHex, 16)\n\tif !success {\n\t\treturn \"\", errors.New(\"invalid private key format\")\n\t}\n\n    // –¢—É—Ç —Ç–æ–∂–µ –æ–±—Ä–µ–∑–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å\n\tpublicKeyBHex := publicKey[2:]\n    // –ü—Ä–∏–≤–æ–¥–∏–º –≤ –±–∞–π—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç\n\tpublicKeyBBytes, err := hex.DecodeString(publicKeyBHex)\n\tif err != nil {\n\t\treturn \"\", errors.New(\"invalid public key format\")\n\t}\n    // –î–∞–ª–µ–µ –Ω–∞–º –Ω—É–∂–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∞–π—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –≤ secp256k1\n\tpublicKeyB, err := crypto.UnmarshalPubkey(publicKeyBBytes)\n\tif err != nil {\n\t\treturn \"\", errors.New(\"unmarshalling public key failed\")\n\t}\n    // –º–∞–≥–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–º X –∏ Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —ç–ª–∏–ø—Ç–∏—á–µ—Å–∫–æ–π –∫—Ä–∏–≤–æ–π —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ secp256k1 \n\tsharedSecretX, _ := secp256k1.S256().ScalarMult(publicKeyB.X, publicKeyB.Y, privateKeyABigInt.Bytes())\n\tif sharedSecretX == nil {\n\t\treturn \"\", errors.New(\"scalar multiplication failed\")\n\t}\n\n    // –ù—É –∏ –∑–∞–≤–µ—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è –Ω–∞–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–π –∫–ª—é—á\n\ttransportKey := crypto.Keccak256(sharedSecretX.Bytes())\n\treturn hex.EncodeToString(transportKey), nil\n}\nHidden text\n–Ø –¥–∏–∫–æ –∏–∑–≤–∏–Ω—è—é—Å—å, —á—Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è –æ—á–µ–Ω—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–æ –æ–ø–∏—Å—ã–≤–∞—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—ã —Ä–∞–±–æ—Ç—ã —Å —ç–ª–∏–ø—Ç–∏—á–µ—Å–∫–∏–º–∏ –∫—Ä–∏–≤—ã–º–∏ –∏ –∫–∞–∫ —É—Å—Ç—Ä–æ–µ–Ω—ã –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ, –ø–æ—Å–∫–æ–ª—å–∫–æ –∏–Ω–∞—á–µ —ç—Ç–∞ —Å—Ç–∞—Ç—å—è –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –¥–ª–∏–Ω–Ω–æ–ø–æ—Å—Ç. –û–¥–Ω–∞–∫–æ –≤ –±—É–¥—É—â–µ–º —è –ø–æ–ø—Ä–æ–±—É—é –Ω–∞–ø–∏—Å–∞—Ç—å —Å—Ç–∞—Ç—å—é –ø—Ä–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é secp256k1.\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —è –Ω–∞–ø–∏—Å–∞–ª –ø—Ä–æ—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ \n\"crypto\"\n–≤ Go. \nhttps://pkg.go.dev/crypto/aes\nfunc Encrypt(message, key []byte) ([]byte, error) {\n\t// Create a new AES block cipher\n\tblock, err := aes.NewCipher(key[:32])\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Create a new GCM encryption mode\n\taead, err := cipher.NewGCM(block)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Create a random nonce\n\tnonce := make([]byte, aead.NonceSize())\n\tif _, err := rand.Read(nonce); err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Encrypt the message using a nonce and propagate the tag\n\tciphertext := aead.Seal(nil, nonce, message, nil)\n\tciphertext = append(nonce, ciphertext...)\n\treturn ciphertext, nil\n}\n\nfunc Decrypt(cipherText, key []byte) (string, error) {\n\t// Create a new AES block cipher\n\tblock, err := aes.NewCipher(key[:32])\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\t// Create a new GCM encryption mode\n\taead, err := cipher.NewGCM(block)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\t// Extract the nonce from the encrypted message\n\tnonceSize := aead.NonceSize()\n\tnonce, ciphertext := cipherText[:nonceSize], cipherText[nonceSize:]\n\n\t// Decode the message and check the tag\n\tplaintext, err := aead.Open(nil, nonce, ciphertext, nil)\n\tif err != nil {\n\t\treturn \"\", nil\n\t}\n\n\treturn string(plaintext), nil\n}\n–ò—Ç–æ–≥–æ –∏–º–µ–µ–º, —á—Ç–æ —É –ê–ª–∏—Å—ã –∏ –ë–æ–±–∞ –µ—Å—Ç—å –ø–∞—Ä—ã –∫–ª—é—á–µ–π –∏ –º—ã —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –ê–ª–∏—Å—ã, –∏—Å–ø–æ–ª—å–∑—É—è –µ–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∏ –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –ë–æ–±–∞, –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Å—å –Ω–∞—à–µ–π —Ñ—É–Ω–∫—Ü–∏–µ–π \nGetTransportKey(publicBob, privateAlisa)\n:\n\t// Get transportKey for Alisa,\n\t// Alisa has publicKey(Bob) and privateKey(Alisa)\n\ttransportKeyOne, err := transport_key.GetTransportKey(publicBob, privateAlisa)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tlog.Println(\"transportKeyOne\", transportKeyOne)\n–ê –¥–∞–ª–µ–µ –∑–∞—à–∏—Ñ—Ä—É–µ–º –Ω–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–º –∫–ª—é—á–æ–º:\n\t// Alisa's encryption message for Bob\n\tmessage := []byte(\"Hello Bob, I'm Alisa\")\n\tencryptionMessage, err := encryption.Encrypt(message, []byte(transportKeyOne))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n–ß—Ç–æ–±—ã –ë–æ–±—É —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ–º—É —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–π –∫–ª—é—á –∏—Å–ø–æ–ª—å–∑—É—è —Å–≤–æ–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∏ –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –ê–ª–∏—Å—ã, –∏—Å–ø–æ–ª—å–∑—É—è –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é \nGetTransportKey(publicAlisa, privateBob)\n\t// Get transportKey for Bob,\n\t// Bob has publicKey(Alisa) and privateKey(Bob)\n\ttransportKeyTwo, err := transport_key.GetTransportKey(publicAlisa, privateBob)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tlog.Println(\"transportKeyTwo\", transportKeyTwo)\n–ê –¥–∞–ª–µ–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É—è –Ω–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–π –∫–ª—é—á –ë–æ–±–∞:\n\t// Bob decrypt message from Alisa\n\tmessageResult, err := encryption.Decrypt(encryptionMessage, []byte(transportKeyTwo))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n–í –∏—Ç–æ–≥–µ –≤—ã–≤–µ–¥–µ–º —ç—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥, —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.\n–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–≤–æ–¥–∞ —Ñ—É–Ω–∫—Ü–∏–∏\n–ü–æ–ª–Ω—ã–π –∫–æ–¥ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–∏–º–µ—Ä–∞ —Ä–∞–±–æ—Ç—ã\n.\n–í—Å–µ–º —Å–ø–∞—Å–∏–±–æ –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ.\n \n ",
    "tags": [
        "golang",
        "ethereum",
        "diffie-hellman",
        "example",
        "cryptography"
    ]
}