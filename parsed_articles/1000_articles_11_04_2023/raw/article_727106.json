{
    "article_id": "727106",
    "article_name": "Кот в колесе: как узнать, с какой скоростью и в какую сторону бегают котики",
    "content": "Да, это точно кот, а не большой чёрный хомяк. Оказывается, некоторые кошки тоже не прочь понаворачивать круги в колесе. Владелец кота по имени Cygnus (Лебедь) решил немного усовершенствовать кошачье беговое колесо и прикрутил к нему систему мониторинга. Рассказываем, как работает устройство и какие интересные факты о кошачьей активности можно из него извлечь. \nА на что вы готовы ради своих котиков? \nКот в колесе. Начало\nЭто колесо \nOne Fast Cat\n я получил от подруги, которая не смогла научить своих кошек им пользоваться. Лебедь молод, активен и падок на угощения, поэтому заставить его бегать в колесе было несложно.\nМне очень хотелось выяснить, до какой скорости он разгоняется (спойлер: почти до 22,5 км в час), как часто он бегает и как ему больше нравится крутить колесо: по часовой стрелке или против. \nАппаратное обеспечение\nСистема довольно проста. Сначала я приклеил маленькие магниты к пластиковым деталям на внешней части колеса:\nПо всей окружности колеса расположено 16 пластиковых зажимов, но в силу лени я использовал только 8 из них. Серебряный диск — это магнит, закрепленный на термоклей. Чтобы зафиксировать момент прохождения магнита я использовал пару датчиков \n3144E Hall-effect\n:\nТехнически, для измерения скорости мне нужен был только один датчик. Но я хотел измерять ещё и направление, а датчики всё равно дешевые. Идея проста: два датчика расположены близко друг к другу, а магниты (относительно) далеко друг от друга. Если при прохождении колеса мы получаем сигналы AB------AB------AB, то колесо движется в одном направлении. Если BA------BA------BA, то в другом направлении.\nВот полностью собранная система:\nШтука, похожая на стул, надевается на одну из опор колеса. На неё установлен ESP8266, который я использовал в качестве контроллера, а также небольшой угловой элемент, мимо которого будут проходить магниты. Все детали регулируются, чтобы установить разумное расстояние до магнитов (я выяснил, что нормальным будет 5-10 мм). Файлы STL для 3D-принтера прилагаются: \nбаза NodeMCU\n , \nкронштейн для датчика\n и \nплатформа для датчика\n.\nВходные данные для чипа ESP берутся с цифрового пина выхода (D0) каждого датчика; помимо этого требуются только питание и заземление. Датчики потребляют так мало энергии, что ESP может питать их напрямую.\nНа картинке ниже все части на своих местах. Если смотреть под этим углом, магниты проходят сенсоры с правой стороны. \nПрограммное обеспечение\nПроект Arduino на GitHub \nОсновной процесс довольно прост: инициируйте прерывание каждый раз, когда на одном из пинов датчика сигнал становится высоким, и запускайте функцию обновления. Функция обновления просматривает три последних показания: а именно, порядок следования  датчиков A-B-A или B-A-B. Когда \nсреднее\n значение находится в верхнем 75-м процентиле времени между первым и последним прерыванием, вполне вероятно, что последние \nдва\n показания являются одним и тем же магнитом, проходящим мимо датчиков в том или ином направлении.\nКогда у меня есть модель A------BA или B------AB, я могу просто посмотреть на последнее показание, чтобы определить направление (по часовой стрелке или против часовой стрелки), а ещё могу определить скорость, глядя на разницу во времени между первым и последним показаниями (от A до A или от B до B). Окружность колеса около 3,4 м, то есть длина каждого отрезка составляет 425 мм (напомню, что я использовал 8 магнитов, распределённых по окружности), так что мне просто нужно разделить это значение на время, чтобы получить скорость. Если время составило, скажем, 250 мс, то Лебедь двигался со скоростью 425мм/250 мс = 1,7 м/с или 6,1 км в час.\nПопутно я немного обработал данные, получив пиковую скорость, общую продолжительность и простую гистограмму результатов.\nЯ хотел хранить данные в легкодоступном месте. Для этой цели я использовал скрипт Google Apps, он позволяет добавить каждый запуск в новую строку электронной таблицы. Должен признаться: я использовал ChatGPT, чтобы в нём разобраться! Я достаточно хорошо знаю Javascript, но не API Google. Это сработало, и я смог настроить шаблон сценария. Я пишу строку JSON и размещаю ее на URL-адресе «веб-приложения». Самым сложным было получить поддержку SSL, работающую на чипе ESP; в конце концов я обнаружил, что BearSSL справился со своей задачей. Сценарий приложения таков:\nfunction doPost(e) \n{\n  var param = JSON.parse(e.postData.contents);\n\n  var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(\"log\");\n\n  var date = new Date();\n  if (param.message == 'startup')\n  {\n    var misc = \"host=\" + param.name + \" buildDate=\" + param.build.date + \" buildTime=\" + param.build.time;\n    sheet.appendRow([date, param.message, '', '', '', '', '', '', '', '', '', misc]);\n  }\n  else if (param.message == 'run')\n  {\n      sheet.appendRow([\n        date, \n        param.message, \n        param.speed.peak_mph, \n        param.speed.ave_mph, \n        param.dir, \n        param.dur, \n        param.histo['80-100'],\n        param.histo['60-80'],\n        param.histo['40-60'],\n        param.histo['20-40'],\n        param.histo['0-20'],\n        misc]);\n  }\n  else if (param.message == 'test')\n  {\n    sheet.appendRow([date, param.message, '', '', '', '', '', '', '', '', '', param.misc]);\n  }\n  else\n  {\n    sheet.appendRow([date, 'unknown', '', '', '', '', '', '', '', '', '', e.postData.contents]);\n  }\n\n  return ContentService.createTextOutput(JSON.stringify({ status: 'success' })).setMimeType(ContentService.MimeType.JSON);\n}\nО, и на ESP есть небольшой telnet-сервер с несколькими простыми командами. Легко реализовать с использованием библиотек Arduino.\nРезультаты\nЭтот кот много бегает! Вот типичный небольшой всплеск активности:\nВремя\nСообщение\nПиковая скорость (миль/час)\nCредняя скорость (миль/час)\nНаправление\nПродолжительность\nГистограмма 80-100\nГистограмма 60-80\nГистограмма 40-60\nГистограмма 20-40\nГистограмма 0-20\n14.02.2023 11:48:35\nбег\n6.840\n2.132\nпо часовой стрелке\n9.300\n6.335\n4.320\n3.128\n2.222\n0,959\n14.02.2023 11:48:52\nбег\n6.555\n2,182\nпо часовой стрелке\n9.086\n5.800\n4.495\n3.103\n2,178\n1,016\n14.02.2023 11:49:20\nбег\n10.042\n2,775\nпо часовой стрелке\n13.266\n9,563\n6.516\n4.200\n2,788\n1,093\n14.02.2023 11:49:38\nбег\n5.274\n1,788\nпо часовой стрелке\n5.281\n5.230\n4.291\n2,728\n1,783\n0,692\n14.02.2023 11:50:04\nбег\n4.627\n2.124\nпо часовой стрелке\n4.445\n4.168\n3,666\n2.291\n1,781\n1,185\nКак видите, забеги не очень продолжительные — обычно около 5-10 секунд за раз. Но пока он в среднем делает около 50 пробежек в день. Бегать предпочитает по часовой стрелке, но не всегда; соотношение сейчас примерно 2/3.\nСледующие данные представлены в режиме реального времени, поэтому выводы ниже могут быть устаревшими.\nЛебедь, кажется, совершает много медленных прогулок со скоростью 3-5 км в час, но есть много хороших спринтов > 21 км/ч. Я видел и 24 км/ч в предыдущих данных.\nЯ сова (сплю примерно с 3:00 до 11:00), и вы можете видеть, что Лебедь в основном начинает бегать сразу после того, как я ложусь спать и после того, как просыпаюсь (чаще последнее). Пока не увидел данные, я не понимал, что кот довольно активен с 4 до 6 утра!\nЛебедь обычно совершает довольно короткие пробежки, хотя есть и достаточно длительные прогулки. В любом случае, кошки не созданы для марафонов.\nБольшинство коротких пробежек — от 5 до 15 секунд. Но некоторые длятся больше минуты!\nКогда я писал это, Лебедь предпочитал бегать по часовой стрелке примерно 60% времени, а 40% — против. \nНаконец, количество пробежек в день: на данный момент это около 50, хотя и с некоторыми отклонениями. Его текущий рекорд — 118, который он установил в тот день, когда я включил автоматический дозатор лакомств. \nС тех пор кот немного\n остепенился.\nЗаключение\nВ целом, у меня довольно энергичный кот. Он не бенгал и не какая-то другая экзотическая порода, просто очень чёрный домашний кот.\nСледующий проект в списке — автоматический дозатор лакомств, чтобы мотивировать кота на пробежки.\n \n ",
    "tags": [
        "diy-проекты",
        "diy",
        "diy или сделай сам",
        "котики",
        "сбор данных",
        "визуализация данных",
        "лайфхак"
    ]
}