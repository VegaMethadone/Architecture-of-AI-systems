{
    "article_id": "726292",
    "article_name": "Как работает веб-браузер (с картинками)",
    "content": "Иллюстрация предоставлена \nGrowtika\nБраузеры стали частью нашей повседневной жизни. Но задумывались ли вы когда-нибудь о том, как они на самом деле работают?\nЭта статья приоткроет завесу магии, скрывающуюся за кулисами веб-браузеров.\nДавайте начнем!\n1. Навигация\nНавигация - это первый шаг загрузки веб-страницы. Она происходит когда пользователь вводит URL в адресной строке или делает клик по ссылке.\nПереход на веб-страницу\nDNS-поиск\nПервый шаг - найти IP-адрес, где располагаются ресурсы. Это делается с помощью DNS-поиска.\nDNS (Domain Name System)-сервер - это сервер, который главным образом используются для сопоставления имени хоста веб-сайта (пр.: \nwww.example.com\n) с соответствующим ему IP-адресом. Он содержит базу данных публичных IP-адресов и им соответствующих доменных имен.\nНапример если вы посетите страницу \nwww.example.com\n, то DNS-сервер вернет вам ее IP-адрес (93.184.216.34).\nТройное TCP-рукопожатие\nСледующий шаг - установить с сервером TCP-соединение. Это делается благодаря тройному TCP-рукопожатию.\nПримечание переводчика.\n Transmission Control Protocol (TCP) - протокол управления передачей. Это стандарт, определяющий порядок установления и поддержания сетевого взаимодействия, с помощью которого приложения могут обмениваться данными.\nТройное TCP-рукопожатие\nСперва клиент посылает запрос на открытие соединения с сервером с помощью SYN-пакета (от англ. SYNchronize packet - пакет синхронизации).\nЗатем сервер отвечает SYN-ACK-пакетом (от англ. SYNchronize-ACKnowledge packet - пакет синхронизации и подтверждения) чтобы подтвердить запрос и запросить клиента открыть соединение.\nВ конце клиент посылает ACK-пакет на сервер для подтверждения запроса.\nTLS-рукопожатие\nЕсли веб-сайт использует протокол HTTPS (аббр. от англ. Hypertext Transfer Protocol Secure - защищенный протокол передачи гипертекста), то следующий шаг - установить TLS-соединение через TLS-рукопожатие.\nПримечание переводчика.\n TLS (аббр. от англ. Transport Layer Security - защита транспортного уровня) - шифрует данные, передаваемые через Интернет, чтобы подслушивающие устройства и хакеры не могли увидеть то, что вы передаете, что особенно полезно для частной и конфиденциальной информации, такой как пароли, номера кредитных карт и личная переписка.\nTLS-рукопожатие\nНа этом этапе между браузером и сервером происходит обмен еще несколькими сообщениями.\nКлиент отправляет \"привет\"\n: браузер отправляет серверу сообщение с версией TLS и набором шифров, которые он поддерживает, а также строку рандомных байтов именуемую «рандомом клиента» (client random).\nПримечание переводчика.\n «Рандом клиента» (как и далее «рандом сервера») — это строка из 32-ух рандомных байтов. В соответствии со спецификацией TLS 1.2 первые 4 байта являются текущей датой и временем, а остальные 28 байтов — рандомно сгенерированными цифрами.\nСервер отправляет «привет» и сертификат\n: в ответ на «привет» клиента сервер отправляет свое приветствующее сообщение содержащее SSL‑сертификат, набор шифров и строку рандомных байтов именуемую «рандомом сервера» (server random).\nАутентификация\n: браузер проверяет SSL‑сертификат полученный от сервера на подлинность через «центр сертификатов», который его выпустил. Таким образом браузер может понять что сервер действительно является тем за кого он себя выдает.\n«Секрет премастера» (premaster secret)\n: браузер отправляет еще одну строку рандомно сгенерированных байтов именуемую «секретом премастера», которая зашифрованна публичным ключом (public key) полученным из SSL‑сертификата сервера. «Секрет премастера» может быть расшифрован только с использованием приватного ключа (private key) сервера.\nИспользование приватного ключа\n: сервер расшифровывает «секрет премастера».\nСоздание ключей сессии\n: браузер и сервер генерируют ключи сессии на основе «рандома клиента», «рандома сервера» и «секрета премастера».\nКлиент завершает процесс рукопожатия\n: браузер отправляет серверу сообщение о завершении процесса.\nСервер завершает процесс рукопожатия\n: сервер также отправляет клиенту сообщение о завершении процесса со своей стороны.\nДостигнута безопасность симметричного шифрования\n: рукопожатие выполнено и дальнейшая коммуникация может продолжиться с использованием ключей сессии (session keys).\nТеперь можно начать отправлять запросы на сервер и получать от него данные.\n2. Фетчинг ресурсов\nПосле того как установлено TCP-соединение браузер может начать фетчинг (от англ. гл. to fetch - получать, загружать) ресурсов сервера.\nФетчинг ресурсов\nHTTP-запрос\nЕсли у вас уже есть опыт в веб-разработке, то вы наверняка встречали понятие HTTP-запросов.\nHTTP-запросы используются для фетчинга ресурсов сервера. Для запросов необходимо указать URL и тип запроса (GET, POST, PUT, DELETE). Браузер также добавляет заголовки (headers) к запросу, что бы предоставить дополнительную информацию.\nПервый запрос к серверу обычно является GET-запросом на получение HTML-файла.\nHTTP-ответ\nЗатем сервер отвечает соответствующим HTTP-ответом. Ответ содержит код состояния (status code), заголовки (headers) и тело ответа (body).\n3. Парсинг HTML\nТеперь начинается главная секция. После того как браузер получил HTML-файл он парсит (от англ. гл. to parse - разбирать, анализировать) его для создания DOM (Document Object Model)-дерева.\nЭто делается при помощи движка браузера, который является его ядром (Пр.: Gecko для Firefox, Webkit для Safari, Blink для Chrome и т.д.).\nВот пример HTML-файла:\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Page Title</title>\n  </head>\n  <body>\n    <p>Hello World!</p>\n  </body>\n</html>\n\nТокенизация\nПервый шаг на пути к отображению веб-страницы - это токенизация HTML-файла. \nТокенизация\n - это процесс деления строки символов на значимые чанки (от англ. chunk - кусок) для браузера, именуемые токенами (от англ. token - жетон).\nТокены являются базовыми строительными блоками DOM-дерева.\nТокенизация\nСтроительство DOM-дерева\nЛексинг \n(lexing) - это процесс конвертации токенов в древовидную структуру именуемую DOM-деревом.\nDOM-дерево\n - это древовидная структура данных, которая представляет собой ноды(от англ. node - узел) в HTML-документе.\nDOM-дерево\nЗаметка\n: если для страницы требуются какие-либо внешние ресурсы, то они будут обработаны следующим образом:\nНе блокирующие ресурсы загружаются параллельно (Пр.: картинки)\nОтложенные ресурсы загружаются параллельно, но выполняются после того как будет построено DOM-дерево. Пр.: скрипты с атрибутом defer и CSS-файлы.\nБлокирующие ресурсы загружаются и выполняются последовательно. Пр.: скрипты БЕЗ атрибута defer.\n4. Парсинг CSS\nПосле того как DOM-дерево построено, браузер парсит CSS-файлы для создания CSSOM (CSS Object Model).\nЭтот процесс аналогичен построению DOM-дерева с использованием токенизации и генерации CSSOM.\n5. Выполнение JavaScript\nКак упоминалось ранее, если у страницы есть блокирующий скрипт, то он будет загружен и обработан незамедлительно, в то время как строительство DOM-дерева будет отложено, либо же скрипт будет загружен и выполнен после того, как DOM-дерево будет полностью создано.\nНезависимо от того когда выполняется скрипт, он будет обработан движком JavaScript, который похож на движок браузера и зависит от того какой браузер используется.\nJIT-компиляция\nКомпиляция\nИнтерпретация\nПредполагая, что вам уже знакома концепция интерпретаторов и компиляторов, поговорим о движке JavaScript.\nДвижок JavaScript использует гибридный подход компиляции именуемый JIT (от англ. аббревиатуры Just in Time - точно в срок).\nJIT-компиляция, в отличие от скомпилированного языка такого как C, где компиляция делается заранее (другими словами ДО выполнения кода), делается ВОВРЕМЯ выполнения.\nJIT-компиляция\n6. Рендеринг\nНаконец-то пришло время рендера (от англ. rendering - визуализация) страницы. Для рендеринга браузер использует DOM-дерево и CSSOM.\nПостроение дерева рендера\nПервый шаг - построить дерево рендера. Дерево рендера - это подмножество DOM-дерева, состоящее только из видимых на странице элементов.\nКомпоновка (layout)\nСледующим этапом является компоновка дерева рендера. Она делается путем расчетов точных размеров и позиции каждого элемента в дереве рендера.\nЭтот этап происходит каждый раз, когда мы изменяем что-нибудь в DOM, что затрагивает компоновку страницы, даже частично.\nПримеры ситуаций, когда позиция элементов перерассчитывается:\nДобавление или удаление элементов из DOM\nИзменение размеров окна браузера\nИзменение ширины, высоты или позиции элемента\nОтрисовка (painting)\nНаконец, браузер решает, какие ноды должны быть видимыми, и рассчитывает их позицию в области просмотра (viewport), после чего наступает время их отрисовать (сделать рендер пикселей) на экране. Этот этап также известен как этап растеризации, на котором браузер преобразует каждый элемент, рассчитанный на этапе компоновки, в реальные пиксели на экране.\nТакже как и этап компоновки, этот этап происходит каждый раз когда мы изменяем отображение элемента в DOM, даже частично.\nПримеры ситуаций, когда происходит повторная отрисовка:\nИзменение очертания элемента\nИзменение прозрачности (opacity) или видимости (visibility) элемента\nИзменение цвета фона элемента\nНаложение слоев и композиция\nФинальный этап - композиция слоев. Это делается браузером для оптимизации процесса рендеринга.\nКомпозиция (compositing) - это техника разделения частей страницы на слои, их отрисовки и дальнейшего составления из них страницы в отдельном потоке называемом композиторским потоком (compositor thread). Когда разделы документа рисуются в разных слоях, перекрывая друг-друга, композиция необходима для того что бы удостовериться, что они нарисованы в правильном порядке и их содержимое корректно отображается.\nЗаметка\n: обновления DOM, в частности компоновка и отрисовка, чрезвычайно ресурсоемкие операции, которые существенно заметны на слабых устройствах. Поэтому важно минимизировать количество их срабатываний.\nНа этом все!🎉\nСпасибо за прочтение.\n \n ",
    "tags": [
        "браузеры",
        "DNS-поиск",
        "TCP",
        "TLS",
        "токенизация",
        "jit-компиляция",
        "рендеринг html"
    ]
}