{
    "article_id": "725762",
    "article_name": "Расширенные шаблоны свойств",
    "content": "Язык C# постоянно развивается и в одной из последних версий появились расширенные шаблоны свойств, которые расширяют мощь и универсальность конструкции switch. В этой статье мы рассмотрим расширенные шаблоны свойств в C# 10 на практических примерах и замечаниях о том, как эффективно использовать эти расширенные шаблоны в своих проектах.\nПонимание шаблонов свойств\nПрежде чем углубляться в расширенные шаблоны свойств, необходимо понять концепцию шаблонов свойств. Введенные в C# 8, шаблоны свойств позволяют разработчикам сопоставлять объекты на основе их свойств, делая сопоставление с образцом более выразительным и кратким. Шаблон свойства объединяет тип объекта и набор условий для свойств этого типа.\nНапример, рассмотрим простой класс, представляющий человека:\npublic class Person\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\nPerson person = new Person { Name = \"Иван\", Age = 25 };\nЧтобы классифицировать объект человека на основе его возраста, можно использовать шаблон свойства, как показано ниже:\nstring category = person switch\n{\n    { Age: < 18 } => \"Несовершеннолетний\",\n    { Age: >= 18 and < 60 } => \"Взрослый\",\n    { Age: >= 60 } => \"Пожилой\",\n    _ => \"Неизвестно\"\n};\nРасширенные шаблоны свойств с C# 10\nХотя шаблоны свойств обеспечивают удобный способ сопоставления объектов на основе их свойств, изначально они были ограничены сопоставлением только с прямыми свойствами объекта. C# 10 расширил шаблоны свойств с помощью поддержки вложенных свойств, что позволяет разработчикам более кратко сопоставлять сложные структуры объектов.\nРассмотрим следующую структуру классов, представляющую компанию и ее сотрудников:\npublic class Company\n{\n    public string Name { get; set; }\n    public List<Employee> Employees { get; set; }\n}\n\npublic class Employee\n{\n    public string Name { get; set; }\n    public Address Address { get; set; }\n}\n\npublic class Address\n{\n    public string City { get; set; }\n    public string Country { get; set; }\n}\n\nEmployee employee = new Employee\n{\n    Name = \"Анна\",\n    Address = new Address { City = \"Нью-Йорк\", Country = \"США\" }\n};\nВ C# теперь можно использовать расширенные шаблоны свойств для сопоставления сотрудников на основе свойств их адреса:\nstring location = employee switch\n{\n    { Address: { Country: \"США\" } } => \"Внутренний\",\n    { Address: { Country: \"Канада\" } } => \"Международный\",\n    _ => \"Неизвестно\"\n};\nФильтрация сотрудников по местоположению и должности\nПредположим, у вас есть набор сотрудников\npublic class Employee\n{\n    public string Name { get; set; }\n    public string Role { get; set; }\n    public Address Address { get; set; }\n}\n\nList<Employee> employees = GetEmployees();\nи вы хотите отфильтровать сотрудников на основе их местоположения и роли в компании. Вы можете использовать расширенные шаблоны свойств для элегантного решения этой задачи:\nvar domesticManagers = employees.Where(e =>\n    e is { Role: \"Менеджер\", Address: { Country: \"США\" } });\n\nvar internationalDevelopers = employees.Where(e =>\n    e is { Role: \"Разработчик\", Address: { Country: not \"США\" } });\nСопоставление сложных структур объектов\nРассмотрим иерархию классов, представляющую компанию по прокату транспортных средств с различными типами транспортных средств:\npublic abstract class Vehicle\n{\n    public string Make { get; set; }\n    public string Model { get; set; }\n    public int Year { get; set; }\n}\n\npublic class Car : Vehicle\n{\n    public int NumberOfDoors { get; set; }\n    public bool IsElectric { get; set; }\n}\n\npublic class Motorcycle : Vehicle\n{\n    public bool HasSidecar { get; set; }\n}\n\npublic class Truck : Vehicle\n{\n    public int CargoCapacity { get; set; }\n}\nВы можете использовать расширенные шаблоны свойств для определения и категоризации транспортных средств на основе их свойств:\nVehicle vehicle = GetVehicle();\n\nstring vehicleCategory = vehicle switch\n{\n    Car { IsElectric: true, Year: < 2020 } => \"Ранний электромобиль\",\n    Car { IsElectric: true, Year: >= 2020 } => \"Современный электромобиль\",\n    Car { IsElectric: false, NumberOfDoors: >= 4 } => \"Традиционный седан\",\n    Car { IsElectric: false, NumberOfDoors: < 4 } => \"Традиционное купе\",\n    Motorcycle { HasSidecar: true } => \"Мотоцикл с коляской\",\n    Truck { CargoCapacity: >= 5000 } => \"Грузовик тяжелого класса\",\n    Truck { CargoCapacity: < 5000 } => \"Грузовик легкого класса\",\n    _ => \"Неизвестное транспортное средство\"\n};\nИспользование расширенных шаблонов свойств\nСпособность сопоставлять вложенные свойства с расширенными шаблонами свойств может упростить ваш код, сделав его более читаемым и поддерживаемым. Вот несколько советов по максимизации преимуществ расширенных шаблонов свойств в ваших проектах:\nРефакторинг сложных условных конструкций\n: Если у вас есть вложенные операторы if-else или выражения switch, связанные с несколькими свойствами, рассмотрите возможность их рефакторинга с использованием расширенных шаблонов свойств для более краткого и читаемого синтаксиса.\nСочетание с другими возможностями сопоставления с образцом\n: В C# 10.0 были введены и другие улучшения, такие как шаблоны \"and\", \"or\" и \"not\". Сочетание этих функций с расширенными шаблонами свойств может привести к еще более мощному и выразительному сопоставлению с образцом.\nИспользование с LINQ и другими API запросов\n: При фильтрации или проекции данных с использованием LINQ или других API запросов, расширенные шаблоны свойств могут упростить ваш код и сделать его более выразительным.\nПрименение в существующих кодовых базах\n: Даже если вы работаете с существующей кодовой базой, вы можете постепенно внедрять расширенные шаблоны свойств для улучшения читаемости и поддерживаемости кода со временем.\nЗаключение\nРасширенные шаблоны свойств предоставляют разработчикам мощный инструмент для упрощения сложных условий switch-ей и повышения читаемости кода. Понимая полный потенциал этой функции и эффективно применяя ее в своих проектах, вы сможете создать более выразительный, краткий и поддерживаемый код.\nМожно ли работать и не знать паттернов - да. Можно ли с ними не столкнуться - нет. Приглашаю вас на \nбесплатный урок\n, где обсудим паттерны проектирования в C#: абстрактная фабрика, декоратор и другие.\nЗарегистрироваться на бесплатный урок\n \n ",
    "tags": [
        ".net",
        "c#",
        "otus.ru",
        "расширенные шаблоны свойств"
    ]
}