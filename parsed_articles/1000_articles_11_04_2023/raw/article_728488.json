{
    "article_id": "728488",
    "article_name": "Как мы улучшили самозащиту приложения благодаря KNOX",
    "content": "Привет! Меня зовут Сергей Занкин, я старший разработчик в \nмобильном штабе «Лаборатории Касперского»\n на проекте Kaspersky Safe Kids — это программа родительского контроля и защиты ваших детей в режиме 24/7.\n\r\n\n\r\nВ данной статье расскажу о добавлении Samsung KNOX (далее KNOX) в проект для улучшения функций самозащиты приложения от удаления, остановки и прочих читерских действий. Сразу скажу, что KNOX действительно помог нам повысить эффективность самозащиты от обхода родительских ограничений — мы получили неплохой буст с маленькими вложениями.\n\r\n\n\r\n\n\r\n\n\r\nСтатья будет полезна тем, кто связан с MDM-технологиями, для управления мобильными устройствами, в частности через Samsung KNOX. А также тем, кто хочет узнать, какие возможности предоставляет KNOX для управления устройствами и как внедрить его в собственное приложение, и интересуется, какие могут быть сложности при внедрении и как подобрать нужный тип лицензии.\n\r\n\n\r\n\nПочему KNOX\n\r\nРешение использовать MDM-технологии было не спонтанным — это некая контрмера на постоянно вводимые ограничения со стороны Goolge, например runtime permission, doze mode и т. п.\n\r\n\n\r\nНа MDM-решения взгляд падал не один раз, однако всегда находились какие-то «проблемы», из-за которых мы отказывались от данного варианта. Например, хотели использовать Android Enterprise, но для активации режима Device Owner необходимо было сбрасывать устройство к заводским настройкам, а дальше просить на начальном экране 5 раз кликнуть на заголовок. Тут и начались первые сюрпризы: не везде работал данный способ (например, на Xiaomi). NFC не рассматривали, потом решили попробовать способ DPC Identificator. И тут нас ждало разочарование, так как для этого нужно состоять в программе Google Play EMM API, куда компания Google перестала принимать новых участников. Важно было использовать свое DPC-приложение, а не Google DPC.\n\r\n\n\r\nРешили взять паузу. Новость пришла, откуда не ждали, а именно от компании Samsung, которая расширила варианты применения KNOX, а также сделала лицензии бесплатными.\n\r\n\n\r\n\nЧто такое KNOX-лицензия и как ее использовать?\n\r\nСуществуют следующие типы лицензий Knox Platform for Enterprise (KPE):\n\r\n\n\r\n\n\r\n\n\r\n\nЛицензии\n\r\n\n\r\n\nТип\n\r\n\n\r\n\nОписание\n\r\n\n\r\n\nКоличество активаций\n\r\n\n\r\n\nСрок действия\n\r\n\n\r\n\nМаксима\n\r\nльное \n\r\nкол-во \n\r\nлицензий\n\r\n\n\r\n\n\r\n\n\r\n\n\r\n\n\r\n\nDevelopment\n\r\n\n\r\n\nKPE Development\n\r\n\n\r\n\nПробная лицензия предоставляет разрешения на вызов всех API, но работает на ограниченном количестве устройств в течение ограниченного периода времени.\n\r\n\n\r\n\n30\n\r\n\n\r\n\n6 месяцев\n\r\n\n\r\n\n1\n\r\n\n\r\n\n\r\n\n\r\n\nCommercial\n\r\n\n \n\r\n\n\r\n\nKPE Standard\n\r\n\n\r\n\nПредоставляет разрешения на вызов API-интерфейсов, которые управляют функциями устройства, такими как сетевые подключения, учетные записи пользователей, местоположение, простой kiosk mode, шифрование данных, а также базовыми настройками безопасности.\n\r\n\n\r\n\n10 000 000\n\r\n\n\r\n\n2 года\n\r\n\n\r\n\n100\n\r\n\n\r\n\n\r\n\n\r\n\n \n\r\n\n\r\n\nKPE Premium\n\r\n\n\r\n\nПредоставляет все стандартные разрешения, а также разрешения для вызова API-интерфейсов, которые предоставляют расширенные функции безопасности, такие как контейнеры, VPN и сертификаты, а также комплексную настройку устройства и kiosk mode.\n\r\n\n\r\n\n10 000 000\n\r\n\n\r\n\n2 года\n\r\n\n\r\n\nБезлимит\n\r\nное\n\r\n\n\r\n\n\r\n\n\r\n\n \n\r\n\n\r\n\nKPE DualDAR\n\r\n\n\r\n\nПредоставляет все разрешения Premium, а также разрешение на вызов API, которые включают двойное шифрование данных.\n\r\n\n\r\n\nСтолько, сколько приобретено\n\r\n\n\r\n\nгод или вечно\n\r\n\n\r\n\nБезлимит\n\r\nное\n\r\n\n\r\n\n\r\n\n\r\n\n\r\nДобавлю, что на данный момент в проекте используется лицензия KPE Standard, которая покрывает все наши потребности.\n\r\n\n\r\n\nКак начать использовать KNOX\n\r\nСперва нужно выполнить регистрацию на \nhttps://partner.samsungknox.com\n. После успешной регистрации откроется доступ к консоли разработчика, через которую будет предоставлен доступ к управлению лицензионными ключами.\n\r\n\n\r\n\nБез действительного ключа невозможно будет активировать возможности KNOX на устройстве!\n\r\n\n\r\nПроцесс получения ключа состоит из нескольких шагов:\n\r\n\n\r\n\nНужно определиться, какой ключ нужен — коммерческий или для разработчика.\n\r\n\nНеобходим APK-файл, в котором реализуются возможности KNOX Api, чтобы подписать ключ его сигнатурой, то есть ключ можно использовать только в том приложении, для которого он выписан.\n\r\n\nЕсли необходима поддержка KNOX версии до 2.8, то нужно также получить ключ для обратной совместимости.\n\r\n\n\r\n\n\r\n\n\r\n\n\r\n\n\r\nОсновное преимущество KNOX по сравнению с Android MDM в том, что для активации не требуется сброс к заводским настройкам и нет сложных шагов активации.\n\r\n\n\r\n\nАктивация KNOX не дает доступа к Android MDM API (Device Owner/Profile Owner).\n\r\n\n\r\nУбедиться в этом можно, выполнив команду \nadb shell dumpsys user\n.\n\r\n\n\r\nВ случае активного KNOX запись \nDevice owner id:-10000\n не меняет значение с -10000 и \nHas profile owner: false\n не меняет значение на true: это говорит о том, что на устройстве не активирован режим работы Device Owner/Profile Owner.\n\r\n\n\r\n\nПример результата команды: adb shell dumpsys user\nCurrent user: 0\nUsers:\n UserInfo{0:xxx:c13} serialNo=0 isPrimary=true\n .....\n Has profile owner: false\n .....\n .....\n Device owner id:-10000\n\n\r\n\nЧто нужно для добавления KNOX в проект?\n\r\nДля использования KNOX нужно определиться со списком поддерживаемых версий, так как для поддержки KNOX до 2.8 версии потребуется сделать больше телодвижений.\n\r\n\n\r\nБазовые шаги добавления KNOX Api в проекте следующие:\n\r\n\n\r\n\nСкачать и добавить в проект библиотеку knoxsdk.jar.\n\r\n\nРеализовать DeviceAdminReceiver. \n\r\n\nРеализовать обработчик для отслеживания состояния лицензии. \n\r\n\nОпределиться с KNOX API, чтобы определить в AndroidManifest список KNOX-разрешений. \n\r\n\n\r\nВ разделе SDK Tool можно скачать актуальную версию SDK (knoxsdk.jar).\n\r\n\n\r\n\n\r\n\n\r\nПеред тем как активировать KNOX-лицензию, нужно выдать разрешения для DeviceAdmin и проверить наличие Интернета.\n\r\n\n\r\n\nНе все устройства Samsung поддерживают KNOX.\n\r\n\n\r\nKNOX ограничивает вызовы методов KNOX API через KNOX-разрешения, поэтому перед тем, как использовать какой-либо метод, нужно объявить соответствующие разрешения в AndroidManifest.xml.\n\r\n\n\r\nЧтобы понять, какие разрешения необходимы, нужно обратиться к официальной документации \ndocs.samsungknox.com/devref/knox-sdk/reference/packages.html\n.\n\r\n\n\r\nНапример, чтобы использовать Geofencing API, нужно объявить разрешение com.samsung.android.knox.permission.KNOX_GEOFENCING.\n\r\n\n\r\n\n\r\n\n\r\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n xmlns:tools=\"http://schemas.android.com/tools\"\n package=\"com.knox.example\">\n \n <uses-permission android:name=\"com.samsung.android.knox.permission.KNOX_APP_MGMT\" />\n <uses-permission android:name=\"com.samsung.android.knox.permission.KNOX_RESTRICTION_MGMT\" />\n <uses-permission android:name=\"com.samsung.android.knox.permission.KNOX_LOCATION\" />\n <uses-permission android:name=\"com.samsung.android.knox.permission.KNOX_MULTI_USER_MGMT\" />\n <uses-permission android:name=\"com.samsung.android.knox.permission.KNOX_CUSTOM_SETTING\" />\n <uses-permission android:name=\"com.samsung.android.knox.permission.KNOX_ENTERPRISE_DEVICE_ADMIN\" />\n \n <application>\n <meta-data android:name=\"com.samsung.knoxlicense.permissions\" android:value=\"true\" />\n \n <receiver\n android:name=\".receiver.KnoxLicenseReceiver\"\n android:exported=\"false\">\n <intent-filter>\n <action android:name=\"com.samsung.android.knox.intent.action.KNOX_LICENSE_STATUS\" />\n <action android:name=\"com.samsung.android.knox.intent.action.LICENSE_STATUS\" />\n </intent-filter>\n </receiver>\n </application>\n \n</manifest>\n\n\r\n\nCode Block 1. Пример AndroidManifest.xml с объявленными KNOX-разрешениями\n\r\n\n\r\nДля получения результата активации KNOX-лицензии и отслеживания ее состояния в приложении необходимо реализовать BroadcastReceiver, который будет отслеживать событие com.samsung.android.knox.intent.action.KNOX_LICENSE_STATUS. В упрощенном виде код должен содержать минимум:\n\r\n\n\r\n\nclass KnoxLicenseReceiver : BroadcastReceiver() {\n \n override fun onReceive(context: Context?, intent: Intent?) {\n val errorCode = intent.getIntExtra(KnoxEnterpriseLicenseManager.EXTRA_LICENSE_ERROR_CODE, KnoxEnterpriseLicenseManager.ERROR_UNKNOWN)\n val resultType = intent.getIntExtra(KnoxEnterpriseLicenseManager.EXTRA_LICENSE_RESULT_TYPE, KnoxEnterpriseLicenseManager.LICENSE_RESULT_TYPE_VALIDATION)\n \n if (errorCode == KnoxEnterpriseLicenseManager.ERROR_NONE) {\n // success\n } else {\n // failed\n }\n \n if (resultType == KnoxEnterpriseLicenseManager.LICENSE_RESULT_TYPE_VALIDATION) {\n // validation\n } else if (resultType == KnoxEnterpriseLicenseManager.LICENSE_RESULT_TYPE_ACTIVATION) {\n // activation\n }\n }\n}\n\n\r\nЛицензия считается успешно активированной, если errorCode равен значению KnoxEnterpriseLicenseManager.ERROR_NONE и resultType равен значению KnoxEnterpriseLicenseManager.LICENSE_RESULT_TYPE_ACTIVATION.\n\r\n\n\r\nЗначение resultType также может быть KnoxEnterpriseLicenseManager.LICENSE_RESULT_TYPE_VALIDATION. Оно используется для проверки статуса лицензии (не отозвана / не истекла и т. п). Данное значение может приходить несколько раз в сутки и сигнализировать об изменении статуса лицензии: например, если лицензия истекла, то нужно активировать новый код.\n\r\n\n\r\n\nЗащита от удаления\n\r\nДля улучшения функций самозащиты через KNOX API были выполнены действия, описанные ниже. Данные действия были выбраны на основе отзывов, получаемых от родителей, т. е. каким способом дети чаще всего обходят настройки родительского контроля.\n\r\n\n\r\nВ таблице в первом столбце указаны виды запретов, применяемых в политике KNOX, в колонке KNOX API приведен фрагмент кода, выполняющий данный запрет, а в колонке Permission — разрешение, необходимое для выполнения KNOX API для указанного фрагмента кода.\n\r\n\n\r\n\n\r\n\n\r\n\n \nAction\n\r\n \n\r\n\n \nKNOX API\n\r\n \n\r\n\n \nPermission\n\r\n \n\r\n\n\r\n\n\r\n\n\r\n\n\r\n\n \nЗапрет на остановку процесса\n\r\n \n\r\n\n \nEnterpriseDeviceManager.getInstance(context).applicationPolicy.addPackagesToForceStopBlackList(arrayListOf(packageName))\n\r\n \n\r\n\n \ncom.samsung.android.knox.permission.KNOX_APP_MGMT\n\r\n \n\r\n\n\r\n\n\r\n\n \nЗапрет на удаление приложения\n\r\n \n\r\n\n \nEnterpriseDeviceManager.getInstance(context).applicationPolicy.setApplicationUninstallationDisabled(packageName)\n\r\n \n\r\n\n \ncom.samsung.android.knox.permission.KNOX_APP_MGMT\n\r\n \n\r\n\n\r\n\n\r\n\n \nЗапрет на отзыв разрешения для DeviceAdmin\n\r\n \n\r\n\n \nEnterpriseDeviceManager.getInstance(context).adminRemovable = false\n\r\n \n\r\n\n \ncom.samsung.android.knox.permission.KNOX_ENTERPRISE_DEVICE_ADMIN\n\r\n \n\r\n\n\r\n\n\r\n\n \nЗапрет на сброс к заводским настройкам\n\r\n \n\r\n\n \nEnterpriseDeviceManager.getInstance(context).restrictionPolicy.allowFactoryReset(false)\n\r\n \n\r\n\n \ncom.samsung.android.knox.permission.KNOX_RESTRICTION_MGMT\n\r\n \n\r\n\n\r\n\n\r\n\n \nЗапрет многопользовательского режима\n\r\n \n\r\n\n \nEnterpriseDeviceManager.getInstance(context).multiUserManager.allowMultipleUsers(false)\n\r\n \n\r\n\n \ncom.samsung.android.knox.permission.KNOX_MULTI_USER_MGMT\n\r\n \n\r\n\n\r\n\n\r\n\n \nСкрываем сброс системных настроек\n\r\n \n\r\n\n \nCustomDeviceManager.getInstance().settingsManager.setSettingsHiddenState(true, CustomDeviceManager.SETTINGS_RESET)\n\r\n \n\r\n\n \ncom.samsung.android.knox.permission.KNOX_CUSTOM_SETTING\n\r\n \n\r\n\n\r\n\n\r\n\n \nЗапрет безопасного режима\n\r\n \n\r\n\n \nEnterpriseDeviceManager.getInstance(context).restrictionPolicy.allowSafeMode(false)\n\r\n \n\r\n\n \ncom.samsung.android.knox.permission.KNOX_RESTRICTION_MGMT\n\r\n \n\r\n\n\r\n\n\r\n\n\r\nНа устройствах Samsung с доступной функцией KNOX на экране Device Admin появится список запрашиваемых KNOX-разрешений (объявленных в файле AndroidManifest.xml):\n\r\n\n\r\n\n\r\n\n\r\nДля активации KNOX-лицензии необходимо вызвать метод:\n\r\n\nKnoxEnterpriseLicenseManager.getInstance(context).activateLicense(\"YOUR-LICENSE-KPE-KEY\")\n\r\nПосле чего появится окно с текстом KNOX-соглашения. В случае его принятия произойдет активация лицензии и будет отображено соответствующее всплывающее окно, отображаемое KNOX-ом. Результат активации также будет доступен в BroadcastReceiver обработчика состояния лицензии.\n\r\n\n\r\n\n\r\n\n\r\nЕсли при активация произошла ошибка, то появится сообщение:\n\r\n\n\r\n\n\r\n\n\r\n\nГеолокация\n\r\nСопутствующей задачей было желание улучшить определение месторасположения ребенка.\n\r\nДанная задача была решена частично:\n\r\n\n\r\n\nВыдаем через KNOX разрешение на использование геолокации.\n\r\n\nВключаем GPS в момент запроса месторасположения.\n\r\n \n\r\n\nТакже выключаем суперэнергосберегающий режим, если он включен, и включаем его после завершения определения месторасположения.\n\r\n\n\r\n \n\r\n\n\r\nОсновная проблема связана с тем, что KNOX не позволяет управлять источниками геоданных (wifi/cell/gps и т. п.), а только разрешает включать настройку GPS.\n\r\n\n\r\nТакже выяснилось, что KNOX не помогает получить координаты, если устройство находится в DOZE-режиме (heavy doze). Правда, нужно обратить внимание, что режим DOZE наступает после длительного периода бездействия устройства (на бюджетных устройствах режим DOZE может активироваться через 10–30 минут бездействия), из-за чего можно считать актуальными те координаты, которые были до входа в DOZE.\n\r\n\n\r\n\nРезультаты\n\r\nВ заключение — несколько наглядных кейсов использования KNOX Api для улучшения самозащиты:\n\r\n\n\r\n\nЕсли KSK пытаются остановить, KNOX запрещает это делать и отображает соответствующее сообщение.\n\r\n\n\r\n\n\r\n\n\r\n\n\r\n\nНа «домашнем» экране скрывается возможность удалить приложение.\n\r\n\n\r\n\n\r\n\n\r\n\n\r\n\nНельзя отозвать разрешение Device Admin, так как кнопка неактивная.\n\r\n\n\r\n\n\r\n\n\r\n\n\r\n\nНа экране информации о приложении нельзя удалить приложение и остановить его (кнопки неактивные).\n\r\n\n\r\n\n\r\n\n\r\n\n\r\n\n\r\n\n\r\n\nИтоги\n\r\nПосле неплохих результатов, полученных в ходе первого использования KNOX, мы хотим сделать более серьезные изменения. В наших ближайших планах — улучшить работу контроля приложений, применяя возможности KNOX API по управлению списком доступных приложений, а также усилить веб-защиту, используя списки доступных доменных имен.\n\r\n\n\r\nЕсли вам было интересно и вы хотите углубиться в тему вместе с нами — находить слабые места, экспериментировать с разными технологиями и улучшать работу наших приложений с их помощью, — приходите к нам в мобильную команду, где прямо сейчас мы ищем C++ разработчиков. Процесс найма \nу нас максимально упрощен\n – так что уже через пару дней сможете увидеть, как наши подходы реализованы изнутри :)\n\r\n\n\r\nА если вдруг вы не до конца уверены в своих знаниях C++, то можете сперва проверить силы \nв нашей игре про умный город\n.\n \n ",
    "tags": [
        "KNOX",
        "гаджеты",
        "смартфоны",
        "samsung",
        "электроника",
        "информационная безопасность",
        "кибербезопасность",
        "безопасность",
        "взлом",
        "cybersecurity",
        "уязвимости",
        "android",
        "мобильная разработка",
        "мобильные приложения",
        "разработка мобильных приложений",
        "аналитика",
        "android development",
        "google play",
        "аналитика мобильных приложений"
    ]
}