{
    "article_id": "727502",
    "article_name": "Файловая система BTRFS. Кэширование",
    "content": "В этой теме мы \nпродолжим\n рассмотрение файловой системы BTRFS и рассмотрим такую сложную и неоднозначную тему как кэширование. Типичная проблема, которую пытаются решить с пользователи это использование большего дискового объема при сохранении скорости. То есть, мы можем купить SSD диск, но стоимость хранения 1 Гигабайта на таком диске существенно больше стоимости хранения гигабайта на обычном HDD. Но зато SSD быстрее и за это все так любят эти диски. Задача заключается в том, чтобы постараться совместить скорость HDD со стоимостью хранения в HDD. Посмотрим, как в этом может помочь BTRFS и какие есть подводные камни у таких решений.\nВ качестве примера мы будем разворачивать кэширование на SSD диске с помощью Bcache.\nХотелось бы напомнить, что прежде чем, начать выполнять какие-либо действия по изменению файловой системы не забудьте сделать полный бэкап.\nBcache\nИтак, познакомимся с Bcache. По сути это кэш блочного уровня ядра Linux. Данный механизм позволяет одному или нескольким быстрым дискам (например SSD), выступать в качестве кэша для одного или нескольких более медленных жестких дисков. То есть, с одной стороны жесткие диски дешевы и велики, но твердотельные накопители быстры, но малы и дороги. По аналогии с L2Arc для ZFS, Bcache для ядра Linux позволяют использовать твердотельные накопители для кэширования других блочных устройств. По умолчанию Bcache не будет кэшировать последовательный ввод-вывод, только случайные операции чтения и записи, в которых твердотельные накопители работают достаточно быстро. На своем ресурсе авторы Bcache амбициозно заявляют, что цель их разработки - обеспечить такую же скорость, как у SSD и кэшированного устройства (с учетом попадания или нет данных в кэш), с допустимой погрешностью. По заявлениям авторов, такое действительно возможно, особенно при выполнении случайной записи.\nСтоит отметить, что в Bcache предусмотрена защита от сбоев, аналогичная использованию независимых источников питания в RAID контроллерах. Здесь кэш не вернет запись как завершенную до тех пор, пока не будут выполнены все необходимые действия для ее размещения в стабильном хранилище, и запись никогда не будет рассматриваться как частично завершенная (или, что еще хуже, отсутствующая) в случае сбоя питания. \nВ случае ошибки ввода-вывода данных на SSD он попытается восстановиться путем чтения с диска или аннулирования записей кэша. При неустранимых ошибках (сбое в метаданных, грязных данных) кэширование автоматически отключается; если в кэше присутствовали грязные данные, сначала отключается кэширование обратной записи и ожидается сброс всех грязных данных. Грязными мы будем называть данные, которые есть в кэше, но которые отсутствуют или не соответствуют сохраненным на диск. Кэширование с обратной записью означает, что сначала записываются данные в кэш SSD, а на основное устройство хранения они отправятся только после того, как данные были полностью записаны в кэш SSD.\nЯ думаю теории \nи маркетинга\n про Bcache достаточно и сейчас самое время приступить к установке и настройке данной системы.\nПо традиции обновим репозитории и установим bcache-tools:\n# apt-get update\n# apt-get install bcache-tools\nДалее используем разделs /dev/sdb, /dev/sdc и /dev/sdd для создания устройства кэша.\nmake-bcache -C /dev/sdd -B /dev/sdb /dev/sdc\nФлагом -C указывается устройство-кэш. Флагом -B указываются кэшируемые устройства. Если все сделать одной командой, то сразу получится то, что нам нужно: два раздела на HDD и один кэш для них на SSD. В моем случае для кэша используется /dev/sdd и два диска будут кэшироваться /dev/sdb и /dev/sdc.\nРезультат создания устройства кэша можно посмотреть с помощью следующей команды:\nbcache-super-show /dev/sdd\nТеперь самое время вспомнить про файловую систему BTRFS и развернуть ее на нашем кэширующем устройстве. Для этого нам нужно получить значение cset.uuid, которое присутствует на предыдущем скришоте.\nСделать это можно с помощью следующих команд:\nbcache-super-show /dev/sdd | grep cset.uuid\nВ моем случае это значение равно baa1f31a-9c6c-444f-a951-372ee50582e2. Соответственно, помещаем это значение в специальный текстовый файл:\necho baa1f31a-9c6c-444f-a951-372ee50582e2 > /sys/block/bcache0/bcache/attach\nИ затем собственно создаем BTRFS раздел:\nmkfs.btrfs /dev/bcache0\n \n \nВ моем случае используется только один диск, но в Интернет можно найти множество примеров использования BTRFS RAID из кэширующих дисков. \nДалее нам остается только подмонтировать BTRFS раздел:\nmount /dev/bcache0 /mnt\nЕсли вы готовы рискнуть, то можете включить кэширование с помощью команды: \nО недостатках\nВ завершении поговорим немного о недостатках Bcache. Прежде всего, если процесс читает большой файл и вместе с этим часто обращается к мелким файлам — эти частые мелкие операции чтения скорее всего не попадут в кэш, хотя они могли бы серьезно ускорить работу.\nТакже на просторах Интернета можно найти публикации о том, что в Bcache имеются проблемы с надежностью. В частности, что из-за ошибок в одной из версий ядра Линукс возможны сбои в работе Bcache. Однако, данные публикации датированы преимущественно 2017 годом и на текущий все эти уязвимости уже давно исправлены. \nЕще один недостаток bcache, на который стоит обратить внимание, это сложность с присоединением кэша к уже существующему разделу данных. Bcache требует специально подготовленные разделы для своей работы и для того, чтобы перенести данные с уже существующего раздела необходим в два раза больший объем дискового пространства и выполнение длительного перемещения данных для того, чтобы деактивировать и активировать кэширование. Данное обстоятельство необходимо учитывать при планировании использования Bcache.\nЗаключение\nНа этом мы завершим цикл статей посвященный работе в BTRFS. Мы рассмотрели основные принципы работы данной файловой системы, также рассмотрели работу с различными типами RAID массивов, поддерживаемых данной ФС и в завершении поговорили о возможности использования Bcache совместно с BTRFS для ускорения работы дисковой подсистемы.   \nНапоминаю о том, что уже сегодня состоится \nбесплатный вебинар\n по теме: \"Мини-лаборатория: Vagrant\". В рамках вебинара поговорим о том как сделать тестовый стенд на своем локальном компьютере и какие компоненты для этого понадобится, обсудим разницу между контейнеризацией и виртуализацией, посмотрим какие системы виртуализации и контейнеризации существуют, а также рассмотрим работу с инструментом автоматизации \nvagrant\n, его особенностях и принципах работы.\nЗарегистрироваться на бесплатный вебинар\n \n ",
    "tags": [
        "btrfs",
        "bcache",
        "linux"
    ]
}