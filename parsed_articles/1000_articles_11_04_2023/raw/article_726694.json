{
    "article_id": "726694",
    "article_name": "Форензика на НТО по информационной безопасности",
    "content": "Привет! Не так давно отгремела НТО по информационной безопасности для школьников. Для опытных участников CTF она не вызовет трудностей, однако для начинающих таски выдались более чем содержательные – поэтому хотелось бы ими поделиться, разобрать некоторые, а также по ходу дела порассуждать на тему формата. Если интересно – добро пожаловать под кат!\nЧто такое НТО, и с чем ее едят?\nЕсли очень кратко: национальная технологическая олимпиада, проходящая для школьников с 8 по 11 класс и имеющая огромное множество профилей. Но мы же здесь собрались, чтобы послушать про инфобез, верно?\nПроходила она в этом году на базе МИФИ в Москве. Занимает порядка недели, преимущественно в конце марта. Имеет скромный III уровень в рейтинге РСОШ, однако привлекает участников она не поэтому – НТО олимпиада в первую очередь исследовательская, с интересными и нестандартными заданиями для пытливых умов школьников со всей России. Но и плюшками участников не обделили: начиная от мерча, заканчивая БВИ в МИФИ и подпиской Яндекс.Плюса для призеров и победителей.\nФинал разделен на два основных этапа: предметные туры по математике и информатике, на которых мы останавливаться не будем, и инженерный тур, проходящий в 3 дня. Инженерный тур, в свою очередь, подразделяется еще на три части, связанные общей легендой – классический jeopardy (или task-based) CTF, расследование киберинцидента (форензика), а также закрытие уязвимостей. Доступ к этапам открывается поочередно.\n Суммарно на решение инженерного тура участникам выделяется порядка 18 часов.\nВ этой статье я хотел бы разобрать две машины из части, посвященной форензике – необычной и содержательной.\nЛегенда\nСтаршеклассник Валера, учащийся в школе кибербезопасности (однако особым умом, видимо, не отличавшийся), находит файлик с уникальным лаунчером Майнкрафта “без смс и регистрации”, и, как всякий порядочный школьник, запускает его сначала на своем, а потом и на отцовском компьютере – а он не запускается, да и все тут… Неудивительно, что ребятенок скачал какую-то малварь. А тут еще и папа – сисадмин компании, которая питает энергией весь город. Упс, неловко вышло… Так что по ходу олимпиады нам придется всю эту кашу, заваренную Валерой, разгребать.\nМашина №1\nНачинаем мы с образа (забрать его можно, кстати, \nтут\n) и пачки вопросов, на которые нам придется давать развернутые ответы и бегать к жюри защищаться.\nКак злоумышленник попал на машину?\nКак повысил свои права?\nКак злоумышленник узнал пароль от passwords.kdbx?\nКуда logkeys пишет логи?\nПароль от чего лежит в passwords.kdbx?\nРазведка\nНо, прежде чем начинать отвечать на вопросы, нужно заполучить доступ от какого-нибудь юзера. Из подходящих кандидатов напрашиваются root (как предел мечтаний) и встречающий нас на главном экране Sergey, неприветливо защищенный паролем. Благо у нас есть физический доступ к машине и мы можем воспользоваться старым как мир, но все таким же действенным способом – отредактировать параметры GRUB.\nЗапускаем машину, несколько раз прожимаем Escape, затем E… и, вуаля, у нас есть окошко редактора:\nТеперь заменяем строчку \nro quiet splash $vt_handoff\n, отвественную за некоторые параметры запуска Linux’a, на \nrw $vt_handoff init=/bin/bash\n, что позволит нам запуститься в оболочке /bin/bash, с root-правами и правом на запись в систему.\nCtrl+X… Boot. Теперь при помощи обыкновенного \npasswd\n получим доступ к обоим желанным юзерам:\nЗаходим от имени Сергея, уже с графическим интерфейсом. Давайте осмотримся на предмет наличия интересных файлов в директории юзера.\n Как выясняется, интерес представляют лишь корень и папка Downloads:\nminecraft.jar\n, вероятно, и есть тот самый лаунчер Майнкрафта с вредоносом – позднее отправим его на декомпиляцию, благо она не составляет труда.\npassword.kdbx\n упоминался в вопросе – вероятно, нам нужно будет раздобыть от него пароль.\nВидим \nlinpeas\n – понимаем, что дело пахнет повышением привилегий. Это, кстати, тоже отдельный вопрос.\nИ, наконец, \nVTropia.exe\n – странный экзешник не от мира сего (на Ubuntu он явно не запускался). Отложим его до лучшим времен.\nСамое время приступить к вопросам отчета форензика!\nКак злоумышленник попал на машину?\nУстанавливаем любой декомпилятор для .jar файлов – я воспользуюсь \nQuiltFlower\n.\n Наблюдаем потенциально интересную папку Malware, в которой находится файл \nReverseShell.java\n…\n…который в действительности является реверс-шеллом. Отлично, мы знаем, как хакер проник на машину!\nЗдесь важно сделать оговорку: в силу того, что защита этого тура очная, вас будут пытаться \nзавалить\n выяснить все подробности – объяснение в духе “через зараженный лаунчер Майнкрафта” без пояснений не прокатит.\nКак повысил свои права?\nСамое время для утилиты \nlinpeas\n, специально предназначенной для поиска способов эксалации привилегий, и любезно оставленной нам злоумышленником (злоумышленник вообще достаточно беспечен – возможно, авторам следовало получше спрятать файлы, использованные “хакером”).\nВ выводе утилиты можно потеряться, но нас интересует яркая подсветка, которую можно найти в разделе “Interesting Files: SUID/SGID”.\nВ выводе также представлена ссылка на ресурс hacktricks с подробным описанием уязвимости, которую я, пожалуй, продублирую \nздесь\n для интересующихся.\nИ поэтому я позволю себе не останавливаться на ней подробно, а лишь покажу пример эксплуатации:\nКак злоумышленник узнал пароль от passwords.kdbx?\nСамое время выяснить, что за зверь такой \nlogkeys\n. Находим \nрепозиторий на GitHub’e\n… узнаем, что logkeys – кейлоггер для Linux’a. Вектор атаки нарисовывается.\nОбнаруживаем, что бинарь лежит в уже знакомой нам папочке \nDownloads:\nА по стандартному пути (\n/var/log/logkeys.log\n) находится файл с логом (здесь, кстати, нам пригодятся полученные ранее root-права):\nПри помощи реверс-инжиниринга нетрудно убедиться, что этот файл – то, что нам нужно:\nВсе встало на свои места. Злоумышленник подгрузил кейлоггер и позднее вытащил из него пароль от \npasswords.kdbx\n.\nПароль от чего лежит в passwords.kdbx?\nДля ответа нам потребуется лишь аккуратно переписать мастер-пароль из \nlogkeys.log\nи воспользоваться графическим интерфейсом пользователя \nSergey\n.\nМастер-пароль, который разблокирует менеджер паролей: \n1_D0N7_N0W_WHY_N07_M4Y83_345Y\n.\nВидим единственную запись от Windows RDP – вероятно, от рабочего компьютера во внутренней сети отца нашего Валеры:\nЭто также данные для авторизации на второй машине, на базе Windows. Переходим к ней!\nМашина №2\nИ снова у нас пять вопросов:\nКакой пароль от Ransomware?\nКакие процессы в системе являются вредоносными?\nКак произошла доставка вредоносного ПО?\nКакие средства обфускации были использованы?\nКак злоумышленник нашел учетные данные от Web-сервиса?\nОбраз можно скачать \nтут\n.\nРазведка\nИтак, снова начинаем с разведки. Успешно авторизуемся в систему под пользователем Administrator при помощи ранее полученного пароля.\nПри входе нас встречает сразу пачка уведомлений о критических угрозах от Windows Defender’a. Восстановим все возможное для дальнейшего анализа:\nВсе они так или иначе упоминают бэкдор Bladabindi. Сохраним список путей к бинарникам (они пригодятся позднее, при ответе на второй вопрос):\nC:\\Users\\Administrator\\Desktop\\Doom.exe\nC:\\ProgramData\\Windows Explorer.exe\nC:\\Users\\Administrator\\AppData\\Local\\Temp\\Runtime Broker.exe\nC:\\Users\\Administrator\\Security Health Service.exe\nC:\\Windows\\Antimalware Service Executable.exe\nC:\\Users\\Administrator\\AppData\\Roaming\\Host Process for Windows Tasks.exe\n\nКак мы можем видеть, малварь достаточно наглая и создает целых пять копий себя, маскирующихся под легитимные процессы Windows.\nНа рабочем столе наблюдаем вредонос \nDoom.exe\n, записку шифровальщика и браузер Chrome, в котором, вероятно, будет интересующая нас информация (так как в одном из вопросов упоминается некий Web-сервис):\nПопытаемся разобрать файл \nDoom.exe\n, который определяется ресурсом \nVirusTotal\n как дроппер. Отправим его в \nDetect It Easy\n, чтобы определить формат вредоноса.\nФормат .NET означает, что мы сможем декомпилировать исполняемый файл без особых проблем при помощи, например, \ndnSpy\n.\nПодтверждаем свою гипотезу о дроппере и количестве вредоносных файлов. Порывшись в DoomResources, убеждаемся, что это те самые файлы, которые мы обнаружили ранее. Однако никакой новой информации декомпилированный Doom нам не дает:\nСамое время разреверсить один из образцов вирусов, доставленных дроппером. Повторяем процедуру – Detect It Easy, dnSpy. Приходим к тому же результату, только на этот раз у нас есть проблема…\nИ тут мы подходим к нашему первому (но не первому по списку) вопросу…\nКакие средства обфускации были использованы?\nВидим, что код превратился в нечитаемую кашу, а в одной из функции содержится предупреждение об использовании незарегистрированной версии достаточно известного обфускатора Eziriz’s .NET Reactor. Непродолжительный поиск в Интернете подсказывает, что стоит установить скрипт-деобфускатор под названием \n.NET Reactor Slayer\n.\nУспех! Налицо образец трояна удаленного доступа njRAT. Так же считает и VirusTotal.\nТеперь мы стопроцентно уверены в том, как была проведена атака. Осталось разобраться с ее последствиями – большинство файлов на диске зашифрованы в формате .p4blm. На этот раз Гугл нам не помощник – шифровальщик придется искать самостоятельно.\nЗдесь можно как-то вспомнить про таинственный экзешник \nVTropia.exe\n, лежащий на предыдущей машине, а можно пойти менее эффективным, но дающим более глубокое понимание, путем.\nИсследование всех запускавшихся в системе процессов\nПри каждом запуске приложения в Windows создается так называемый prefetch file, отвечающий за логирование всей важной информации, связанной с исполнением процесса.\nВ удобном формате просмотреть их можно с помощью утилиты \nWinPrefetchView\n. Это крайне полезная утилита в вопросах форензики, особенно связанных с дропперами и атаками, подразумевающими непосредственный запуск вредоносов.\nЗдесь мы видим описанное ранее действие дроппера \nDoom.exe\n, запуск копий njRAT и их функционирование… а также старого знакомого – \nVTropia.exe\n, после чего лог от 16 марта прекращается.\nДля полного понимания атаки также хочется выяснить, как же все-таки дроппер и шифровальщик попали на машину. Исходя из того, что запись в KeePass недвусмысленно намекает на доступ по RDP, мы отправляемся смотреть логи… и ничего. Абсолютная пустота. И так везде – вредоносы просто существуют и просто запускаются. Не стоит забывать про то, что любые логи можно вычистить… Но, учитывая то, сколько оплошностей допустил и следов оставил наш “злоумышленник”, в это предположение слабо верится.\nКак выяснилось позднее, авторы действительно решили не заморачиваться – и перенесли файлы простым drag’n’drop’ом на виртуальную машину :D\nКакой пароль от Ransomware?\nНаконец-то можно приступить к реверс-инжинирингу \nVTropia.exe\n, предположительно ransomware (шифровальщика).\nОн, как и все вредоносы в этой атаке, написан при помощи .NET Framework, поэтому в очередной раз проделываем описанную выше процедуру с DIE и dnSpy. Видим, что исходник ничем не обфусцирован – это нам на руку.\nОбнаруживаем следующий раздел Config:\nРаскодируем все его параметры – например, при помощи ресурса \nCyberChef\n, позволяющего удобно проворачивать подобные сложные цепочки преобразований:\nConfig.Key = 'WhenYoullComeHome'\nConfig.IP = 'https://pastebin.com/raw/VRjvXMu1' -> 'HelloWin'\nConfig.User = 'NTI-User'\nConfig.Message – сообщение, которое мы ранее видели в info.txt на рабочем столе\n\nТак выглядит основная функция шифровальщика – в ней применяется симметричный шифр AES Rijndael:\nКажется, что если мы сможем заполучить значение строки password, то сможем убить сразу двух зайцев: ответить на вопрос и написать декриптор – ведь переменные Key и IV (initialization vector) задаются именно ей. А для этого нужно разобраться с функцией CalculateKey. Заглянем в исходный код:\nНетрудно заметить, что условие catch никогда не выполнится – при конкатенации двух константных строк ошибки не произойдет. А \n“HelloWin”\n и \nConfig.User\n – наши старые знакомые из раздела Config.\nВычислим значение переменной result, определяющей \npassword\n и в дальнейшем \npasswordBytes:\nresult = MD5(\"HelloWinNTI-User\")\nresult = \"084b988baa7c8d98cda90c5fe603c560\"\n\nТеперь мы готовы написать свой собственный дешифратор. Удалим все лишнее из кода и запустим функцию дешифрации с предпосчитанными параметрами на единственном входном файле – в подробности реализации вдаваться не буду, лишь размещу \nитоговый код\n.\nКак злоумышленник нашел учетные данные от Web-сервиса?\nДля того, чтобы найти Web-сервис, на который заходил злоумышленник, логично заглянуть в историю браузера. Выбор пал на Google Chrome, и мы не прогадали:\nВ истории есть запросы с некоторым IP-адресом локальной сети (что соотносится с легендой), ныне недоступным, 15 марта – в дату, в которую происходило вторжение.\n Попробуем узнать, не содержатся ли где-то в системе учетные данные от сервиса. Для этого заглянем в папки, где Chrome хранит информацию, которая может быть нам интересна:\nC:\\Users\\Administrator\\AppData\\Local\\Google\\Chrome\\User Data\\Default\nC:\\Users\\Administrator\\AppData\\Local\\Google\\Chrome\\User Data\\3\n\nВ папке “Login Data” с сохраненными паролями находим пустые SQLite базы данных Chrome  Login Data и Login Data for Account, а также зашифрованный Login Data.p4blm, любезно “замороженный” нам ранзомварью. Благо для нас расшифровка теперь не составляет никакого труда. Запускаем наш скрипт и открываем полученный файл с расширением .p4blm.p4blm в любом SQLite-редакторе:\nБинго! Мы нашли логин от того самого сайта, который видели ранее – admin. Пароля, правда, нет… Но мы не отчаиваемся и продолжаем поиски дальше. Больше никакой интересной информации папка Default нам не дает…\n Зато в личных данных пользователя находим несколько зашифрованных файлов, один из которых – passwords.txt, по которому можно запустить брутфорс к сервису и получить доступ к админке компании, питающей энергией весь город!\nЗаключение\nПройдя весь этот нелегкий путь, мы с вами восстановили всю историю атаки, выследили злоумышленника, вылечили зараженные компьютеры и написали декриптор для шифровальщика.\n Я надеюсь, задачи и этот разбор вам понравились так же, как нам задания на олимпиаде!\nВ качестве заключения хотелось бы резюмировать все использованные при решении приемы и утилиты форензики:\nполучение root-шелла с помощью редактирования параметров GRUB при физическом доступе\nQuiltFlower\n – для декомпиляции .jar-файлов\nLinPEAS\n – для повышения привилегий на Linux-системе\nHackTricks\n – подробная информация об эксплуатации уязвимостей всякого рода\nVirusTotal\n – для анализа вредоносной активности приложений\nDetect It Easy\n – для обнаружения формата файла для дальнейшей декомпиляции\ndnSpy\n – для декомпиляции приложений, написанных при помощи .NET Framework\n.NET Reactor Slayer\n – для снятия обфускации, созданной при помощи .NET Reactor\nWinPrefetchView\n – для исследования всех запускавшихся в системе процессов\nCyberChef\n – для криптографических целей\nПосле форензики участников ждал третий этап инженерного тура – закрытие уязвимостей. Если очень кратко: дан абсолютно дырявый сервис с той самой админкой, которую мы нашли ранее, и его исходники – по ходу соревнования нужно находить, эксплуатировать и залатывать обнаруженные уязвимости. Если вам понравился такой формат, в следующей статье я могу разобрать и его. Дайте знать об этом в комментариях!\n Также буду рад конструктивной критике и необычным подходам к решению :)\nДо встречи на просторах Хабра!\n \n ",
    "tags": [
        "информационная безопасность",
        "форензика",
        "forensics",
        "олимпиада по иб",
        "олимпиада нти",
        "infosec",
        "эксплуатация",
        "повышение привилегий"
    ]
}