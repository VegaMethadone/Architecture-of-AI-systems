{
    "article_id": "727954",
    "article_name": "Больше контроля над селектором :nth-child() с помощью синтаксиса of S",
    "content": "Эта статья — перевод оригинальной статьи «\nMore control over :nth-child() selections with the of S syntax\n»\nТакже я веду телеграм канал «\nFrontend по‑флотски\n», где рассказываю про интересные вещи из мира разработки интерфейсов.\nСелекторы псевдоклассов :nth-child() и :nth-last-child()\nС помощью \nселектора псевдокласса :nth-child()\n можно выбирать элементы в DOM по их индексу. Используя \nмикросинтаксис An+B\n, вы получаете тонкий контроль над тем, какие элементы вы хотите выбрать.\n:nth-child(2)\n: Выберет второй дочерний элемент.\n:nth-child(2n)\n: Выберет все четные дочерние элементы (2-й, 4-й, 6-й, 8-й и так далее).\n:nth-child(2n+1)\n: Выберет все нечетные дочерние элементы (1-й, 3-й, 5-ый, 7-ой и так далее).\n:nth-child(5n+1)\n: Выберет 1-го (=(5×0)+1), 6-го (=(5×1)+1), 11-го (=(5×2)+1), ребенка.\nЧтобы интерактивно увидеть, как логика An+B влияет на выделения, используйте \nтестер :nth-child\n.\nНо можно сделать более творческий выбор, если опустить параметр \nA\n. Например:\n:nth-child(n+3)\n: Выберет каждый дочерний элемент, начиная с третьего (3-й, 4-й, 5-й и так далее).\n:nth-child(-n+5)\n: Выберет каждый дочерний элемент до 5-го (1-го, 2-го, 3-го, 4-го, 5-го).\nОбъедините несколько таких селекторов \n:nth-child()\n, и вы сможете выбирать диапазоны элементов:\n:nth-child(n+3):nth-child(-n+5)\n: Выберет каждый дочерний элемент от 3-го до 5-го (3-й, 4-й, 5-й).\nИспользуя \n:nth-last-child()\n, вы можете делать подобные селекторы, но вместо того, чтобы начинать считать с начала, вы начинаете считать с конца.\nЕсли вы хотите перейти на новый уровень, вы можете использовать :nth-child() для \nприменения стилей к группе элементов, когда они достигают определенного размера (\"Quantity Queries\")\n или \nстилизовать родительский элемент на основе количества его дочерних элементов\n.\nПредварительная фильтрация с помощью синтаксиса of S\nНовое в\n CSS Selectors Level 4\n - возможность опционально передавать список селекторов в \n:nth-child()\n и \n:nth-last-child()\n.\n:nth-child(An+B [of S]?)\n:nth-last-child(An+B [of S]?)\nКогда указано of S, логика An+B применяется только к тем элементам, которые соответствуют заданному списку селекторов S. Это означает, что вы можете предварительно отфильтровать дочерние элементы, прежде чем An+B сделает свое дело.\nПримеры\nНапример, \n:nth-child(2 of .highlight)\n выбирает второй подходящий элемент, имеющий класс .highlight. Другими словами: из всех дочерних элементов с классом \n.highlight\n выберите второй.\nЭто отличается от \n.highlight:nth-child(2)\n, который выбирает элемент, имеющий класс \n.highlight\n, \nа также\n являющийся вторым дочерним элементом.\nВ демонстрационном примере ниже вы можете увидеть эту разницу:\nЭлемент, соответствующий \n:nth-child(2 of .highlight)\n, имеет розовый контур.\nЭлемент, соответствующий \n.highlight:nth-child(2)\n, имеет зеленый контур.\nCodePen\nОбратите внимание, что \nS\n - это список селекторов, что означает, что он принимает несколько селекторов, разделенных запятой. Например, \n:nth-child(4 of .highlight, .sale)\n выбирает четвертый элемент, который является либо \n.highlight\n, либо \n.sale\n из множества дочерних элементов.\nВ демонстрационном примере ниже элемент, соответствующий \n:nth-child(4 of .highlight, .sale)\n, имеет оранжевый контур.\nCodePen\nЗебра, пересмотренный вариант\nКлассическим примером использования \n:nth-child()\n является создание таблицы с полосками зебры. Это визуальный прием, при котором в каждой строке таблицы чередуются цвета. Обычно это делается следующим образом:\ntr:nth-child(even) {\n  background-color: lightgrey;\n}\nХотя это хорошо работает для статических таблиц, это становится проблематичным, когда вы начинаете динамически фильтровать содержимое таблицы. Когда, например, вторая строка становится скрытой, в итоге остаются видимыми первая и третья строки, каждая из которых имеет одинаковый цвет фона.\nCodePen\nЧтобы исправить это, мы можем использовать \n:nth-child(An+B [of S]?)\n, исключив скрытые строки из логики \nAn+B\n:\ntr:nth-child(even of :not([hidden])) {\n  background-color: lightgrey;\n}\nCodePen\nДовольно круто, правда?\n \n ",
    "tags": [
        "css",
        "frontend",
        "html",
        "верстка сайтов",
        "верстка",
        "chromium"
    ]
}