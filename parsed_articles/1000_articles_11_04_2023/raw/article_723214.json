{
    "article_id": "723214",
    "article_name": "Как создавать SBOM в Java с помощью Maven и Gradle",
    "content": "При создании приложений на Java мы сильно зависим от внешних библиотек и фреймворков. И каждый импортируемый пакет Java, скорее всего, также зависит от большего количества библиотек. Это означает, что количество Java‑пакетов, включенных в ваше приложение, часто не совсем прозрачно.\nЭти вложенные (транзитивные) зависимости создают проблему, заключающуюся в том, что вы как разработчик, вероятно, не знаете всех библиотек, которые на самом деле используете.\nНедавно мы обсуждали, почему и как мы должны тщательно поддерживать наши зависимости. В статье  \nЛучшие практики управления зависимостями Java\n я рассказал о доступных вариантах и инструментах для настройки стратегии управления зависимостями.\nНо что, если вы передаете свое Java-приложение клиенту?\nКак они узнают, какие зависимости включены?\nЧто еще важнее, как они могут проверить, не уязвимы ли эти зависимости для проблем безопасности?\nОтветом является \nспецификация программного обеспечения\n SBOM (software bill of materials).\nЧто такое SBOM?\nСпецификация  программного обеспечения\n, часто сокращенно называемая SBOM, представляет собой список всех программных компонентов, используемых в приложении. SBOM состоит из сторонних библиотек с открытым исходным кодом, пакетов, предоставленных поставщиками, и собственных артефактов, созданных организацией. В принципе SBOM  можно рассматривать как полный список ингредиентов для ваших приложений.\nНо будьте осторожны, не путайте SBOM с Bill Of Materials (BOM) в Maven. В Maven BOM — это особый вид POM-файла, в котором мы можем централизовать зависимости для приложения. В большинстве случаев эти зависимости хорошо работают вместе и должны использоваться как набор, как мы видим в BOM, используемых в Spring.\nSBOM — это то, что вы создаете рядом с вашим приложением, чтобы любой пользователь или клиент имел единый способ узнать, что ваше приложение использует под капотом.\nПочему я должен создавать SBOM?\nСуществует несколько причин для создания SBOM. Прежде всего, вы обеспечиваете прозрачность о том, что содержит ваше приложение. В большинстве Java‑приложений от 80% до 90% создаваемого бинарного файла состоит из других Java‑пакетов, таких, как библиотеки и фреймворки.\nВ настоящее время мы видим много \nпроблем с безопасностью в цепочке поставок\n. Зависимости, которые вы используете, являются частью вашей цепочки поставок, поэтому, если в одной из этих библиотек обнаруживается проблема, вам необходимо знать, уязвимо ли приложение.\nВозьмем недавние уязвимости \nLog4Shell\n  и \nSpring4Shell\n, из‑за которых были скомпрометированы некоторые широко используемые пакеты. Когда SBOM предоставляется как часть каждого выпуска, конечные пользователи и клиенты могут легко проверить, затрагивают ли их уязвимости.\nОжидается, что создание SBOM станет обычной практикой, а иногда даже обязательной, при поставке программное обеспечение. Поэтому мы считаем важным рассказать, как создавать SBOM для вашего Java‑проекта, о чем мы расскажем в оставшейся части этой статьи.\nСтандарты SBOM: SPDX и CycloneDX\nВ настоящее время существует несколько стандартов для SBOM. Двумя наиболее часто используемыми являются SPDX и CycloneDX. Оба эти стандарта обеспечивают способ отображения компонентов, которые содержит ваше приложение.\nSoftware Package Data Exchange (SPDX) — это совместный проект Linux Foundation, который обеспечивает открытый стандарт для передачи информации о программных пакетах, включая информацию о происхождении, лицензировании, безопасности и другую связанную информацию.\nСпецификация SPDX признана международным открытым стандартом безопасности, лицензионного соответствия и других артефактов цепочки поставок программного обеспечения в качестве ISO/IEC 5962:2021.\nCycloneDX — это стандарт SBOM от фонда OWASP, разработанный для контекстов безопасности приложений и анализа компонентов цепочки поставок, обеспечивающий инвентаризацию всех компонентов программного обеспечения как собственных, так и сторонних производителей.\nСпецификация обширна и выходит за рамки библиотек программного обеспечения и включает такие стандарты, как спецификация программного обеспечения как услуги (SaaSBOM), Vulnerability Exploitability Exchange (VEX) и многое другое. Проект CycloneDX предоставляет стандарты XML, JSON и Protocol Buffers, а также большую  \nколлекцию официальных и поддерживаемых сообществом инструментов\n, которые создают или взаимодействуют со стандартом.\nКогда создавать SBOM в Java\nJava — компилируемый язык, поэтому вам следует создавать SBOM всякий раз, когда вы собираете релизную версию своего приложения.\nПоэтому создание SBOM при использовании одной из систем сборки Java имеет большой смысл, поскольку ваша система сборки загружает все пакеты, необходимые для компиляции и сборки вашего приложения.\nИспользуя плагин для Maven или Gradle, вы можете легко создавать SBOM с каждым выпуском вашего бинарного файла либо на отдельной машине, либо как часть вашего конвейера CI.\nСоздание SBOM для Java с помощью Maven\nПлагин CycloneDX для Maven\nНа Maven Central и  \nGithub\n доступен плагин CylconeDX, который, судя по всему, хорошо поддерживается и часто используется.\n<plugins>\n   <plugin>\n       <groupId>org.cyclonedx</groupId>\n       <artifactId>cyclonedx-maven-plugin</artifactId>\n       <version>2.7.1</version>\n       <executions>\n           <execution>\n               <phase>package</phase>\n               <goals>\n                   <goal>makeAggregateBom</goal>\n               </goals>\n           </execution>\n       </executions>\n       <configuration>\n           <projectType>library</projectType>\n           <schemaVersion>1.4</schemaVersion>\n           <includeBomSerialNumber>true</includeBomSerialNumber>\n           <includeCompileScope>true</includeCompileScope>\n           <includeProvidedScope>true</includeProvidedScope>\n           <includeRuntimeScope>true</includeRuntimeScope>\n           <includeSystemScope>true</includeSystemScope>\n           <includeTestScope>false</includeTestScope>\n           <includeLicenseText>false</includeLicenseText>\n           <outputReactorProjects>true</outputReactorProjects>\n           <outputFormat>all</outputFormat>\n           <outputName>CycloneDX-Sbom</outputName>\n       </configuration>\n   </plugin>\n</plugins>\nВы можете настроить плагин CycloneDX различными способами. В данном случае я привязал цель плагина \nmakeAggregateBom\n к фазе пакета Maven. После создания моего JAR плагин создаст SBOM с учетом агрегации. Он исключает тестовые зависимости и публикует SBOM в формате XML и JSON в моей целевой папке.\nВсе зависимости, как прямые, так и транзитивные, упоминаются в SBOM по отдельности, как показано ниже. В данном случае пакет  \njackson-databind\n был транзитивно включен в мое приложение через файлы  \nsprint-boot-starter-web\n.\n<component type=\"library\" bom-ref=\"pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.13.4?type=jar\">\n <publisher>FasterXML</publisher>\n <group>com.fasterxml.jackson.core</group>\n <name>jackson-databind</name>\n <version>2.13.4</version>\n <description>General data-binding functionality for Jackson: works on core streaming API</description>\n <hashes>\n   <hash alg=\"MD5\">03cb7aea126610e4c96ca6d14d75cc55</hash>\n   <hash alg=\"SHA-1\">98b0edfa8e4084078f10b7b356c300ded4a71491</hash>\n   <hash alg=\"SHA-256\">c9faff420d9e2c7e1e4711dbeebec2506a32c9942027211c5c293d8d87807eb6</hash>\n   <hash alg=\"SHA-512\">23f32026b181c6c71efc7789a8420c7d5cbcfb15f7696657e75f9cbe3635d13a88634b5db3c344deb914b719d60e3a9bfc1b63fa23152394e1e70b8e7bcd2116</hash>\n   <hash alg=\"SHA-384\">e25e844575891b2f3bcb2fdc67ae9fadf54d2836052c9ea2c045f1375eaa97e4780cd6752bef0ebc658fa17400c55268</hash>\n   <hash alg=\"SHA3-384\">e6955877c2c27327f6814f06d681118be2ae1a36bc5ff2e84ad27f213203bf77c347ba18d9abc61d5f1c99b6e81f6c2d</hash>\n   <hash alg=\"SHA3-256\">88b12b0643a4791fa5cd0c5e30bc2631903870cf916c8a1b4198c856fd91e5f4</hash>\n   <hash alg=\"SHA3-512\">7e86a69bcf7b4c8a6949acce0ec15f33b74d5ac604f23cd631ec16bfdfd70d42499028b9d062648b31d7a187ea4dc98ec296a329f4cfd4952744ed1281fa9d9a</hash>\n </hashes>\n <licenses>\n   <license>\n     <id>Apache-2.0</id>\n   </license>\n </licenses>\n <purl>pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.13.4?type=jar</purl>\n <externalReferences><reference type=\"vcs\"><url>http://github.com/FasterXML/jackson-databind</url></reference><reference type=\"website\"><url>http://fasterxml.com/</url></reference><reference type=\"distribution\"><url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url></reference></externalReferences>\n</component>\nПлагин SPDX для Maven (прототип)\nДля SPDX также существует \nплагин Maven\n. Однако он все еще обозначен как прототип. В приведенном ниже примере я использовал последнюю версию (на момент написания статьи) с с конфигурацией, аналогичной указанной в GitHub README.\nКроме того, я привязал задачу создания SPDX к фазе создания пакета, аналогично примеру CycloneDX.\n<plugin>\n   <groupId>org.spdx</groupId>\n   <artifactId>spdx-maven-plugin</artifactId>\n   <version>0.6.1</version>\n   <executions>\n       <execution>\n           <id>build-spdx</id>\n           <phase>package</phase>\n           <goals>\n               <goal>createSPDX</goal>\n           </goals>\n       </execution>\n   </executions>\n</plugin>\nВывод по умолчанию для этой версии плагина находится в файле \n/target/site/{groupId}_{artifactId}-{version}.spdx.json\n. Как видно из расширения файла, по умолчанию выводится JSON.\nПросматривая вывод, я удивился, что он содержит только зависимости верхнего уровня, а не транзитивные. \nЭтот плагин помечен как прототип, так что это может быть причиной. Кроме того, возможно, я делаю что-то не так. Однако чтение документации не дало мне четкой подсказки.\nИнструмент SPDX CLI для Maven\nВ качестве альтернативы существует инструмент командной строки под названием  \nspdx-sbom-generator\n. Этот инструмент CLI может генерировать SPDX SBOM для многих менеджеров пакетов, включая Maven для Java-приложений. Gradle в настоящее время не поддерживается.\nВызов этого инструмента из командной строки без каких-либо параметров в корне моего приложения создает для меня SBOM в формате SPDX. Другие выходные данные, такие как JSON, также поддерживаются с помощью параметра.\n./spdx-sbom-generator\nВ сгенерированном SBOM, похоже, имеются все транзитивные зависимости, упомянутые по отдельности, как я и предполагал.\n##### Package representing the jackson-databind\n\nPackageName: jackson-databind\nSPDXID: SPDXRef-Package-jackson-databind-2.13.4\nPackageVersion: 2.13.4\nPackageSupplier: Organization: jackson-databind\nPackageDownloadLocation: https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind/2.13.4\nFilesAnalyzed: false\nPackageChecksum: SHA1: 7d03e73aa50d143b3ecbdea2c0c9e158e5ed8021\nPackageHomePage: NOASSERTION\nPackageLicenseConcluded: NOASSERTION\nPackageLicenseDeclared: NOASSERTION\nPackageCopyrightText: NOASSERTION\nPackageLicenseComments: NOASSERTION\nPackageComment: NOASSERTION\n\nRelationship: SPDXRef-Package-jackson-databind-2.13.4 DEPENDS_ON SPDXRef-Package-jackson-annotations-2.13.4\nRelationship: SPDXRef-Package-jackson-databind-2.13.4 DEPENDS_ON SPDXRef-Package-jackson-core-2.13.4\nЕсли вы хотите создавать SBOM в формате SPDX, я бы посоветовал этот инструмент вместо плагина-прототипа.\nСоздание Java SBOM с помощью Gradle\nТеперь давайте посмотрим на Gradle. Хотя Gradle используется реже, чем Maven, он используется в значительной степени, и мы можем определенно сказать, что это хорошо принятый инструмент сборки в экосистеме Java.\nCycloneDX для Gradle\nДля Gradle существует плагин CycloneDX. Как и плагин для Maven, о котором мы говорили ранее, плагин для Gradle выпускается организацией  \nCycloneDX на Github\n  с частью из тех же сопровождающих, что и для плагина Maven.\nЧтобы использовать плагин, просто добавьте его в блок плагинов в вашем файле Gradle:\nplugins {\n   id 'org.cyclonedx.bom' version '1.7.2'\n}\nВы можете настроить плагин с помощью блока \ncyclonedxBom\n, как показано ниже:\ncyclonedxBom {\n   includeConfigs = [\"runtimeClasspath\"]\n   skipConfigs = [\"compileClasspath\", \"testCompileClasspath\"]\n   projectType = \"application\"\n   schemaVersion = \"1.4\"\n   destination = file(\"build/reports\")\n   outputName = \"CycloneDX-Sbom\"\n   outputFormat = \"all\"\n   includeBomSerialNumber = true\n   componentVersion = \"2.0.0\"\n}\nВ этом примере я также добавил строку \nbuild.finalizedBy('cyclonedxBom')\n в конец моего файла Gradle. \nТеперь он будет автоматически вызывать цель \ncyclonedxBom\n после сборки моего приложения и вести себя аналогично плагину Maven. Очевидно, это зависит от вас, если и как вы хотите подключить цель плагина.\nВыходные данные соответствуют ожиданиям и похожи на то, что мы видели с плагином Maven. С конфигурацией, показанной выше, вы найдете выходные данные SBOM в формате JSON и XML в папке \nbuild\n вашего проекта. Таким образом, этот плагин является отличным вариантом для пользователей Gradle для создания SBOM.\nSPDX для Gradle\nК сожалению, мы не смогли найти настоящий плагин для создания SPDX-типа SBOM  для проектов Gradle. Кроме того, сторонние инструменты CLI либо недоступны, либо некорректно работают с Java-проектами на базе Gradle.\nТаким образом, на данный момент не существует простого способа создания SPDX SBOMs для Gradle.\nСоздание SBOM для ваших Java-проектов \nСоздание SBOM во время сборки Java-проекта кажется практикой, которая скоро станет более популярной.\nПозволить вашей системе сборки позаботиться об этом имеет большой смысл.\nКак для Maven, так и для Gradle доступны плагины, которые создают SBOM во время сборки вашего приложения.\nСоздание SBOM вместе с вашими артефактами сборки Java с помощью этих плагинов очень просто, как мы показали выше.\n \n ",
    "tags": [
        "devops *",
        "безопасность",
        "security"
    ]
}