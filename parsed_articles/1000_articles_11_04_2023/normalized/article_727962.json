{
    "article_id": "727962",
    "article_name": "Компонентный подход. Организуем навигацию с помощью библиотеки Decompose",
    "content": "это третий часть серия статья компонентный подход предыдущий статья рассматривать реализовывать сложный экран разбивать набор простой компонент применимый идея организовывать сложный навигация статья практика сначала показывать помощь decompose jetpack compose создавать отдельный флоу приложение далее обсуждать реализация bottomнавигации объединять несколько флоу воедино получать навигация весь приложение показывать пример реальный приложение увидеть предлагать подход подходить большой приложение десяток сотня экран приложение сложный навигация библиотека decompose очень выручать мой команда нужно организовывать сложный навигация делать приложение крупный технологический компания sever minerals это приложение  личный кабинет сотрудник он выполнять свой рабочий задача проходить обучение узнавать новость компания планировать встреча оформлять отпуск выписывать справка т д 10 сценарий около 80ти уникальный экран главный экран приложение sever minerals for employees флоу опрос флоу заказ справка масштаб приложение экран общий скриншот невозможно рассматривать флоу разбираться помощь decompose создавать флоу качество пример рассматривать флоу  новый сотрудник   состоять два экран список сотрудник детальный информация сотрудник нажатие элемент список открываться экран детальный информация экран  это флоу создавать экран реализация флоу начинать создание экран создавать экран обсуждать предыдущий статья  напоминать код экран состоять три часть интерфейс компонент реализация компонент ui например код получаться экран список сотрудник интерфейс компонент interface employeelistcomponent      val employeeliststate stateflowemployeeliststate     fun onemployeeclickemployeeid employeeid  реализация компонент метод onemployeeclick рассматривать поздно class realemployeelistcomponent    componentcontext componentcontext   componentcontext by componentcontext employeelistcomponent       some logic  ui  composable fun employeelistuicomponent employeelistcomponent      some ui  аналогично создавать employeedetailscomponent  realemployeedetailscomponent  employeedetailsui  создавать компонент флоу флоу  новый сотрудник  также являться компонент задача  управлять стек дочерний компонент выглядеть интерфейс interface newemployeescomponent      val childstack stateflowchildstack child     sealed interface child         class listval component employeelistcomponent  child        class detailsval component employeedetailscomponent  child      свойство childstack   стек компонент sealedинтерфейсе child перечислять какой тип компонент мочь стек двигаться далеко разбираться именно decompose хранить стек компонент самый дело decompose хранить синхронизировать друг друг стек  стек конфигурация стекать компонент конфигурация   это небольшой объект который описывать тип компонент входной параметр конфигурация реализовать интерфейс parcelable  сохранять постоянный память загружать она пример конфигурация    private sealed interface childconfig  parcelable          parcelize        object list  childconfig         parcelize        data class detailsval employeeid employeeid  childconfig     основа конфигурация создаваться сам компонента должный передавать decompose специальный функция фабрика компонент который принимать конфигурация возвращать создавать компонент пример функция    private fun createchild        config childconfig        componentcontext componentcontext     newemployeescomponentchild  when config          is childconfiglist              newemployeescomponentchildlist                realemployeelistcomponentcomponentcontext                             is childconfigdetails              newemployeescomponentchilddetails                realemployeedetailscomponentcomponentcontext                         создание компонент конфигурация управлять decompose мочь изменять стек компонент напрямую манипулировать стек конфигурация decompose автоматически менять стекать компонент менять стек конфигурация   стекать компонент меняться автоматически сложность два стек почему хранить лишь стек компонент причина крыться особенность система android свернутый приложение выгружать память пользователь возвращаться приложение стек экран данные должный восстанавливать пригождаться конфигурация decompose сохранять восстанавливать стек конфигурация который напоминать являться parcelable  восстанавливать конфигурация создавать сам компонент счастие decompose прятать сложный логика два стек класс childstack  требоваться лишь объявлять конфигурация sealedинтерфейс childconfig  задавать фабрика компонент метод createchild  такой получаться код наш компонент class realnewemployeescomponent    componentcontext componentcontext   componentcontext by componentcontext newemployeescomponent      private val navigation  stacknavigationchildconfig     override val childstack stateflowchildstack newemployeescomponentchild  childstack        source  navigation        initialconfiguration  childconfiglist        handlebackbutton  true        childfactory  createchild    tostateflowlifecycle     private fun createchild        config childconfig        componentcontext componentcontext     newemployeescomponentchild  when config          is childconfiglist              newemployeescomponentchildlist                realemployeelistcomponentcomponentcontext                             is childconfigdetails              newemployeescomponentchilddetails                realemployeedetailscomponentcomponentcontext                             private sealed interface childconfig  parcelable          parcelize        object list  childconfig         parcelize        data class detailsval employeeid employeeid  childconfig      пробежаться основной момент объект navigation позволять манипулировать стек конфигурация обсуждать подробно следующий раздел метод childstack создавать стек навигация возвращать valuechildstack  value  это тип decompose удобство преобразовывать stateflow экстеншен tostateflow  начальный состояние стек задаваться параметр initialconfiguration  благодаря опция handlebackbutton  true  стек автоматически обрабатывать нажатие системный кнопка back  удалять элемент вершина стек метод createchild  это упоминать ранее фабрика компонент обращать внимание помимо конфигурация метод также принимать componentcontext  каждый вызов приходить новый дочерний контекст конец код объявлять конфигурация каждый тип компонент соответствовать свой классконфигурация вызывать метод навигация stacknavigation предоставлять метод управление стек навигация pushconfiguration  pop  replacecurrentconfiguration др вызывать нужный метод мочь угодно менять стек вернуться наш пример сделать нажатие элемент список происходить переход экран детальный информация сотрудник обработчик действие пользователь onemployeeclick находиться компонент employeelistcomponent  управление стек навигация отвечать родитель  newemployeescomponent  воспользоваться callbackом уведомлять родитель происходить событие дочерний компонент уведомлять свой родитель callback добавлять callback onemployeeselected конструктор компонент вызывать нажатие элемент список class realemployeelistcomponent    componentcontext componentcontext    val onemployeeselected employeeid  unit   componentcontext by componentcontext employeelistcomponent       some logic     override fun onemployeeclickemployeeid employeeid         onemployeeselectedemployeeid      компонент realnewemployeescomponent быть вызывать метод навигация callbackа is childconfiglist       newemployeescomponentchildlist         realemployeelistcomponent             componentcontext             onemployeeselected   employeeid                  navigationpushchildconfigdetailsemployeeid                             подключать ui реализовывать ui помощь функция children decompose composable fun newemployeesuicomponent newemployeescomponent     val childstack by componentchildstackcollectasstate     childrenchildstack  child         when val instance  childinstance             is newemployeescomponentchild",
    "tags": [
        "компонентный подход",
        "navigation"
    ]
}