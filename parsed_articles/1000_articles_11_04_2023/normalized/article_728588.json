{
    "article_id": "728588",
    "article_name": "Что умеет Try Catch в ABAP?",
    "content": "привет касаться хороший язык программирование abap еще точно возможность trycatch разрез данный язык вроде чтото пытаться  чтото  ловить все очевидный   данный конструкция открываться дополнительный возможность добавлять такой оператор  cleanup   resume   retry   before unwind  обсуждать нужный они работать cleanup блок  cleanup  использоваться удаление ссылка завершение вызов метод всякий возникать исключение система прекращать обработка момент переходить соответствующий блок  try  изза такой поведение объект находиться промежуточный состояние блок  cleanup  предоставлять мы возможность восстанавливать состояние объект выход текущий блок обработка class lcl_main definition final   public section     methods       method1       method2 endclass class lcl_main implementation   method method1     try         method2        catch cx_root         cl_demo_outputwrite catching cx_root      endtry     cl_demo_outputdisplay    endmethod   method method2     try         dataresult  2  0       cleanup         cl_demo_outputwrite cleanup      endtry   endmethod endclass  startofselection   new lcl_main method1  пример внешний блок  tryendtry  метод method1 внутренний блок  tryendtry  метод method2 который запускаться внешний блок поскольку делить 0 оператор деление вызывать исключение тип  cx_sy_zerodivide  поскольку перехватывать исключение использовать  catch cx_root  внешний блок  try  система выполнять логика блок  cleanup  внутренний блок  try  заменять  cx_root   cx_sy_buffer_overflow  который являться часть иерархия  cx_sy_zerodivide  поэтому  cleanup  выполнять это приводить дамп время выполнение resume  resume  выходить блок  catch  возобновлять обработка инструкция вызывать исключение пример низко отлично демонстрировать возможность  resume  class lcl_employee definition final create public    public section      types begin of empl_data              empid  type int4        employee id              emptyp type string      org assignment data              salary type decfloat16  pay data              phone  type numc10      communication data            end of empl_data            empl_data_t type sorted table of empl_data with unique key empid      methods constructor importing valuei_empid   type int4     methods get_data    returning valuers_result type empl_data                         raising   resumablecx_no_data_found    private section      data  emp_id       type int4      methods get_emptyp returning valuer_result type string                        raising   cx_no_data_found     methods get_salary returning valuer_result type decfloat16                        raising   resumablecx_no_data_found     methods get_phone  returning valuer_result type numc10     methods get_emp_id returning valuer_result type int4  endclass  class lcl_employee implementation    method constructor     meemp_id  i_empid   endmethod    method get_data     rs_result  value  empid   meget_emp_id                           emptyp  meget_emptyp                           salary  meget_salary                           phone   meget_phone     endmethod    method get_emptyp     r_result  switch  meget_emp_id                  when 1 then fulltime                 when 2 then parttime                 when 3 then contractor                 when 4 then casual                 else throw cx_no_data_found                             rel_proc_id  conv  meget_emp_id       endmethod    method get_phone     r_result  switch  meget_emptyp                  when fulltime then 1234567890                 when parttime then 5678901234                 when casual    then 7890123456                 else 0399999999    endmethod    method get_salary     r_result  switch  meget_emptyp                  when fulltime then 50000                 when parttime then 25000                 when casual    then 5000                 else throw resumable cx_no_data_found                             rel_proc_id  conv  meget_emp_id       endmethod    method get_emp_id     r_result  meemp_id   endmethod  endclass  data extract_t type lcl_employeeempl_data_t data error_t   type string_table  startofselection    dataall_employees_t  value int4_table   1   2   3   4   5      loop at all_employees_t reference into datadref     try         insert new lcl_employee dref get_data  into table extract_t        catch before unwind cx_no_data_found into datano_data_error         if no_data_erroris_resumable  abap_true            вызывать возобновлять исключение           resume          cleanup into datalv_clear         else            вызывать возобновлять исключение           error_t  value  base error_t  no_data_errorget_text            endif      endtry   endloop    cl_demo_outputnew write extract_t write error_t display  благодаря  resume  метод получение зарплата зарплата находить такой случай мы сообщать ошибка добавлять запись убирать  resume  вызов исключение запись таблица добавленный обращать внимание  before unwind  он поговорить поздно retry  retry  выходить блок  catch  прыгать обратно блок  try  структура управление повторять полный блок  try  должный позаботиться исключение повторяться снова снова иначе попадать бесконечный цикл class lcl_main definition final   public section     methods       method1       method2 endclass class lcl_main implementation   method method1      try         method2        catch before unwind cx_root         cl_demo_outputwrite catching cx_root      endtry      cl_demo_outputdisplay    endmethod   method method2     dataindex  0     try         dataresult  2  index       catch cx_sy_zerodivide         cl_demo_outputwrite catching cx_sy_zerodivide          index  1         cl_demo_outputwrite catching retry          retry     endtry   endmethod endclass  startofselection   new lcl_main method1  before unwind указывать дополнение  before unwind  контекст который исключение вызывать включая вызывать процедура локальный данные удаляться выход  catch  блок добавление указывать контекст удаляться выполнение  catch  блок дополнение before unwind указывать оператор resume использовать catch блок обработкивозобновлять исключение возобновлять обработка инструкция который вызывать исключениеэто единственный случай контекст исключение удаляться выход catch блок возобновлять исключение также мочь обрабатываться catch блок добавление before unwind случай контекст исключение удаляться процесс обработка оператор resume указывать любой cleanuphttpseduardocopatgithubioabapdocs740abapcleanup блок выполняться непосредственно удаление контекстаесли before unwind использоваться обработка исключение остальной случай обработка исключение использование дополнение before unwind catch  требоваться заявление resumehttpseduardocopatgithubioabapdocs740abapresume используетсяоднако это принцип разрешать время обработка исключение контекст исключение должный оценивать любой действие очистка  cleanup блокиэто иметь смысл например обработка узкий место ресурс высвобождение ресурс cleanup блок изменять контекст такой образ производить вычисление свободный ресурс обработчик исключение бессмысленный",
    "tags": [
        "sap abap",
        "abap",
        "erp",
        "try catch",
        "try"
    ]
}