{
    "article_id": "725876",
    "article_name": "Балансировка в Finagle: как работает и как сделать свой балансировщик",
    "content": "finagle   библиотека разработчик twitter использовать организация межсервисный rpc построение meshмикросервисной архитектура библиотека богатый функциональность тонкий настройка интроспекция сегодня рассматривать клиентский балансировка задача finagle иметь слоистый архитектура слой отвечать  балансировка  использовать иметься слой реализовывать свой рассматривать балансировщик который работать коробка round robin  прозрачно доступный хоста выбираться очередь запрос делаться равномерно этот реализация учитывать кроме доступность хост heap  алгоритм браться первый доступный соединение сверху power of two choices  этот реализация стараться оптимизировать распределение каждый запрос случайный образ выбираться хост доступный затем выбираться основа некоторый метрика несколько модификация стандартный учитываться загруженность ewma качество метрика использоваться rtt aperture  вид балансировка  факт развитие p2c кластер большой размер давать рассматривать какой проблема пытаться решать большой количество хост приводить большой количество соединение обращаться ко весь хост сразу установление каждый новый соединение требовать время это приводить долгий холодный старт учитывать кандидат выбираться случайно утилизация каждый соединение падать целое получаться очень эффективно то большой количество соединение  это дополнительный нагрузка ос вспомнить finagle разрабатывать twitter представлять масштаб проблема сокращать количество соединение разработчик придумывать балансировщик немой процесс выбор унаследовать p2c набор который выбирать модифицировать отличие остальной алгоритм брать хоста некоторый случайный подмножество обращение идти нагрузка возрастать выбирать набор хватать происходить увеличение спад нагрузка  сжатие граница сконфигурировать количество одновременно установленный соединение ограничивать соединение утилизироваться эффективный алгоритм aperture режим работа random aperture deterministic aperture думать название говорить сам первый случай выбирать случайный набор второй  следуемый определенный правило каждый экземпляр присваиваться идентификатор который использоваться вычисление группа хост клиент каждый клиент одинаковый идентификатор получать одинаковый набор хост который пересекаться другой указывать идентификатор считаться кластер состоять один клиент клиент получать весь набор хост подробно это описывать  документация сравнение алгоритм демонстрация работа каждый алгоритм проводить синтетический тест рамка тесто создавать s сервер каждый который отвечать задержка 100 мс  sid рост порядковый номер расти задержка выполнять n запрос concurrency  s результат получать распределение запрос зависимость использовать алгоритм код пример доступный  github результат видно rr распределять поровну указывать описание также оказываться самый долгий время выполнение тест heap основной трафик направлять первый сервер маленький задержка остальной оставаться нагружать нехорошо приводить перегрузка отдельный узел вызывать троттлинг ускоренный износ железо другой эффект остальной иметь примерно одинаковый время работа различаться лишь распределение целое оно отражать быстродействие отдельный узел загружать равномерно однако aperture видно случай 30 хост задействовать лишь часть правда время это сказываться свой конфигурация использовать p2cбалансировщик смотреть aperture число хост достигать 200 штука рассматривать коробочный реализация алгоритм реализовывать свой комбинировать иметься service discovery распределять запрос балансировщик получать список хост нужно отправлять задача выполнять механизм разрешение имя finagle имя  это указывать аргумент dest создание сервис процесс отвечать механизм resolver  выполнять преобразование некоторый имя конечный адрес причем обязательно ipадрес  delegation tables  выполнять преобразование путь согласно заданный правило получение конечный адрес цепочка namer  resolver  namer какой задача это позволять решать динамический изменение хост клиент изменение конфигурация перезапуск другой операция который мочь вызывать простой сервис распределение запрос несколько направление равномерно возможность fallback стандартный направление это позволять реализовать canary deployment быстрый откат случай проблема реализация health check уровень клиент возможность убирать добавлять хоста балансировка избыточно почему перенаправление трафик точечный тестирование новый функциональность тестировщик проставлять дополнительный параметр мочь перенаправлять трафик свой запрос адрес релизный стабильный инстанс тестовый также включать фич новый версия бэкенд часть клиент хотеть локализовать трафик рамка dc fallback остальной попадать запрос конкретный нод другой классный штука рассматривать ниже addr addr  это adt который описывать состояние получение адрес bounded  адрес находить связанный конечный назначение метаданные pending  процесс failed  происходить ошибка процесс определение neg  адрес находить конечный назначение  этот adt оно представлять три состояние inet  понятно хранить конечный ipадрес порт failed  чтото пойти servicefactory  самый неожиданный состояние качество адрес назначение выступать любой экземпляр service inet servicefactory дополнительно мочь указывать метаданные который мочь использовать балансировка запрос вид метаданные  вес адрес который позволять приоритизировать отдельный хоста servicefactory использовать очень неожиданный способ resolver упоминать resolver выполнять преобразование имя адрес имя иметь формат schemearg например создание сервис писать tinkoffru443 это самый дело упрощенный запись inettinkoffru443 случай вызываться resolver который отвечать схема inet оставаться часть передаваться аргумент ответ получать varaddr  реактивный объект pushсемантикой объект передаваться балансировщик который подписываться изменение перестраивать список доступный запрос хост весь логика  довольно просто прозрачно мочь создавать var который асинхронно обновляться менять доступный хоста например встраивать resolver inet каждый пять секунда опрашивать dns получать актуальный состояние запись чтото изменяться наш клиент сразу узнавать время resolver fixedinet который выполнять запрос dns лишь class simpleresolver extends resolver    override val scheme string  simple   override def bindarg string varaddr       val simpleservice  servicemkrequest response  req        printlnssimple request arg reqcontentstring       futurevalueresponsereq          varvalueaddrboundaddressservicefactoryservicefactoryconstsimpleservice     delegation tables dtab resolver простой прямолинейный dtab просто компонент предлагать механизм разрешение имя основа правило который применяться последовательно получение пустой результат ошибка пустота вариант перепробовать именно перепробовать dtab поддерживать fallback разделение трафик использовать имя начинаться  минимальный запись иметь вид x далее обратный порядок применяться правило путем простой замена префикс a  b например s  inet s  sprodfallbackhosttld s  sprodhosttld s  s создание сервис имя вид s8080 развертывать inetprodhosttld8080  эквивалентный inetprodhosttld8080 это получаться сделать изза отсутствие хост клиент попытаться пойти inetprodfallbackhosttld8080 разрешение имя также отвечать namer нужно указывать системный путь системный путь иметь формат  classformula inlinenamerpath namer  это fqn класс реализовать интерфейс namer задача  преобразовывать path path вернуть конечный узел varaddr это выполнять resolver необходимый параметр сформировывать место использование весь этот машинерия использоваться resolver вызывать напрямую метод myresolverbind зарегистрировать система воспользоваться создание любой сервис прямой вызов понятно регистрация свой специфика finagle использовать механизм serviceloader рефлексия немой fqn реализация искаться ресурс папка metainfservices папка создаваться файл имя необходимый интерфейс немой указываться fqn класс реализация старт приложение собирать такой сервис регистрировать второй способ явный требовать наследование класс comtwitterappapp случай переопредел",
    "tags": [
        "scala",
        "балансировка",
        "finagle",
        "балансировщик",
        "микросервисы",
        "микросервисная архитектура"
    ]
}