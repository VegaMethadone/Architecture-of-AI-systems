{
    "article_id": "727936",
    "article_name": "Интеграция и кастомизация OpenAPI в Django/Django Rest Framework",
    "content": "вступление статья представлять себя сборник ссылка рецепт позволять настраивать api гибко удобно frontend разработка основной часть статья посвящать интеграция  openapi  экосистема djangodrf коренной мотивация интеграция поддержка openapi проект  документирование api эндпоинтов возможность клиент api генерировать часть код база схема openapi существовать различный решение генерация клиентский типовмодель jsts например  openapitypescriptcodegen   openapitypescript   общий решение широкий спектр язык   коробка djangodrf предоставлять мы сильно богатый автоматический генерация схема api поэтому быть далее разбираться помощь мочь это сделать подключать openapi djangodrf существовать отличный решение один самый популярный   drfyasg   drfspectacular  drfyasg целое отличный решение однако оно поддерживать openapi 30 быть идти нога время поэтому последующий пример взять  drfspectacular  документация библиотека отличный поэтому далее просто она  устанавливать интегрировать наш проект  затем  добавлять urlspy  redocswagger пользоваться ui  drfspectacular  неплохо строить документация обработчик api метод  actionов различный view drf однако практика зачастую хватать большинство наш потребность мочь покрывать помощь декоратор  extend_view  вкратце помощь мочь описывать параметр запрос request формат ответ код статус ответ responses описание пример использование др текущий api метод очень удобно использовать сериализатор качество описание формат ответазапрос однако случай кастомизация формат запросаответ сервер один декоратор обходиться схема openapi также необходимо следить рассматривать далее некоторый полезный практик также проблема решение рамка  drfspectacular  тестирование схема вооружать генератор схема api однако мы необходимо уверенный наш схема действительно соответствовать api валидация схема проверка ее соответствие текущий api мочь воспользоваться библиотека  drfopenapitester  суть все мы необходимо  тестирование api эндпоинтов добавлять вызов schema_testervalidate_responseresponseresponse  который давать мы знать весь порядок генерация openapi схема динамический поле сериализатор хотеться создавать несколько сериализатор ради следующий эндпоинт отдавать немного немного мало поле относительно иметься другой эндпоинт решение проблема несколько вариант запрос данные принимать параметр  fields  перечисление необходимый клиент поле сам сторона backendа устанавливать ограничение отдавать данные недолго думать делать выбор польза второй вариант тк случай первый вариант 1 openapi генерировать тип ответ весь поле необходимо 2 эндпоинтов настраивать разный уровень доступ данный случай мочь давать доступ клиент данные который видеть должный целое оба вариант хороший решение вид библиотека  drfflexfields  сложно сказать насколько  drfflexfields  интегрироваться  drfspectaculardrfyasg  тк становиться подключать библиотека ограничиваться  решение  документация drf class dynamicfieldsmodelserializerserializersmodelserializer     def __init__self args kwargs         fields  kwargspopfields none         selfref_name  kwargspopref_name none          super__init__args kwargs          if fields is not none             allowed  setfields             existing  setselffields             for field_name in existing  allowed                 selffieldspopfield_name      def get_fieldsself         return superget_fields  случай динамический поле возникать сложность генерация схема тк иметься несколько сериализатор одинаковый имя итог выход иметь валидный схема добавлять строка  selfref_name  kwargspopref_name none  позволять использование одинаковый сериализатор разный поле прописывать уникальный название генерация валидный openapi схема однако случай drfspectacular оказываться мало код необходимо добавлять называть  openapiserializerextension  терминология drfspectacular from drf_spectacularextensions import openapiserializerextension  class dynamicfieldsmodelserializerextensionopenapiserializerextension     target_class  dynamicfieldsmodelserializer     match_subclasses  true      def map_serializerself auto_schema direction         return auto_schema_map_serializerselftarget direction bypass_extensionstrue      def get_nameself auto_schema direction         return selftargetref_name  подробно магия почитать  соответствующий issue все готовый вызов сериализатор мочь пользоваться возможность задавать любой поле спокойный openapi схема мочь сделать подобный образ customserializerfieldsid title description ref_nameuniquecustomserializer  кастомный формат ответ drf response умолчание drf отдавать ответ запрос вид список поле это покрывать требование возникать необходимость оборачивать ответ например  body   ошибка  errors   переписывать метод  render  класс rest_frameworkrenderersjsonrenderer  например from rest_frameworkrenderers import jsonrenderer from rest_frameworkutils import json   class jsonresponserendererjsonrenderer     charset  utf8      def renderself data accepted_media_typenone renderer_contextnone         errors           if isinstancedata dict and error  datageterrors             errorsextenderror             del dataerrors         response_dict               body data if data else              errors errors                  return jsondumpsresponse_dict  забывать добавлять  jsonresponserenderer  конфигурация  rest_framework   settingspy  default_renderer_classes path_to_modulejsonresponserenderer   данный случай сразу возникать проблема openapi схема тк  drfspectacular  попрежнему отдавать стандартный ответ решение проблема необходимо расширять сериализатор  responses  декоратор  extend_schema  базовый вариант посмотреть  faq drfspectacular  наш случай вариант адаптация использование динамический поле выглядеть следующий образ def enveloperserializer_classnone manyfalse fieldsnone ref_namenone     if serializer_class         if issubclassserializer_class dynamicfieldsmodelserializer             inner_serializer  serializer_classmanymany fieldsfields ref_nameref_name         else             inner_serializer  serializer_classmanymany          component_name  envelopedformat             serializer_class__name__replaceserializer              list if many else              ref_name if ref_name else               else         inner_serializer  serializersjsonfield         component_name  envelopedformat             ref_name if ref_name else              list if many else                extend_schema_serializermanyfalse component_namecomponent_name     class envelopeserializerserializersserializer         body  inner_serializer         errors  apierrorserializermanytrue      return envelopeserializer  немного подробный формат ошибка предыдущий пример код задействовать сериализатор  apierrorserializer  соответственно отдача ошибка api тело ответ выглядеть достаточно просто class apierrorserializerserializersserializer     code  serializerscharfieldallow_nulltrue     message  serializerscharfield     field  serializerscharfieldallow_nulltrue  забывать код высоко необходимый генерация схема реальный ответ мочь написать  свой обработчик исключение  воспользоваться библиотека  drfstandardizederrors  наш ошибка быть выглядеть следующий образ    type client_error   errors             code authentication_failed       detail incorrect authentication credentials       attr null           хотеть кастомизировать данный ответ например поменять название поле убирать атрибут type мочь переписывать  exceptionformatter  следующий образ from drf_standardized_errorsformatter import exceptionformatter from drf_standardized_errorstypes import errorresponse   class drfexceptionformatterexceptionformatter     def format_error_responseself error_response errorresponse         errors_lst                                code errcode                 message errdetail                 field errattr                          for err in error_responseerrors                  return errors errors_lst type error_responsetype   забывать добавлять  settingspy  drf_standardized_errors  exception_formatt",
    "tags": [
        "django",
        "django rest framework",
        "openapi",
        "python",
        "codegen",
        "документация"
    ]
}