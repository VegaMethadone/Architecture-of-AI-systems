{
    "article_id": "728642",
    "article_name": "Как мы наводили порядок в проекте с помощью принципов чистой архитектуры",
    "content": "все привет звать михаил копченин backendразработчик сервис биллинг  cloudmts  сегодня рассказывать рефакторить проект опираться принцип чистый архитектура эксперимент ча сподвиг модуль биллинг который разрастаться пухлый монолит бывать mvp хотеться быстро добавлять новый фич вопрос оптимальность архитектура откладываться какой задача хотеть решать    проблемный сервис работать принцип стандартный  трехзвенный архитектура  фронт клиентский часть приложение прилетать запрос попадать слой бизнеслогика сервер приложение который взаимодействовать слой доступ данные сервер база данные    функция один куча бизнеслогика зависеть инфраструктура  это подарить мы следующий проблема код сложно тестировать изза зависимость слой доступ данные последний сложно мокать тесто замокать работа kafka redis транзакция база данные это проблематичный тест приходиться подымать инфраструктура kafka mongodb postgresql весь зависимость это долго неудобный  код 3 000 срок сложно читать поддерживать особенно это чувствоваться приходить новичок команда нужно быстро разбираться структура проект   суть файл вносить изменение сразу несколько разработчик сложно мердживать разрешать конфликт    план распиливать пухлый монолит наведение порядок код решать воспользоваться принцип чистый архитектура   cleanархитектуру наш понимание   буквально пара абзац напоминать себя представлять подход предлагать р мартин   основной идея чистый архитектура заключаться создание слоистый архитектура который каждый слой иметь четкий отдельный ответственность слой организовывать такой образ изменение один слой влиять другой    entities  содержаться бизнеслогика общий многий приложение   use cases interactors  логика приложение конкретный реализация бизнеслогика это внутренний слой   внешний слой   frameworks  слой который содержать весь код связанный использование сторонний фреймворков библиотека инструмент который необходимый реализация внешний интерфейс ui инфраструктура приложение база данные httpклиент прочее   взаимодействие внутренний слой внешний мир обеспечивать слой  interface adapters  компонент преобразовывать данные формат удобный использование внутри приложение формат удобный использование внешний система наоборот сюда попадать репозиторий gateways контроллер   основополагающий момент чистый архитектура  это принцип обратный зависимость dependency inversion внутренний слой зависеть внешний взаимодействие они должно построить абстракция тот интерфейс который упоминать высокий благодаря это мочь поменять бд который использовать приложение изменение бизнеслогика детально ча расписывать  статья    совокупность подход позволять создавать гибкий переносить система возможность менять реализация модуль нижний уровень изменение модуль верхний уровень также облегчать тестирование поскольку тест мочь использовать фиктивный объект реализовать абстракция вместо реальный объект нужно мы подумать устремляться  переходить cleanархитектуру   рефакторинг проводить подход  первый этап  постараться разматывать образовываться клубок поделить слой отделять бизнеслогика слой доступ данные выделять юзкейс отличие канонический вариант описывать высоко роль entities выступать модель данные это простой модель который содержать метод бизнессценарий бизнесовой сценарий сосредотачивать юзкейс взаимодействовать слой инфраструктура интерфейс который реализовываться адаптер адаптер реализовать интерфейс который объявлять сторона юзкейс адаптер знать взаимодействовать инфраструктура рано юзкейс напрямую ссылаться адаптер зависимость адаптер граф зависимость изменяться юзкейс бизнеслогика ссылаться слой доступ данные наоборот адаптер ссылаться юзкейс такой образ инверсировать зависимость уровень организация код бизнеслогика вынести папка internal модель     юзкейс  пример скриншот использовать абстрактный название бизнесфункция internalusecaseapple  каталог юзкейс сущность apple содержать go файл который отрабатывать юзкейс связанный конкретный бизнесфункция пример predict_apple_harvestgo обладать весь метод выполнение предсказание урожай createbananago  самый   контроллер  собирать связывать сервис внешний мир  httpхендлеры консьюмер kafka cronjobs прочее   адаптер  ко весь внешний система начинать бд заканчивать весь зависимый внешний сервис   cmd каталог точка вход приложение также происходить изменение ранее единственный файл maingo который запускать подсистема приложение новый вариант каждый точка вход выделять отдельно  cli cron grpc http kafka    этот разделение облегчать мы написание тест мочь тестировать юзкейс независимо слой доступ данные интерфейс легко замокать передавать туда угодно    захотеть поменять бд например postgresql mysql мы приходиться трогать бизнеслогика тест максимально эффективный внутри команда договариваться минимум писать бизнеслогика хендлер адаптер   второй этап  понимать организация код тип файл очень удобный это юзкейс разный бизнессущность лежать один папка аналогичный история модель адаптер перемещаться проект сложно    папка  internal  каждый бизнессущность добавлять свой пакет например бизнесдомен apple одноименный пакет находиться связанный этот домен use cases адаптер модель    версия также избавляться папка контроллер перенести уровень  cmd  соответствующий раздел каждый точка вход продумывать единый структура    app   ядро точка вход    configgo  специфичный настройка конкретный точка вход   bootstrappergo  загрузчик приложение отвечать инициализация компонент связывать себя handler юзкейс юзкейс adapter    пакет  handler  соответственно лежать хендлер хендлер очень простой задача законсюмить сообщение десериализовать смапивать доменный модель передавать юзкейс залогировать ошибка юзкейс   такой образ разработчик работать конкретный функция нужно бродить все дерево перебирать разный пакет достаточно открывать один папка    такой образ разработчик работать конкретный функция нужно бродить все дерево перебирать разный пакет достаточно открывать один папка    впечатление результат   новый подход требовать время адаптироваться    сложно определять бизнеслогика полагать адаптер  хендлер  юзкейс вырабатывать следующий критерий это нужно тестировать это относиться бизнеслогика кроме правило адаптер хендлер должный максимально простой должно никакой условие кроме условие проверка ошибка поначалу сложно пересиливать добавлять каждый чих свой user case состоять один строка код это казаться overheadом действительно приходиться писать код   краткосрочный перспектива это требовать дисциплина какоето время новый подход переставать доставлять неудобство плюс видный практически сразу   код становиться гранулярный отсюда следовать сразу несколько профит просто реализовывать новый бизнестребование страшно вносить изменение существующий код разделение ответственность уровень код видно отвечать код легко читать исходный файл 3 000 строка разбиваться 30 файлик 100 строка который легко быстро понимать контекст  тесный связность бизнеслогика инфраструктура захотеть переходить другой база это составлять труд работать инфраструктурный слой интерфейс   увеличиваться производительность счет несколько разработчик мочь работать один проект конфликт проблема мердж разработчик мешать друг друг    появляться договоренность разработчик лежать унификация снижаться порог вход   писать юниттест тестировать код становиться легко нужно подымать инфраструктура задействовать база данные прочее   получать чтото неожиданный сравнение обещать подход чистый архитектура приятно ожидание совпадать реальность связь это новый сервис создавать этот гайдлайн",
    "tags": [
        "чистая архитектура",
        "рефакторинг",
        "биллинг",
        "монолит"
    ]
}