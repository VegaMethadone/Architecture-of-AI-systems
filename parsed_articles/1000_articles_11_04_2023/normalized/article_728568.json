{
    "article_id": "728568",
    "article_name": "Ядро планеты Python. Интерактивный учебник",
    "content": "добрый день звать михаил емельянов недавно опубликовывать хабер небольшой  статья  примерный путеводитель начинающий pythonразработчика пользоваться этот материал свой род оглавление книга написать первый четыре глава миниучебник ядро планета python постараться короче достаточно емко раскрывать специфика удобство красота сила прекрасный язык   оригинал учебник лежать  github  вольный сколько угодно дополнять переделывать самый главное  учебник написать jupiter notebook это значит мочь интерактивно редактировать код мгновенно добавлять новый сущность прояснять непонятный момент    промт hot planet core   погружаться python забывать прекрасный официальный документация  docspythonorg  изучать она хотя диагональ постепенно углубляться нужный раздел смочь убеждаться многий хаки открытие прочий неочевидный вещь давно разжевывать описывать иметь подробный пример применение   также рекомендовать изучение базовый синтаксис python полный катушка использовать  leetcodecom  отфильтровывать задача уровень easy добавлять дополнительный сортировка столбец acceptance вы представать волчий оскал соревновательный платформа ванильный букварь плавно нарастать уровень задачка   1 структура данные       известно программирование  структура данные  алгоритм никлаус вирт книжка такой начинать данные плавненько переходить метод обработка   список list    список  самый универсальный популярный структура данные python пока точно определяться структура понадобиться ваш проект просто взять список достаточно просто мигрировать чтонибудь специализированный  список представлять себя упорядочивать изменять коллекция объект произвольный тип внутренний строение список  массив точно vector указатель т е список являться динамический массив   a     создавать пустой список  a listint  10 20 b listint  30 40 aappend50   добавлять значение конец список binsert2 60   вставлять значение определенный индекс printa b  a  b printfadd a  areverse b  listreverseda   reversed возвращать итератор список printfreverse a b  b  sorteda   возвращать новый отсортировывать список asort   модифицировать исходный список возвращать printfsort a b  s str  a whole string list_of_chars list  lists printlist_of_chars list_of_words list  ssplit printlist_of_words  i int  list_of_charsindexw   возвращать индекс первый вхождение искомый элемент вызывать исключение valueerror printi list_of_charsremovew   удалять первый вхождение искомый элемент вызывать исключение valueerror e  list_of_charspop9   удалять возвращать значение расположенный индекс pop аргумент удалять вернуть последний элемент список printlist_of_chars e aclear   очистка список   10 20 50 30 40 60 add 10 20 50 30 40 60 reverse 60 40 30 50 20 10 10 20 50 30 40 60 sort 10 20 30 40 50 60 10 20 30 40 50 60 a   w h o l e   s t r i n g a whole string 2 a   h o l e   s t i n g r   кортеж tuple   кортеж  список неизменяемый immutable хешировать hashable кортеж содержать тот данные список занимать мало место   a  2 3 boson higgs 156e22 b  2 3 boson higgs 156e22  printflist a__sizeof__ bytes printftuple b__sizeof__ bytes   list 104 bytes tuple 64 bytes   именовать кортеж named tuple   соответствие название иметь именовать поле удобно   from collections import namedtuple  rectangle  namedtuplerectangle length width r  rectanglelength  1 width  2  printr printrlength printrwidth printr_fields   rectanglelength1 width2 1 2 length width   словарь dict    словарь  второй частота использование структура данные python dict  реализация хештаблица поэтому качество ключ брать нехешировать объект например список тутто мы пригождаться кортеж ключ словарь любой неизменяемый объект число строка datetime функция такой объект иметь метод  __hash__  который однозначно сопоставлять объект некоторый число этот число словарь искать значение ключ   список словарь множество который рассматривать ниже изменяемый иметь метод хеширование попытка подставлять словарь возникать ошибка   d     создавать пустой словарь  d dictstr str  italy pizza us hotdog china dim sum   непосредственный создание словарь  k  italy us china v  pizza hotdog dim sum d  dictzipk v   создание словарь два коллекция помощь zip  k  dkeys   коллекция ключ отражать изменение основной словарь v  dvalues   коллекция значение отражать изменение основной словарь k_v  ditems   кортеж ключзначение который отражать изменение основной словарь  printd printk printv printk_v  printfmapping kmappingitaly  dupdatechina dumplings   добавление значение совпадение ключ старый значение перезаписывать printfreplace item d  c  dchina   читать значение printfread item c  try     v  dpopspain   удалять значение вызывать исключение keyerror except keyerror     printdictionary key doesnt exist   пример dict comprehension подробно comprehension рассматривать ниже b  k v for k v in ditems if a in k   вернуть новый словарь отфильтровывать значение ключ printb  c  k v for k v in ditems if lenv  7   вернуть новый словарь отфильтровывать длина значение printc  dclear  очистка словарь   italy pizza us hotdog china dim sum dict_keysitaly us china dict_valuespizza hotdog dim sum dict_itemsitaly pizza us hotdog china dim sum mapping pizza replace item italy pizza us hotdog china dumplings read item dumplings dictionary key doesnt exist italy pizza china dumplings us hotdog china dumplings   решение проблема вычисление хеш работа словарь   любой хештаблица число питоновский словарь должный уметь решать проблема вычисление хеш использоваться техника  open addressing   chaining  python  использовать  open addressing   новый словарь инициализироваться 8 пустой слот   интерпретатор сначала пытаться добавлять новый запись адрес зависеть хеш ключ   addr  hashkey  mask     mask  pydictminsize  1   адрес занятый интерпретатор проверять помощь  хеш ключ оба совпадать значит запись существовать начинаться зондирование свободный слот который идти псевдослучайный порядок порядок зависеть значение ключ новый запись добавлять первый свободный адрес   чтение словарь происходить аналогично интерпретатор начинать поиск позиция addr идти тот псевдослучайный путь пока прочитывать нужный запись   defaultdict   попытаться прочитывать обычный словарь значение ключ который выбрасывать исключение keyerror исключение быть рассматривать ниже defaultdict позволять писать обработчик исключение просто воспринимать чтение несуществующий ключ команда записывать ключ вернуть значение умолчание например defaultdictint вернуть 0   from collections import defaultdict  dd  defaultdictint printdd10   печать int выводить ноль значение умолчание  dd     обычный пустой словарь  printdd10   вызывать исключение keyerror   0   счетчик counter   счетчик подсчитывать передавать объект очень удобно просто бухнуть счетчик какойнибудь список сразу получать структура давать подсчитывать элемент   from collections import counter  shirts_colors  red white blue white white black black c  countershirts_colors printc  cblue  1 printfafter shopping c    counterwhite 3 black 2 red 1 blue 1 after shopping counterwhite 3 blue 2 black 2 red 1   объяснение работа counter помощь defaultdict   from collections import defaultdict  shirts_colors  red white blue white white black black  d  defaultdictint for shirt in shirts_colors     dshirt  1  printd   defaultdictclass int red 1 white 3 blue 1 black 2   множество set   третий распространенность питоновский структура данные когдатый python молодой множество представлять себя несколько редуцированный словарь время судьба реализация становиться расходиться однако множество всетака являться хештаблица соответствующий быстродействие разный тип операция   big_cities setstr  newyork los angeles ottawa american_cities setstr  chicago newyork los angeles  big_cities  sydney   добавлять значение add american_cities  salt lake city seattle   слагать множество update  printbig_cities american_cities  union_cities setstr  big_cities  american_cities   union intersected_cities setstr  big_cities  american_cities   intersection dif_cities setstr  big_cities  american_citi",
    "tags": [
        "учебник",
        "python",
        "roadmap",
        "career",
        "kandinsky art"
    ]
}