{
    "article_id": "727892",
    "article_name": "Корни RxJava — о чем мы не подозревали",
    "content": "все привет звать руслан head of mobile development один международный компания наш производственный практика достаточно проект использовать упрощенный работа асинхронщина фреймворк rxjava обычно изучение rxjava большинство статья онлайншкола начинаться слово жить observablesingleflowable решать подписываться правило идти пара слово оператор усилять разбор отличие  map   flatmap concatmap switchmap  сразу вспоминаться среднестатистический собеседование какойнибудь компания далеко идти чтото очень внятный теоретический горячий источник весь реальность начинающий android разработчик либо начинать coroutines flow либо шлепать rxjava цепочка один то алгоритм authcredentials     subscribeonschedulersio     observeonandroidschedulersmainthread     subscribe response          logdresponse responsetostring                  throwable          logderror throwablelocalizedmessage      красота цепочка который чтото получать бэкэнд работать действительность представлять работать начитываться умный статья rxjava построить основа паттерн observer думать   метод auth  это издатель  subscribe  это подписчик  subscribeon   устанавливать стратегия какой пуля поток работать издатель  observeon   определять какой пуля поток получать данные наш подписчик который бережно помещать внутрь метод subscribe заканчивать статья увы все казаться самый дело  метод auth  это действительно издатель  subscribe   подписчик один лишь оговорка  подписчик замыкать цепочка  тот вызов метод subscribe вернуть некий disposable отсюда назревать резонный вопрос бывать какието еще подписчик представлять бывать век жить век учиться каждый работать проект компания rxjava открывать она новый бесконечный ящик пандоры окей давать близко суть курс мы говорить каждый оператор возвращать мы новый экземпляр источник видоизменять данные применять какието оператор трансформация комбинация сортировка тд мы забывать упоминать один важный вещь каждый оператор это источник внутри который свой подписчик прикидывать убеждаться давать рассматривать реализация функция  take  капот original source from rxjava3 library public final class observabletaket extends abstractobservablewithupstreamt t      final long limit     public observabletakeobservablesourcet source long limit          supersource         thislimit  limit           override     protected void subscribeactualobserver super t observer          sourcesubscribenew takeobserverobserver limit           static final class takeobservert implements observert disposable          final observer super t downstream          boolean done          disposable upstream          long remaining         takeobserverobserver super t actual long limit              thisdownstream  actual             thisremaining  limit                   override         public void onsubscribedisposable d              if disposablehelpervalidatethisupstream d                  upstream  d                 if remaining  0                      done  true                     ddispose                     emptydisposablecompletedownstream                  else                      downstreamonsubscribethis                                                 override         public void onnextt t              if done  remaining  0                  boolean stop  remaining  0                 downstreamonnextt                 if stop                      oncomplete                                                 override         public void onerrorthrowable t              if done                  rxjavapluginsonerrort                 return                           done  true             upstreamdispose             downstreamonerrort                   override         public void oncomplete              if done                  done  true                 upstreamdispose                 downstreamoncomplete                                override         public void dispose              upstreamdispose                   override         public boolean isdisposed              return upstreamisdisposed                шок правда тот каждый оператор подписываться друг друг цепочка пример наличие  doonterminate exitprocess0   давать разный результат зависимость местоположение цепочка singlejust1     subscribeonschedulersnewthread     doonsuccess  loggerwarningfirst single on threadcurrentthreadname      observeonschedulersio     doonterminate  exitprocess0      doonerror  throwable  loggerwarningthrowablelocalizedmessage      subscribe          loggerwarningroot subscribe threadcurrentthreadname           throwable  loggerwarningthrowablelocalizedmessage       output  warning current thread rxnewthreadscheduler1 warning current thread after observeon rxcachedthreadscheduler1 вопрос  лог  root subscribe threadcurrentthreadname     этот нормальный поведение выполняться метод  doonterminate  exitprocess0  который завершать программа просто выполняться очередь весь оператор корневой цепочка завершать свой выполнение убеждаться переставлять самый начало rx  цепочка выполнение такой алгоритм увидеть никакой лог программа завершаться появление держать информация ум далеко начинаться странный странность который понимание материал объяснять все просто сложный приводить пример singlejust1     subscribeonschedulersnewthread     doonsuccess  loggerwarningcurrent thread threadcurrentthreadname      observeonschedulerscomputation     doonsuccess  loggerwarningcurrent thread after observeon threadcurrentthreadname      subscribeonschedulersio     doonerror  throwable  loggerwarningthrowablelocalizedmessage      subscribe          loggerwarningroot subscribe threadcurrentthreadname           throwable  loggerwarningthrowablelocalizedmessage       output warning current thread rxnewthreadscheduler1 warning current thread after observeon rxcomputationthreadpool1 warning root subscribe rxcomputationthreadpool1 вполне реальный ситуация который вызывать ступор радужный  subscribeonobserveon  благо документация гит rxjava написать писать один раз корневой цепочка вызывать  subscribeon   observeon  вызывать сколько угодно правило правило жить этот ладно самый дело  subscribeon  вызывать сколько угодно второстепенный цепочка который пример вызываться внутри оператор  flatmap  поведение корневой цепочка максимально неожиданный singlejust1     subscribeonschedulersnewthread     doonsuccess  loggerwarningcurrent thread threadcurrentthreadname      observeonschedulerscomputation     doonsuccess  loggerwarningcurrent thread after observeon threadcurrentthreadname      flatmap          singlejust2subscribeonschedulersio          doonerror  throwable  loggerwarningthrowablelocalizedmessage      subscribe          loggerwarningroot subscribe threadcurrentthreadname           throwable  loggerwarningthrowablelocalizedmessage       output warning current thread rxnewthreadscheduler1 warning current thread after observeon rxcomputationthreadpool1 warning root subscribe rxcachedthreadscheduler1 оказываться rxjava ключевой понятие характеризовать порядок работа цепочка   upstream   downstream ниже скрин нарисовать такой upstream downstream смысл этот два термин подписка происходить вверх течение upstream выброс данные вниз течение downstream давать заглядывать капот функция subscribeon интересно почему случай flatmap поток переключаться второй subscribeon io пулла поток это поворот оказываться внутри функция subscribeon делать replace передаваемый экземпляр пул поток replace работать снизу вверх проходить корневой цепочка вызов subscribeon который самый первый сверху устанавливать реальный последний применять пул поток выполнение зря называться subscribeon подписка  upstream  интересно происходить observeon почему вызывать все простой observeon капот replace сверху вниз downstream именно это смениться столько сколько захотеть еще держать ум оператор друг друг подписываться смочь отвечать вопрос почему subscribeon второстепенный цепь менять поведение корневой думать очевидно понравиться статья подписываться  телеграмканал",
    "tags": [
        "rxjava",
        "android",
        "android development",
        "observable",
        "observer",
        "kotlin",
        "java",
        "android sdk",
        "room",
        "retrofit2"
    ]
}