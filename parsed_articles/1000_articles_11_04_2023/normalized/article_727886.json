{
    "article_id": "727886",
    "article_name": "Как на самом деле работает Async/Await в C# (Часть 2)",
    "content": "оригинальный статья довольно объемный взять смелость разбивать несколько независимый часть легкое перевод восприятие disclaimer  являться профессиональный переводчик перевод подготовить скоро коллега быть благодарный любой исправление помощь перевод статья очень интересный давать сделать она доступный русский язык часть 1 самый начало часть 2 асинхронный модель основа событие eap появление tasks асинхронный модель основа задача tap valuetasks итератор c помощь asyncawait внутренний устройство преобразование компилятор synchronizationcontext configureawait поле state machine заключение асинхронный модель основа событие eap net framework 20 представлять несколько api реализовать паттерн обработка асинхронный операция предназначать первый очередь выполнение контекст клиентский приложение eventbased asynchronous pattern eap также состоять пара член минимум возможно метод инициирование асинхронный операция событие прослушивание завершение такой образ наш предыдущий пример dostuff мочь представлять вид набор член подобный этот class handler      public int dostuffstring arg      public void dostuffasyncstring arg object usertoken     public event dostuffeventhandler dostuffcompleted   public delegate void dostuffeventhandlerobject sender dostuffeventargs e  public class dostuffeventargs  asynccompletedeventargs      public dostuffeventargsint result exception error bool canceled object usertoken          baseerror canceled usertoken  result  result      public int result  get   регистрировать работа продолжение событие dostuffcompleted затем вызывать метод dostuffasync инициировать операция завершение событие dostuffcompleted асинхронно подымать вызывающий сторона обработчик продолжать работа вероятно проверять предоставлять usertoken соответствовать ожидать позволять подключать событие несколько обработчик одновременно паттерн немного упрощать некоторый случай использование значительно усложнять другой учитывать предыдущий пример apm copystreamtostream это чемто говорить получать широкий распространение появляться исчезать фактически один выпуск net framework хотя оставлять api добавлять время существование такой pingsendasyncpingpingcompleted public class ping  component      public void sendasyncstring hostnameoraddress object usertoken     public event pingcompletedeventhandler pingcompleted       менее добавлять один заметный достижение который учитывать модель apm который сохраняться модель который использовать сегодня  synchronizationcontext  synchronizationcontext также представлять net framework 20 качество абстракция общий планировщик частность наиболее использовать метод synchronizationcontext являться post который ставить рабочий элемент очередь любой планировщик представлять этот контекст базовый реализация synchronizationcontext  например просто представлять threadpool поэтому базовый реализация synchronizationcontextpost просто делегировать  threadpoolqueueuserworkitem  который использоваться попросить threadpool вызывать предоставлять обратный вызов соответствовать состояние один поток пул однако суть synchronizationcontext заключаться поддержка произвольный планировщик скоро поддержка планирование такой образ оно работать соответствие потребность различный модель приложение рассматривать такой структура пользовательский интерфейс windows forms большинство фреймворков пользовательский интерфейс windows элемент управление связывать определенный поток поток запускать цикл обработка сообщение который выполнять работа способный взаимодействовать этот элемент управление поток должный пытаться манипулировать этот элемент управление любой поток который хотеть взаимодействовать элемент управление должный сделать это отправлять сообщение который потреблять цикл обработка сообщение поток пользовательский интерфейс windows forms упрощать задача помощь такой метод controlbegininvoke который ставить очередь предоставлять делегат аргумент выполнение любой поток связанный данный элемент управление такой образ мочь написать код подобный этот private void button1_clickobject sender eventargs e      threadpoolqueueuserworkitem_               string message  computemessage         button1begininvoke                       button1text  message                это позволять разгружать работа computemessage выполнение поток threadpool пользовательский интерфейс оставаться отзывчивый время обработка затем этот работа завершаться передавать делегат обратно поток связанный button1 обновление метка button1 достаточно просто wpf нечто подобный тип dispatcher private void button1_clickobject sender routedeventargs e      threadpoolqueueuserworkitem_               string message  computemessage         button1dispatcherinvokeasync                       button1content  message                net maui нечто подобный хотеть помещать логика вспомогательный метод например  call computemessage and then invoke the update action to update controls internal static void computemessageandinvokeupdateactionstring update    затем мочь использовать это следующий образ private void button1_clickobject sender eventargs e      computemessageandinvokeupdatemessage  button1text  message  реализовать computemessageandinvokeupdate такой образ мочь работать любой этот приложение нужно жестко кодировать знать каждый возможный фреймворка пользовательский интерфейс synchronizationcontext мы помогать мочь реализовать метод следующий образ internal static void computemessageandinvokeupdateactionstring update      synchronizationcontext sc  synchronizationcontextcurrent     threadpoolqueueuserworkitem_               string message  computemessage         if sc is not null                      scpost_  updatemessage null                  else                      updatemessage                это использовать synchronizationcontext абстракция нацеливать любой планировщик который должный использовать вернуться необходимый среда взаимодействие пользовательский интерфейс затем каждый модель приложение обеспечивать публикация качество synchronizationcontextcurrent производный synchronizationcontext тип который делать правильный вещь например windows forms иметь следующий public sealed class windowsformssynchronizationcontext  synchronizationcontext idisposable      public override void postsendorpostcallback d object state          _controltosendtobegininvoked new object  state         wpf это  public sealed class dispatchersynchronizationcontext  synchronizationcontext      public override void postsendorpostcallback d object state          _dispatcherbegininvoke_priority d state       рано aspnet   который заботиться какой поток выполняться работа скоро работа связывать данный запрос сериализовать такой образ несколько поток мочь одновременно обращаться данный httpcontext internal sealed class aspnetsynchronizationcontext  aspnetsynchronizationcontextbase      public override void postsendorpostcallback callback object state          _statehelperqueueasynchronous  callbackstate       это также ограничиваться такой основный модель приложение например xunit  это популярный фреймворк модульный тестирование который использоваться основной репозиторий net модульный тестирование также использовать несколько пользовательский synchronizationcontexts мочь например разрешать тесто выполняться параллельно ограничивать количество тест который мочь выполняться одновременно это сделать помощь synchronizationcontext public class maxconcurrencysynccontext  synchronizationcontext idisposable      public override void postsendorpostcallback d object state              var context  executioncontextcapture         workqueueenqueued state context         workreadyset       метод post контекст  maxconcurrencysynccontext  просто ставить работа собственный внутренний очередь который затем обрабатывать свой собственный рабочий поток контролировать количество зависимость желаемый максимальный параллелизм понимать идея это связанный eventbased asynchronous pattern eap synchronizationcontext вводить одновременно eap диктовать с",
    "tags": [
        ".net",
        "c#",
        "асинхронное программирование"
    ]
}