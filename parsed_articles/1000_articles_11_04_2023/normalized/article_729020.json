{
    "article_id": "729020",
    "article_name": "Зачем нам Reactive и как его готовить",
    "content": "привет звать  татьяна руфанова  сегодня быть понимать принимать reactive реактив статья рассказывать почему выбирать реактив мидло слой мобильный приложение альфабанка 300 микросервис треть реактивный разбирать почему нелогичный поведение реактивный программа самый дело очень логичный какой сложность реактивный подход приносить процесс написание исполнение код это бороться траблшутить прод быть ломать тест project reactor наливать чай включать звук природа настраиваться проходить стадия принятие reactive немного работать альфабанка 5 год участвовать продуктовый внутренний разработка 3 год команда писать реактивный код почему использовать реактив альфабанка нагружать микросервис переписывание картинка реальный мониторинг один нагружать микросервис альфабанка дореактивный период   приложение запускать 8 инстанс суммарно держать 750 запрос секунда 750 запрос секунда сервис бэк который обращаться наш микросервис мочь происходить таймаут сразу сказываться время ответ таймаут 10 секунда помимо время ответ таймаут бэкэнд влиять здоровье микросервис  обрастать поток какойто момент начинать перезапускаться поток упираться потолок сервис перезапускаться почему происходить обычный приложение бизнеслогика собирать данные несколько сервис сходить база кеш соединять все вместе отдавать наружу  никакой сложный вычисление зато клиентский запрос каждый порождать параллельный вызов внешний источник данные очередь мочь долго отвечать делать выдерживать пиковый нагрузка увеличивать количество поток пул север tomcat увеличивать количество поток пул внешний вызов hystrix увеличивать память цпу самый приложение поток нужный ресурс увеличивать количество инстанс переписывать все реактив наш бизнесприложение поток больший часть время заблокировать вводомвывод ждать ктонибудь присылать данный сеть   потреблять ресурс делать переписывание реактив мониторинг приложение реактивный исполнение 25 раз запрос секунда пик 2000 меньший количество инстанс 5 2000 запрос секунда таймаут внешний вызов попрежнему случаться таймаут 10 секунда количество поток стабильно небольшой 60 против 350 мало 60 поток почему микросервис неблокирующий webflux project reactor который работать io точно nio неблокирующий вводомвывод отличие tomcat каждый блокировать вызов создаваться отдельный поток webflux другой модель небольшой количество поток бегать цикл событие ввод вывод event loop какогото ранее приостанавливать реактивный стрим приходить событие ввод вывод оканчивать дождаться отправлять данный поток продолжать выполнять логика стрим получаться наш приложение один клиент выполнять бизнеслогика пока другой ждать ответ извне весь это один поток еще подчеркивать наш случай отсутствовать cpu intensive задача поток свободный время весь время заниматься вычисление обработка большой количество входить запрос попрежнему потребоваться параллельный поток теория наш опыт промышленный эксплуатация показывать реактивный микросервис держать нагрузка значительно наш 300 микросервис треть реактивный собираться останавливаться упрощать разработка сопровождение большой кодовый база писать библиотека реактивный логирование кэширование трейсинг метрика тестирование прочий утилита необходимость писать библиотека реактивный стэк  один сложность использование реактив  обычный многопоточный приложение все написать работать коробка реактивный часто нужно дорабатывать напильник сложность поговорить поздно помимо внутренний оптимизация работа приложение реактивный подход позволять выстраивать реактивный взаимодействие сервис делать отзывчивый приложение получать вход отдавать выход поток данные мера готовность например клиент банк обязательно видеть история операция сразу загрузка объем занимать заметный время достаточно отображать первый страница мера чтение данные база подгружать последующий реактивный межсервисный взаимодействие оставаться рамка статья быть говорить исключительно внутренность предлагать разбираться такой такой реактив такой реактив java reactive streams причем project reactor работать почитать документация  немного теория рекомендовать познакомиться  the reactive manifesto  еще знакомый манифест описывать принцип реактивный подход общий далеко быть говорить реализация jvm именно спецификация  reactive streams  цель reactive streams  находить минимальный набор интерфейс метод протокол который описывать необходимый операция сущность реализация асинхронный поток данные неблокирующий обратный давление nonblocking backpressure обратный давление   это механизм помощь который каждый метод обработка поток данные управлять количество входящий данные блокировать поток например источник отдавать данные быстро потребитель обрабатывать backpressure помогать выравнивать скорость источник потребитель согласно спецификация реактивный стрим должный обрабатывать потенциально бесконечный количество элемент последовательно асинхронно передавать элемент компонент обязательный неблокирующий обратный давление сам спецификация reactive streams состоять следующий часть api   определять интерфейс реализация reactive streams также позволять совмещать различный реализация specification   сам спецификация который описывать должный вести реализация этот интерфейс the technology compatibility kit  tck   минимальный набор тест проверка соответствие спецификация самый интерфейс api интерфейс reactive streams взаимодействие они быть интересовать publisher subscriber subscription publisher   это источник данные который подписываться метод subscribe subscriber   потребитель подписка получать событие жизненный цикл стрим onsubscribe onerror oncomplete данный ради который все затеваться элемент реактивный стрим onnext subscription   результат подписка потребитель источник помощь который запрашивать n элемент request отменять подписка cancel java контрибьютята мочь реализация reactive streams некоторый реализация reactive streams самый популярный реализация пожалуй  project reactor  настоятельно рекомендовать прочтение  reactor 3 reference guide  целиком приятно интегрироваться spring framework который активно использоваться микросервис альфабанка диаграмма класс видно взаимосвязанный интерфейс реактивный стрим publisher два основной класс reactor flux mono диаграмма наследование класс project reactor reactive streams оба класс  источник данные тот разница flux отдавать потенциально бесконечный количество элемент mono один жизненный цикл реактивный стрим жизненный цикл пригождаться быть говорить накладной расход overhead производительность работа оператор поток давать написать небольшой реактивный стрим рассматривать этап сборка подписка исполнение пример код находить  httpsgithubcomtirufanovareactorexx  сборка пример код ниже range создавать последовательность элемент 5 100 map преобразовывать каждый элемент строка filter оставлять стрим строка длина который равный 1 take брать весь последовательность 3 первый элемент  assemblysubscriptionexecutiontestassemble сборка реактивный стрим оператор hide смотреть убирать внутренний оптимизация библиотека который мочь помешать мы  поймать дзен  понимать реактив процесс сборка стрим идти сверху вниз мера программа выполняться каждый каждый оператор создаваться дополнительный обертка  флакс  пример получаться 5 штука подписка предыдущий шаг собирать цепочка оператор который обрабатывать элемент никакой обработка факт происходить мы нужно подписываться стрим подходить метод blocklast который капот вызывать subscribe источник flux assemblysubscriptionexecutiontestsubscribe подписка реактивный стрим подписка происходить снизу вверх сначала оператор blocklast подписываться оператор take оператор take подписываться filter далее пока ктото подписываться первый fluxrange каждый вызов создаваться новый оберткидекоратор еще 5 пять объект дополнение создавать этап сборка исполнение цепочка собирать она подписываться потребитель логично данный элемент стрим идти сверху вниз источник потребитель реактивный стрим проходить элемент событие они все однозначно добавлять реактивный цепочка два точка логирование мето",
    "tags": [
        "java",
        "project reactor",
        "reactive streams",
        "реактив",
        "реактивные стримы",
        "webflux",
        "инстансы",
        "микросервисы"
    ]
}