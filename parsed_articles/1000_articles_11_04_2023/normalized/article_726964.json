{
    "article_id": "726964",
    "article_name": "Как мы управляем распределенными транзакциями в сервисах #CloudMTS. Без саг",
    "content": "хабр привет     звать илья казначей  color  техлид команда cloudmts    представлять распределять процесс состоять сотня шаг часть выполняться последовательно часть  параллельно каждый шаг подразумевать несколько вызов отдельный сервис управление состояние система  задача сложный сделать изменение состояние происходить детерминированный транзакция либо выполняться либо процесс либо завершаться полностью либо откатиться полностью понимать происходить ошибка главное  нужно сделать процесс пойти далеко перезапуститься     такой задача решать один наш сервис  containerum kubernetes service  статья рассказывать научаться управлять распределенный транзакция включать 200300 шаг дюжина сервис    сразу сказать статья речь пойти распределенный транзакция база данные транзакция уровень бизнеслогика приложение     итак клиент  консоль управление  нажимать кнопка создавать кластер kubernetes запускаться многоступенчатый процесс задействующий несколько сервис создаваться виртуальный машина виртуальный сеть диск кластер сущность    очень сокращенный вид путь выглядеть примерно        каждый этап верхнеуровневый пайплайн спрятать один несколько цепочка процесс ниже пример какой процесс раскладываться шаг  worker creation  картинка высоко        такой матрешка ожидать каждый этап     один вм стартануть ос мы обрабатывать ошибка удалять проблемный машина пересоздавать нужно группа машина удалять компонент система должный принимать решение дальнейший действие        отвечать вопрос мы нужно     понимать какой состояние находиться каждый элемент система   обеспечивать однозначность состояние создаваться изменяться прочее согласованный обработка        domaindriven design  решение этот задача пойти путь  domaindriven design  ddd описывать сущность сервис вид домен каждый отдельный сервис сетевой сервис платформа виртуализация кластер kubernetes далее  это доменный агрегат представлять себя древовидный структура домен     например выглядеть доменный агрегат кластер kubernetes кластер  это корень доменный агрегат нод группа нод lb  домен         применять подход ddd смочь разделять сложный логика сервис отдельный слабосвязанный компонент домен каждый который иметь свой состояние это позволять значительно упрощать работа параллельный процесс обработка множество событие происходить протяжение жизненный цикл кластер      ddd конечный автомат fsm  следующий момент  это понимать управлять состояние доменный сущность переход они описывать каждый домен свой набор состояние помощь  конечный автомат finitestate machine fsm     выглядеть схема конечный автомат один домен  нод внутри кластер kubernetes         использование конечный автомат помогать мы сделать обработка ошибка согласованный состояние создание виртуальный машина происходить ошибка понимать создаваться сразу переходить статус удалять создавать застревать статус os_startup_pending сразу мочь переходить удаление вм    результат весь процесс зависать ошибка откатываться назад перезапускаться         подниматься уровень высокий посмотреть происходить обработка событие рамка один доменный агрегат  кластер kubernetes древовидный схема появляться дочерний родительский сущность сущность который находиться высокий уровень являться родительский отношение тот который ниже например кластер  родительский сущность группа workerнод masterнод load balancer изменение состояние один дочерний сущность запускать действие изменение состояние родительский сущность наоборот происходить ошибка родительский сущность принимать решение делать далеко    посмотреть пример картинка     наш доменный агрегат кластер kubernetes момент время каждый доменный сущность находиться свой состояние например  node group 1  нод создаваться  node group 2  машина запускать        обмен данные состояние доменный сущность происходить следующий образ    1 сервис виртуализация приходить ответ  node worker 1  создаваться  node worker 1  переходить состояние running        2  node worker 1  отправлять родительский сущность  node group 1  событие машина создаваться родительский сущность  node group 1  проверять workerы создавать значит ждать         3 сервис виртуализация приходить событие создание вм  worker 2         4  worker 2  переходить состояние running отправлять событие родительский сущность  node group 1          5 родительский сущность  node group 1  проверять workerы находиться статус running значит  node group 1  менять состояние running         6  node group 1  отправлять свой родительский сущность  cluster  событие свой состояние cluster проверять  node group  готовый случай утвердительный ответ также менять свой состояние running         обработка ошибка происходить похожий процесс     1 приходить ошибка получаться создавать виртуальный машина менять статус  worker node 1  сообщать родитель происходить ошибка         2 родитель  node group 1  решать делать случай пересоздавать один нод  удалять нод отправлять сообщение наверх свой родитель  cluster  сообщение ошибка  cluster  должный решать делать далеко        подытоживать каждый доменный агрегат состоять группа доменный сущность конечный автомат состояние переход они описывать поведение каждый сущность изменение состояние каждый доменный сущность вызывать событие вниз вверх древовидный структура доменный агрегат     такой архитектура делать доменный сущность независимый свой поведение логика состояние действие проверка просачиваться вниз вверх дерево связанный рамка один доменный агрегат     пара слово использовать воплощение логика fsm взять статический реализация switch наш взгляд портить логика читабельность код использовать компилировать язык наш случай  go это давать дополнительный возможность проверка компиляция    состояние домен храниться персистентный база данные postgresql    взаимодействие сервис происходить модель cqrs command and query responsibility segregation разделять запрос синхронный queries read operations асинхронный commands cud operations первый выполняться протокол grpc команда  apache kafka      собственно распределять транзакция   высоко разбирать схема ddd конечный автомат работать состояние один доменный сущность один доменный агрегат микросервис посмотреть принцип работать рамка распределенный процесс охватывать несколько доменный агрегат они быть передаваться данный состояние    пример взять сервис управление кластер kubernetes сетевой сервис развертывание кластер kubernetes нужно создавать балансировщик нагрузка домен который отвечать сеть отправляться команда создавать lb такой название параметр provisioning service описывать свой конечный автомат он проходить создавать lb сообщать готовый этот сообщение принимать первый сервис переходить следующий состояние        смотреть это укрупненно получаться следующий картина        этот цепочка операция два сервис называться  распределенный транзакция  атомарность обеспечиваться любой момент время состояние каждый компонент транзакция каждый доменный сущность каждый доменный агрегат который входить транзакция     этот состояние храниться база данные соответствующий сервис чтото происходить план четкий сценарий описывать вид конечный автомат        разворачивание кластер kubernetes иметь дело целый цепочка такой транзакция например cluster service обращаться vm service очередь обращаться virtualisation platform запускать вм cluster service множество шаг выглядеть шаг знать vm service обращаться virtualisation platform        получаться вкладывать друг друг транзакция транзакция уровень cluster service включать низкоуровневый транзакция  vm service         итог получаться cluster service оркестрировать vm service vm service управлять virtualization platform         распределенный транзакция cluster service часть высокоуровневый транзакция         допускать создавать какойнибудь saasсервис который нужный кластер kubernetes     спрятать транзакция создание кластер матрешка жить другой транзакция причем высокоуровневый транзакция это выглядеть шаг запрашивать создание кластер         сага  предлагать решать вышеописанный задачка соб",
    "tags": [
        "транзакции",
        "саги",
        "микросервисы",
        "kubernetes",
        "домен"
    ]
}