{
    "article_id": "727552",
    "article_name": "Обеспечение безопасности в Apache Kafka",
    "content": "предыдущий статья  рассматривать архитектура решение apache kafka развертывать продукт разбираться отправка получение сообщение далеко погружаться тема использование данный решение интернет множество различный публикация пример использование kafka различный задача различный среда разработка поэтому данный статья целиком полностью посвящать важный тема обеспечение безопасность apache kafka свой предназначение kafka являться посредник различный система обмен сообщение помнить топика раздел проблема заключаться стандартный настройка kafka умолчание любой пользователь приложение писать любой сообщение любой топик также считывать данные любой топик естественно скольконибудь промышленный применение система подход недопустимый например случай несколько приложение использовать кластер kafka кластер использоваться качество облачный сервис сторонний приложение естественно kafka начинать обрабатываться конфиденциальный информация статья быть говорить встроенный kafka механизм защита быть касаться использование какихлибо налагать средство начинать версия 0900 продукт добавлять ряд функция который позволять повышать уровень защищенность kafka основной функция аутентификация подключение брокер клиент продьюсер консьюмер другой брокер приложение использовать ssl sasl kerberos аутентификация подключение брокер zookeeper шифрование данные передаваемый брокер клиент брокер брокер инструмент использование ssl обращать внимание включение ssl происходить снижение производительность величина который зависеть тип процессор реализация jvm авторизация операция чтениязапись выполнять клиент авторизация подключать поддерживаться интеграция внешний служба авторизация далее статья быть уделять слишком внимание матчасть описание работа тот иной широко распространять механизм защита такой ssl необходимость читатель находить необходимый информация интернет вместо уделять внимание непосредственно настройка защитный механизм kafka работать ssl ssl secure sockets layer представлять себя криптографический протокол безопасный связь kafka умолчание протокол отключать мочь любой момент включать ssl  работа ssl большинство другой система kafka начинаться создание сертификат устанавливать zookeeper kafka предварительно развертывать java состав который входить утилита keytool далее сгенерировать ключ временный хранилище ключ поздно экспортировать подписывать центр сертификация  keytool keystore serverkeystorejks alias localhost validity validity genkey мой пример сгенерировать ключ обращать внимание необходимость обязательный указание пароль параметр keystroke указывать какой файл хранить ключ validity это период действие сертификат день помнить корректный работа сертификат необходимый правильный настройка dns позволять корректно разрешать имя узел  приводить выше действие генерация ключ необходимо проделывать узел кластер  иметься сертификат являться самоподписывать злоумышленник желание сгенерировать свой сертификат обменяться открытый ключ пара легальный участник читать модифицировать весь трафик атака man in the middle поэтому важно предотвращать подделка сертификат подписывать каждый машина кластер решение задача необходимый центр сертификация ca который отвечать подписание сертификат центр сертификация подписывать сертификат криптография гарантировать подписывать сертификат сложно подделывать вычислительный точка зрение такой образ пока центр сертификация являться подлинный заслуживать доверие орган клиент мочь уверенный подключаться подлинный машина далее сгенерировать пара открытый закрывать ключ сертификат который собственно быть подписывать другой сертификат затем добавлять сгенерировать сертификат цс доверенный хранилище клиент клиент мочь доверять openssl req new x509 keyout cakey out cacert days 365 keytool keystore servertruststorejks alias caroot import file cacert наш хранилище доверие храниться сертификат клиент который должный доверять импорт сертификат свой доверенный хранилище также означать доверие весь сертификат подписывать этот сертификат атрибут называться цепочка доверие особенно полезный развертывание ssl большой кластер kafka мочь подписывать сертификат кластер помощь один центр сертификация компьютер быть использовать один хранилище доверие который доверять центр сертификация  мы необходимо подписывать наш сгенерировать сертификат сертификат цс сначала экспортировать сертификат хранилище затем подписывать сертификат цс импортировать оба сертификат свой хранилище keytool keystore serverkeystorejks alias caroot import file cacert keytool keystore serverkeystorejks alias localhost import file certsigned настройка брокер настройка брокер начинаться указание список порт ка который быть принимать соединение использовать соединение ssl сторона брокер необходимо выполнять следующий настройка sslkeystorelocationvarprivatesslkafkaserverkeystorejks  sslkeystorepassword  sslkeypassword  ssltruststorelocationvarprivatesslkafkaservertruststorejks  ssltruststorepassword проверка корректность работа выполнять настройка мочь выполнять следующий команда openssl s_client debug connect localhost9093 tls1 настраивать sasl sasl simple authentication and security layer  это платформа аутентификация защита данный интернетпротокол направлять отделять интернетпротокол конкретный механизм аутентификация рассматривать принцип работа sasl подключение сервер отправлять запрос клиент список возможный механизм аутентификация клиент отправлять ответ основа информация запрос запрос ответ представлять себя массив байт произвольный длина следовательно мочь содержать любой данные относиться конкретный механизм  обмен данные продолжаться течение несколько итерация заканчиваться сервер выдавать никакой вызов главное необходимо понимать работа sasl это давать механизм аутентификация предоставлять структура обмен данные вызов ответ он упоминаться сам данные обмениваться данные задача должный выполнять приложение использовать sasl вернуться настройка kafka настройка аутентификация мы потребоваться протокол kerberos мочь использовать аутентификация active directory ваш сеть ad необходимо развертывать сторонний сервер kerberos иначе необходимо создавать запись принципал ваш каталог ad система каждый брокер kafka ваш кластер  каталог конфигурация брокер создавать файл  kafka_server_jaasconf  следующий содержание затем мы необходимо указывать kafka путь конфигурационный файл   djavasecuritykrb5confetckafkakrb5conf  djavasecurityauthloginconfigetckafkakafka_server_jaasconf добавлять порт который система должный слушать listenerssasl_plaintexthostnameport использоваться sasl_ssl также необходимо настраивать ssl настраивать порт sasl хотеть брокер kafka аутентифицировать друг друг помощь sasl убеждаться устанавливать протокол sasl взаимодействие брокер securityinterbrokerprotocolsasl_plaintext также должный настраивать имя служба serverproperties который должно соответствовать основной имя брокер kafka приводить выше пример принципал являться  kafkakafka1hostnamecomexamplecom  saslkerberosservicenamekafka подключать клиент клиент наш кластер kafka быть проходить аутентификация кластер помощь свой собственный аккаунт обычно имя пользователь запускать клиент каждый клиент мы потребоваться создавать файл jaas аналогично то это делать высокий низко приводить пример конфигурация клиент использовать  keytab  kafkaclient    comsunsecurityauthmodulekrb5loginmodule required  usekeytabtrue  storekeytrue  keytabetcsecuritykeytabskafka_clientkeytab  principalkafkaclient1examplecom      раздел kafka client описывать клиент такой продьюсер консьюмер мочь подключаться kafka broker далее передавать система путь конфигурационный файл также это делать высокий   djavasecuritykrb5confetckafkakrb5conf  djavasecurityauthloginconfigetckafkakafka_client_jaasconf завершение мы необходимо настраивать наш продьюсер консьюмер следующий свойство producerproperties consumerproperties securityprotocolsasl_plaintext or sasl_ssl  saslkerberosservicenamekafka acl заключение тема безопасность kafka рассматривать возможность работа список досту",
    "tags": [
        "kafka",
        "security"
    ]
}