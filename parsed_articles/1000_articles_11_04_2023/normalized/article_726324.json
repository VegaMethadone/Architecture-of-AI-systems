{
    "article_id": "726324",
    "article_name": "Алгоритм Diffie-Hellman: Ключ к безопасному общению",
    "content": "все привет   давно хотеть опубликовывать статья никак находить повод хороший тема однако давно вести  телегр канал backend разработка  который публиковать разный информация backend рассказывать технология делиться полезный контент сегодня хотеть рассказывать  волшебный  алгоритм который стоить безопасный общение интернет частность наш любимый мессенджер   telegram  алгоритм называться алгоритм диффихеллман история начинаться далекий 1976 год история заканчивать  это работать алгоритм диффихеллман использоваться два сторона мочь создавать общий  секретный ключ  называть  транспортный ключ  который затем использоваться  шифрование   дешифрование  сообщение самый главное  ключ создаваться прямой обмен сторона принцип работа алгоритм основывать принцип  сложность вычисление дискретный логарифм  звучать страшно быть существовать математический функция который легко вычислять один сторона очень сложно обратно например обратный операция сложение это вычитание умножение это деление операция остаток деление обратный операция нетпоэтома алгоритм диффихеллман использоваться такой функция пример создание секретный ключ допускать алиса боб хотеть создавать общий секретный ключ использовать алгоритм диффихеллман выполнять следующий шаг алиса боб выбирать общий параметр  основание   g  допускать 5  большой простой число   p  допускать 23  алиса генерировать свой секретный ключ  a  допускать 6 вычислять свой публичный ключ a a  ga mod p  56 mod 23  15625 mod 23  8  боб генерировать свой секретный ключ  b  допускать 9 вычислять свой публичный ключ b b  gb mod p  59 mod 23  1953125 mod 23  11  алиса боб обмениваться публичный ключ алиса отправлять свой ключ a 8 боб боб отправлять свой ключ b 11 алиса  алиса вычислять общий секретный ключ s s  ba mod p  116 mod 23  1771561 mod 23  9 боб вычислять общий секретный ключ s  s  ab mod p  89 mod 23  134217728 mod 23  9 алиса боб иметь общий секретный ключ s который равный 9 ключ использовать дальнейший зашифрование расшифрование сообщение они безопасность общение сторона иметь секретный ключ мочь использовать  шифрование   дешифрование  сообщение протяжение процесс прямой обмен секретный данные происходить делать метод безопасный общение применение diffiehellman алгоритм алгоритм diffiehellman использоваться множество криптографический протокол стандарт такой 1 tlsssl протокол передача данные обеспечивать защищать соединение клиент сервер 2 ipsec протокол безопасность защита данные передаваемый сеть число vpnсоединениях 3 ssh протокол безопасный оболочка использовать безопасный удаленный доступ сервер обмен данные они реализация golang непосредственно рассказывать это реализовать весь код представлять репозиторий  httpsgithubcomvseriousvdiffiehellman  начинать быть использовать goethereum генерация приватный публичный ключ пакет написать ранее посмотреть репозиторий  httpsgithubcomvseriousvblockchainkeys  просто импортировать библиотека вызывать функция  newblockchain  который нужно передавать тип блокчейн  blockchainkeysethereum  получать структура который мочь вызывать метод generatekeypair получать приватный публичный ключ  пример функция который возвращать пара приватный публичный ключ  func getkeys string string error  bc err  blockchainkeysnewblockchainblockchainkeysethereum if err  nil  fmtprintlnerror err return   err   privatekey publickey _ err  bcgeneratekeypair if err  nil  fmtprintlnerror err return   err   return privatekey publickey nil  сгенерировать пара ключ алиса боб использовать наш функция  generation alisa pair privatealisa publicalisa err  getkeys if err  nil  logfatalerr    generation bob pair privatebob publicbob err  getkeys if err  nil  logfatalerr  получать транспортный ключ написать функция который принимать вход публичный ключ собеседник наш приватный ключ func gettransportkeypublickey privatekey string string error       ключ ethereum иметь прфик 0x обрезать privatekeyahex  privatekey2      приводить приватный ключ bigint privatekeyabigint success  newbigintsetstringprivatekeyahex 16 if success  return  errorsnewinvalid private key format        обрезать префикс publickeybhex  publickey2      приводить байтовый формат publickeybbytes err  hexdecodestringpublickeybhex if err  nil  return  errorsnewinvalid public key format       далее мы нужно конвертировать байтовый формат secp256k1 publickeyb err  cryptounmarshalpubkeypublickeybbytes if err  nil  return  errorsnewunmarshalling public key failed       магический функция который возвращать мы x y координата элиптический кривая согласно спецификация secp256k1  sharedsecretx _  secp256k1s256scalarmultpublickeybx publickeyby privatekeyabigintbytes if sharedsecretx  nil  return  errorsnewscalar multiplication failed        заветный функция возвращать мы транспортный ключ transportkey  cryptokeccak256sharedsecretxbytes return hexencodetostringtransportkey nil  hidden text дико извиняться приходиться очень поверхностно описывать процедура работа элиптический кривой устраивать алгоритм криптография блокчейн посколько иначе этот статья превращаться длиннопост однако будущее попробовать написать статья спецификация secp256k1 зашифровывать сообщение написать простой функция использование стандартный библиотека  crypto go  httpspkggodevcryptoaes func encryptmessage key byte byte error   create a new aes block cipher block err  aesnewcipherkey32 if err  nil  return nil err    create a new gcm encryption mode aead err  ciphernewgcmblock if err  nil  return nil err    create a random nonce nonce  makebyte aeadnoncesize if _ err  randreadnonce err  nil  return nil err    encrypt the message using a nonce and propagate the tag ciphertext  aeadsealnil nonce message nil ciphertext  appendnonce ciphertext return ciphertext nil   func decryptciphertext key byte string error   create a new aes block cipher block err  aesnewcipherkey32 if err  nil  return  err    create a new gcm encryption mode aead err  ciphernewgcmblock if err  nil  return  err    extract the nonce from the encrypted message noncesize  aeadnoncesize nonce ciphertext  ciphertextnoncesize ciphertextnoncesize   decode the message and check the tag plaintext err  aeadopennil nonce ciphertext nil if err  nil  return  nil   return stringplaintext nil  итого иметь алиса боб пара ключ мочь получать транспортный ключ алиса использовать приватный ключ публичный ключ боб воспользоваться наш функция  gettransportkeypublicbob privatealisa   get transportkey for alisa  alisa has publickeybob and privatekeyalisa transportkeyone err  transport_keygettransportkeypublicbob privatealisa if err  nil  logfatalerr  logprintlntransportkeyone transportkeyone далее зашифровывать наш сообщение получать транспортный ключ  alisas encryption message for bob message  bytehello bob im alisa encryptionmessage err  encryptionencryptmessage bytetransportkeyone if err  nil  logfatalerr  боб расшифровывать данный сообщение требоваться получать транспортный ключ использовать свой приватный ключ публичный ключ алиса использовать наш функция  gettransportkeypublicalisa privatebob  get transportkey for bob  bob has publickeyalisa and privatekeybob transportkeytwo err  transport_keygettransportkeypublicalisa privatebob if err  nil  logfatalerr  logprintlntransportkeytwo transportkeytwo далее расшифровывать сообщение использовать наш транспортный ключ боб  bob decrypt message from alisa messageresult err  encryptiondecryptencryptionmessage bytetransportkeytwo if err  nil  logfatalerr  итог вывести сообщение лог убеждаться работать результат вывод функция полный код посмотреть репозиторий директория пример работа  все спасибо внимание",
    "tags": [
        "golang",
        "ethereum",
        "diffie hellman",
        "example",
        "cryptography"
    ]
}