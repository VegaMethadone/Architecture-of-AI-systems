{
    "article_id": "727696",
    "article_name": "Основы Websocket. Использование с react, redux, saga и RTK Query",
    "content": "websocket websocket  протокол связь поверхtcpсоединения предназначать обмен сообщение браузер вебсервер использовать постоянный соединение разница http websocket http  это протокол клиентсерверный взаимодействие который использоваться передача данные клиент сервер websocket  это новый протокол который позволять устанавливать постоянный соединение клиент сервер обеспечивать эффективный передача данные websocket обеспечивать низкий задержка быстрый обмен данные http также позволять сервер отправлять сообщение клиентский сторона необходимость запрос клиент несмотря это http являться распространенный протокол использоваться большинство задача который требовать передача данные базовый использование фронт использование websocket фронт нужно создавать объект websocket указывать адрес сервер websocket который хотеть подключаться затем мочь добавлять обработчик событие onopen onmessage onclose onerror управление соединение обмен данные пример использование const socket  new websocketwslocalhost8080  socketonopen  function    consolelogсоединение устанавливать   socketonmessage  functionevent    consolelogполучено сообщение eventdata   socketonclose  functionevent    consolelogсоединение закрывать   socketonerror  functionerror    consolelogошибка errormessage    базовый использование сервер nodejs использование websocket сервер помощь nodejs нужно устанавливать пакет ws создавать экземпляр websocketсервера указывать порт который слушать входить соединение затем мочь добавлять обработчик событие onconnection onmessage onclose onerror управление соединение обмен данные пример использование const websocket  requirews  const wss  new websocketserver port 8080   wssonconnection function connectionws    consolelogсоединение устанавливать    wsonmessage function incomingmessage      consolelogполучено сообщение message       wsonclose function close      consolelogсоединение закрывать       какой библиотека фронт использоваться вместо нативный websocket фронт часто использоваться библиотека  socketio  sockjs вместо нативный websocket предоставлять дополнительный возможность такой автоматический переподключение поддержка старый браузер механизм безопасность делать удобный использование реальный проект const socket  iohttplocalhost8080  socketonconnect function    consolelogсоединение устанавливать   socketonmessage functiondata    consolelogполучено сообщение data   socketondisconnect function    consolelogсоединение закрывать   socketonerror functionerror    consolelogошибка error    базовый пример использование socketio  react проект import react  usestate useeffect  from react import io from socketioclient  const socket  iohttplocalhost8080  function app    const messages setmessages  usestate    useeffect       socketonmessage data         setmessagesprevmessages  prevmessages data             const handlesubmit  event       eventpreventdefault     const message  eventtargetelementsmessagevalue     socketemitmessage message     eventtargetelementsmessagevalue         return      div       ul         messagesmapmessage index             li keyindexmessageli                ul       form onsubmithandlesubmit         input typetext namemessage          buttonотправитьbutton       form     div      export default app   пример использовать библиотека  socketio  установление соединение сервер websocket отправка получение сообщение использовать хук  usestate  отслеживание список сообщение хук  useeffect  подписка событие  message  добавление новый сообщение список также использовать  socketemit  отправка сообщение сервер обработчик событие  onsubmit  обработка отправка сообщение форма базовый пример использование socketio  react проект redux использование  socketio   redux  необходимо устанавливать пакет  socketioclient   reduxthunk  затем необходимый создавать экземпляр  socketio  передавать функция  thunk  который обрабатывать соединение обмен данные пример использование import io from socketioclient  const socket  iohttplocalhost8080  export const connect_socket  connect_socket export const disconnect_socket  disconnect_socket export const receive_message  receive_message  export const connectsocket       type connect_socket   export const disconnectsocket       type disconnect_socket   export const receivemessage  message     type receive_message   payload message   export const sendmessage  message  dispatch     socketemitmessage message   export const startlistening    dispatch     dispatchconnectsocket    socketonconnect        consolelogсоединение устанавливать       socketonmessage data       dispatchreceivemessagedata       socketondisconnect        dispatchdisconnectsocket     consolelogсоединение закрывать       пример находиться файл  actionsjs  определять четыре действие  connect_socket   disconnect_socket   receive_message   sendmessage  функция  startlistening  являться функция  thunk  который обрабатывать соединение обмен данные подписываться событие  connect   message   disconnect  диспетчит соответствующий действие зависимость событие использование пример  redux  необходимо определять редьюсер который быть обрабатывать каждый действие кроме необходимо использовать хук  useselector   usedispatch  компонент связывать состояние действие  redux  import react  useeffect  from react import  useselector usedispatch  from reactredux import  startlistening sendmessage  from actions  function app    const dispatch  usedispatch   const messages  useselectorstate  statemessages    useeffect       dispatchstartlistening    dispatch    const handlesubmit  event       eventpreventdefault     const message  eventtargetelementsmessagevalue     dispatchsendmessagemessage     eventtargetelementsmessagevalue         return      div       ul         messagesmapmessage index             li keyindexmessageli                ul       form onsubmithandlesubmit         input typetext namemessage          buttonотправитьbutton       form     div      export default app   пример использовать хук  useselector  выбор список сообщение состояние  redux  хук  usedispatch  диспетчинг действие  redux  также использовать обработчик событие  onsubmit  отправка сообщение сервер базовый пример использование socketio  react проект redux saga использование  socketio   reduxsaga  необходимо устанавливать пакет  socketioclient   reduxsaga  затем необходимый создавать экземпляр  socketio  передавать функция генератор который обрабатывать соединение обмен данные пример использование import io from socketioclient import  put takeevery  from reduxsagaeffects  const socket  iohttplocalhost8080  export const connect_socket  connect_socket export const disconnect_socket  disconnect_socket export const receive_message  receive_message  export const connectsocket       type connect_socket   export const disconnectsocket       type disconnect_socket   export const receivemessage  message     type receive_message   payload message   export function sendmessageaction    yield socketemitmessage actionpayload   export function startlistening    yield putconnectsocket    socketonconnect        consolelogсоединение устанавливать       socketonmessage data       yield putreceivemessagedata       socketondisconnect        yield putdisconnectsocket     consolelogсоединение закрывать      export function watchsendmessage    yield takeeverysend_message sendmessage    пример находиться файл  actionsjs  определять четыре действие  connect_socket   disconnect_socket   receive_message   sendmessage  функция  startlistening  являться функция генератор который обрабатывать соединение обмен данные подписываться событие  connect   message   disconnect  диспетчит соответствующий действие зависимость событие функция  watchsendmessage  являться функция генератор который отслеживать отправка сообщение вызывать функция генератор  sendmessage  использование пример  reduxsaga  необходимо определять редьюсер который быть обрабатывать каждый действие кроме необходимо использовать хук  useselector   usedispatch  компонент связывать",
    "tags": [
        "socket.io",
        "websocket",
        "react.js",
        "redux",
        "redux saga",
        "rtk query",
        "redux thunk"
    ]
}