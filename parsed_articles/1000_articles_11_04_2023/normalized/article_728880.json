{
    "article_id": "728880",
    "article_name": "«Чистый» код, ужасная производительность",
    "content": "самый часто повторять совет программист особенно начинать  это рекомендация писать чистый код сопровождаться длинный список правило сообщать нужно делать код чистый    самый дело большой доля этот правило влиять среда исполнение код который писать подобный правило невозможно оценивать объективно это необязательно этап достаточно произвольный однако правило чистый код который делать особый упор  это правило который   измерять объективно поскольку  влиять  поведение код среда исполнение    посмотреть список правило чистый код вытаскивать правило который действительно влиять структура код получать следующий       отдавать предпочтение полиморфизм ifelse switch   код должный знать внутренний устройство объект который работать   функция должный маленький   каждый функция должный выполнять один задача   принцип dry  dont repeat yourself повторяться    правило достаточно четко формулировать должный создаваться конкретный фрагмент код чистый задавать вопрос создавать фрагмент код соответствующий этот правило каков производительность    создавать наиболее предпочтительный пример реализация чегото чистый код воспользоваться готовый пример код содержаться литература чистый код такой образ приходиться придумывать просто оценивать правило защитник чистый код помощь тот пример код который иллюстрировать правило    пример чистый код часто встречаться такой     code     listing 22       class shape_base  public     shape_base      virtual f32 area  0   class square  public shape_base  public     squaref32 sideinit  sidesideinit      virtual f32 area return sideside      private     f32 side   class rectangle  public shape_base  public     rectanglef32 widthinit f32 heightinit  widthwidthinit heightheightinit      virtual f32 area return widthheight      private     f32 width height   class triangle  public shape_base  public     trianglef32 baseinit f32 heightinit  basebaseinit heightheightinit      virtual f32 area return 05fbaseheight      private     f32 base height   class circle  public shape_base  public     circlef32 radiusinit  radiusradiusinit      virtual f32 area return pi32radiusradius      private     f32 radius   это базовый класс фигура который порождаться несколько конкретный фигура круг треугольник прямоугольник квадрат далее идти виртуальный функция вычислять площадь    требовать правило отдавать предпочтение полиморфизм каждый наш функция выполнять один задача компактный весь это отлично итак получать чистый иерархия класс каждый порождать класс знать вычислять площадь хранить данный требовать вычисление площадь    представлять использовать иерархия выполнение какойто задача допускать нахождение общий площадь передавать серия фигура ожидать увидеть чтото подобный          listing 23       f32 totalareavtblu32 shapecount shape_base shapes      f32 accum  00f     foru32 shapeindex  0 shapeindex  shapecount shapeindex              accum  shapesshapeindexarea               return accum   использовать итератор правило говориться мы нужно использовать итератор поэтому решать быть давать чистый код кредит доверие становиться добавлять никакой абстрагировать итератор который сбивать толк компилятор приводить снижение производительность    также мочь замечать этот цикл массив  указатель  это прямой последствие использование иерархия класс понятие иметь размер память занимать каждый этот фигура собираться добавлять вызов еще один виртуальный функция получение размер давать каждый фигура использовать обход какуюто процедура пропуск переменный мы понадобиться указатель выяснять начинаться каждый фигура    поскольку этот накопление существовать циклически порождать зависимость способный замедлять цикл порядок накопление произвольно меняться безопасность также написать разворачивать вручную версия          listing 24       f32 totalareavtbl4u32 shapecount shape_base shapes      f32 accum0  00f     f32 accum1  00f     f32 accum2  00f     f32 accum3  00f          u32 count  shapecount4     whilecount              accum0  shapes0area         accum1  shapes1area         accum2  shapes2area         accum3  shapes3area                  shapes  4               f32 result  accum0  accum1  accum2  accum3     return result   запускать два процедура простой тестовый обвязка приблизительно замеривать общий количество такт фигура требовать выполнение операция      обвязка хронометрировать код два способ первый  запускать код показывать происходить произвольный холодный состояние  данные должный l3 однако l2 l1 сбросить алгоритм предсказание ветвление еще практиковаться цикл    второй способ  многократный выполнение код посмотреть происходить кеш алгоритм предсказание ветвление работать наиболее удобный цикл образ стоять замечать оба способ являться хардкорный измерение поскольку видеть различие настолько большой мы нужно применять какието серьезный инструмент анализ    результат видеть два процедура особый разница выполнение вычисление площадь чистый код требоваться примерно 35 такт сильно везти этот количество снижаться 34    итак 35 такт  это значение который стоить ожидать получать следование все правило происходить нарушать  лишь  первый правило вместо применение полиморфизм просто использовать оператор switch лично думать оператор switch обязательно менее полиморфический vtable это просто два разный реализация один принцип однако правило чистый код приказывать отдавать предпочтение полиморфизм вместо оператор switch поэтому использовать терминология означать четко считать оператор switch полиморфический    низко записывать точно код однако вместо использование иерархия класс следовательно vtable среда исполнение написать помощь перечисление тип фигура который упрощать весь один структура          listing 25       enum shape_type  u32      shape_square     shape_rectangle     shape_triangle     shape_circle          shape_count   struct shape_union      shape_type type     f32 width     f32 height   f32 getareaswitchshape_union shape      f32 result  00f          switchshapetype              case shape_square result  shapewidthshapewidth break         case shape_rectangle result  shapewidthshapeheight break         case shape_triangle result  05fshapewidthshapeheight break         case shape_circle result  pi32shapewidthshapewidth break                  case shape_count  break               return result   это олдскульный способ который решаться подобный задача появление чистый код    обращать внимание поскольку специальный тип данные каждый вариант фигура тип иметь один значение например height просто использовать    вместо получение площадь вызов виртуальный функция пользователь структура получать ее функция оператор switch именно правило чистый код  рекомендовать делать  несмотря это замечать код несмотря гораздо больший краткость суть оставаться каждый case оператор switch  это простой код соответствующий виртуальный функция иерархия класс    касаться сам цикл суммирование увидеть практически идентичный чистый версия          listing 26       f32 totalareaswitchu32 shapecount shape_union shapes      f32 accum  00f          foru32 shapeindex  0 shapeindex  shapecount shapeindex              accum  getareaswitchshapesshapeindex           return accum   f32 totalareaswitch4u32 shapecount shape_union shapes      f32 accum0  00f     f32 accum1  00f     f32 accum2  00f     f32 accum3  00f          shapecount  4     whileshapecount              accum0  getareaswitchshapes0         accum1  getareaswitchshapes1         accum2  getareaswitchshapes2         accum3  getareaswitchshapes3                  shapes  4               f32 result  accum0  accum1  accum2  accum3     return result   единственный отличие заключаться вместо вызов функциичлен получение площадь вызывать обычный функция весь    однако сразу мочь увидеть немедленный выгода использование упрощенный структура сравнение применение иерархия класс фигура мочь просто находиться массив необходимость указатель косвенный действие сделать фигура один размер    плюс получать выигрыш еще компилятор  точно  видеть происхо",
    "tags": [
        "производительность",
        "чистый код",
        "совершенный код",
        "программирование"
    ]
}