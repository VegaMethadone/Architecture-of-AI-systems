{
    "article_id": "727760",
    "article_name": "Artery AT32F403A. Работа с CAN",
    "content": "добрый день продолжать небольшой курс ознакомление микроконтроллер мк artery at32f403a прошлый изучать знакомство таймер led работа usb сегодня познакомить работа мк can шина автомобиль она никуда пример сделать основа прошлое пример работа usb соединять пример работа usb can дополнительно мы понадобиться канхакер приложение работа например carbusanalyzer собирать стенд открывать keil наш прошлый проект usb at32f403a_407_firmware_library_v214projectat_start_f403aexamplesusb_devicevirtual_comportmdk_v5 параллельно открывать проект at32f403a_407_firmware_library_v214projectat_start_f403aexamplescancommunication_modemdk_v5 быть копировать нужный мы участок код копировать пример следующий функция целиком пример virtual_comport static void can_gpio_configvoid static void can_configurationvoid static void can_transmit_datavoid void can1_se_irqhandlervoid это тело main копировать два строчка main пример virtual_comport конец инициализация while1   can_gpio_config   can_configuration внимание функция void usbfs_l_can1_rx0_irqhandler void оба пример поэтому мы нужно тело функция скопировать соединять наш первый пример должно получаться void usbfs_l_can1_rx0_irqhandlervoid    can_rx_message_type rx_message_struct   ifcan_flag_getcan1can_rf0mn_flag  reset        can_message_receivecan1 can_rx_fifo0 rx_message_struct     ifrx_message_structstandard_id  0x400       at32_led_toggleled2     else       at32_led_toggleled3       usbd_irq_handlerusb_core_dev   usb_ready  1  все копирование заканчивать  частота работа вы выставлять прошлый пример работа usb  мы нужно настраивать код can интерфейс мы понадобиться приложение artery_can_bitrate_configuration_v100 оно архив первый статья сайт artery запускать нажимать кнопка calculate весь частота 120 мгц раскрываться список мочь посмотреть каки частота работать иной интерфейс копировать текст правый окно приложение     brief  set the baudrate of the can peripheral    param  can_x select the can peripheral            this parameter can be one of the following values            can1can2    param  baudrate_div baudrate division    param  rsaw_size resynchronization adjust width    param  bts1_size bit time segment 1    param  bts2_size bit time segment 2    note   baudrate calculate method is            baudrate  fpclkbaudrate_div 1  bts1_size  bts2_size      can_baudrate_type can_baudrate_struct    can_baudrate_default_para_initcan_baudrate_struct   can_baudrate_structbaudrate_div  30   can_baudrate_structrsaw_size  can_rsaw_1tq   can_baudrate_structbts1_size  can_bts1_6tq   can_baudrate_structbts2_size  can_bts2_1tq   can_baudrate_setcanx can_baudrate_struct находить наш пример функция can_configurationvoid похожий строка заменять комментарий мочь убирать вместо canx писать can1 функция can_gpio_configvoid проверять пина подключать can мой случай менять pb8 pb9 лайфхак нажимать f12 can_mode_communicate попадать описание настройка нажимать ttc_enable попадать описание настройка исследовать очень код пример везде описание думать перевод проблема код второй таймер 1 секунда писать строчка     can_transmit_data остальное все проверять нажимать f7 переходить режим debug устройство опознавать работать первый сидеть очень долго это быстро проблема один строчка функция void can_transmit_datavoid whilecan_transmit_status_getcan1 can_tx_mailbox_num_typetransmit_mailbox  can_tx_status_successful пока отправка пакет пройти удачно делать убирать проверка показывать работа мой устройство это приводить какимто последствие работа строчка выглядеть   can_transmit_status_getcan1 can_tx_mailbox_num_typetransmit_mailbox запускать снова ура все запуститься терминал каждый секунда идти серийный номер мк carbusanalyzer обращать внимание id полезный байт прописывать функция void can_transmit_datavoid давать сделать каншин посылаться серийный номер мк вводить новый переменная  uint8_t transmit_mailbox изменять наш функция отправка данные следующий код добавлять универсальность любой место ее вызывать любой данные отправка void can_transmit_datacan_tx_message_type tx_message_struct      tx_message_structextended_id  0     tx_message_structid_type  can_id_standard     tx_message_structframe_type  can_tft_data     tx_message_structdlc  8     transmit_mailbox  can_message_transmitcan1 tx_message_struct     can_transmit_status_getcan1 can_tx_mailbox_num_typetransmit_mailbox  изменять немного тело функция второй таймер 1 секунда     iftmr_flag_gettmr2 tmr_ovf_flag  reset          cortex_id  uint32_t 0x1ffff7e8         cortex_id_2  uint32_t 0x1ffff7ec         cortex_id_3  uint32_t 0x1ffff7f0          memcpybuttontx_buffer_usb2 uint32_tcortex_id_3 4         memcpybuttontx_buffer_usb6 uint32_tcortex_id_2 4         usb_vcp_send_datausb_core_dev buttontx_buffer_usb 0x000a          tx_message_struct_2standard_id  0x2f2   id         memcpytx_message_struct_2data buttontx_buffer_usb2 8  копировать серийный номер         can_transmit_datatx_message_struct_2  отправлять           add user code          at32_led_toggleled3         tmr_flag_cleartmr2 tmr_ovf_flag      наш результат частота немного чтото хотеться ровно 1000 мс ход разбираться получаться вопрос интересный быть разбираться итак can шина отправлять научаться давать сделать отправка can шина терминал помнить данный терминал перехватываться функция work_with_mmc туда заглядывать заодно выделять управляющий посылка нулевой байт aa сигнал каншин нулевой байт ff проверка crc добавлять немного код функция work_with_mmc void work_with_mmcvoid      uint8_t i2     can_tx_message_type tx_message_struct_2    memcpyreceivedusbdata usb_buffer data_len  input data     if data_len  13          if receivedusbdata0  0xaa              usb_crc  0             for i2  0 i2  12 i2                  usb_crc  usb_crc  receivedusbdatai2                           if 0xffusb_crc  receivedusbdata12                  memcpybuttontx_buffer_usb0 uint8_treceivedusbdata3 10                 usb_vcp_send_datausb_core_dev buttontx_buffer_usb 0x000a                               if receivedusbdata0  0xff              tx_message_struct_2standard_id  receivedusbdata28  receivedusbdata1  выделять id пакет             memcpytx_message_struct_2data receivedusbdata4 8  копировать полезный 8 байт             can_transmit_datatx_message_struct_2  отправлять                вроде получаться согласный оставаться мы посмотреть получать данные can шина отправлять терминал usb данные can приходить функция usbfs_l_can1_rx0_irqhandlervoid поменять немного код функция void usbfs_l_can1_rx0_irqhandlervoid      can_rx_message_type rx_message_struct uint8_t cdc_tx_buffer10  0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00      ifcan_flag_getcan1can_rf0mn_flag  reset          can_message_receivecan1 can_rx_fifo0 rx_message_struct              memcpycdc_tx_buffer0 rx_message_structstandard_id 2         memcpycdc_tx_buffer2 rx_message_structdata 8         usb_vcp_send_datausb_core_dev cdc_tx_buffer 0x000a           usbd_irq_handlerusb_core_dev     usb_ready  1  все смотреть результат помоему неплохо получаться пример работа can заканчивать  небольшой поправка питание плата программатор хватать работа can крайний мера поэтому необходимо подключать питание usb последний статья рассказывать состояние порт вводавывод чтото еще интересный полный код пример include at32f403a_407_boardh include at32f403a_407_clockh include usbd_coreh include cdc_classh include cdc_desch include usbd_inth include stringh   addtogroup at32f403a_periph_examples          addtogroup 403a_usb_device_vcp_loopback usb_device_vcp_loopback         uint8_t transmit_mailbox  uint8_t usb_crc  0 uint8_t receivedusbdata13  0  uint16_t data_len uint32_t timeout uint8_t send_zero_packet  0 uint32_t cortex_id cortex_id_2 cortex_id_3 uint8_t buttontx_buffer_usb10  0x0a 0xbc 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00  crm_clocks_freq_type crm_clocks_freq_struct  0 usbd_core_type usb_core_dev uint8_t usb_buffer256 uint8_t usb_ready  0  usart global struct define  extern linecoding_type linecoding void usb_u",
    "tags": [
        "artery",
        "at32f403a",
        "keil"
    ]
}