{
    "article_id": "727192",
    "article_name": "Chaos Engineering: принципы, процессы и примеры",
    "content": "предсказывать системный бой становиться все сложный предотвращать остановка работа крупный малый компания обращаться chaos engineering качество решение chaos engineering позволять прогнозировать выявлять потенциальный сбой намеренно вносить неисправность система такой образ находить устранять сбой еще превращаться простой chaos engineering  расти тенденция devops itкоманд такой компания netflix amazon использовать принцип разработка свой продукт новичок chaos engineering приходить верный адрес сегодня подробно познакомить принцип работа показывать начинать работа kubernetes узнавать такой chaos engineering инструмент chaos engineering принцип процесс chaos engineering пример chaos engineering приложение kubernetes что нужно учиться далеко такой chaos engineering chaos engineering  это дисциплина основывать проведение опыт система помощь chaos engineering намеренно пытаться вывести наш система строй определенный нагрузка определять потенциальный сбой находить слабый место повышать отказоустойчивость chaos engineering отличаться тестирование программный обеспечение внедрение ошибка нужный выполнение всевозможный требование предсказание непредвиденный ситуация включать скачки трафик условие гонка многий другой время использование chaos engineering пытаться выяснивать весь система реагировать отказ отдельный компонент например chaos engineering помогать отвечать вопрос функциональность происходить сервис какойто причина становиться недоступный какой результат сбой приложение получать слишком трафик оно недоступный сталкиваться каскадный ошибка изза единый точка отказ приложение выходить строй происходить наш приложение выходить строй происходить возникать неполадка сеть предыстория  chaos engineeringбыл разрабатывать netflix 2008году потоковый сервис поподпискебыть переводить вобщедоступный облако инженер netflix отмечать чтоять нужный новый способ тестирование система наотказоустойчивость поэтому 2011году придумывать chaos monkey инструмент дляпроверка устойчивость облачный система путем создание сбой винфраструктура бизнессистема тот пора chaos engineering получать развитие такой компания google facebook amazon microsoft внедрять аналогичный модель тестирование преимущество chaos engineering   chaos engineering предлагать преимущество который недоступный другой форма тестирование программный обеспечение тестирование сбой тест сбой мочь проверять один условие двоичный структура это позволять тестировать система условие беспрецедентный неожиданный нагрузка сторона хаосинжиниринг объяснять реальный сбой проблема помощь решать текущий проблема получать новый представление приложение будущий улучшение эксперимент хаос уменьшать количество отказ отключение одновременно улучшать сам понимание устройство система chaos engineering улучшать доступность надежность сервис поэтому клиент мало страдать простой также помогать предотвращать потеря доход снижать затрата обслуживание уровень бизнес инструмент chaos engineering chaos engineering  это сегмент рынок который устаиваться развитый менее существовать ряд инструмент который мочь выбирать самый известный инструмент chaos engineering  это simian army разрабатывать netflix simian army подходить облачный сервис aws генерировать сбой обнаруживать отклонение норма подобный заниматься chaos monkey netflix  это инструмент устойчивость случайный сбой powerfulseal  это мощный инструмент тестирование кластер kubernetes litmus использовать stateful рабочий нагрузка kubernetes pumba использоваться docker тестирование хаос эмуляция сеть gremlin предлагать платформа chaos engineering который поддерживать тестирование кластер kubernetes chaos dingo использовать microsoft azure проксисервер chaos http proxy нужный внесение сбой httpзапросы принцип процесс chaos engineering мера год команда проводить эксперимент научаться наиболее эффективно применять подход chaos engineering свой система передовой практика становиться основной принцип chaos engineering давать рассматривать построить гипотеза steady state построение steady state выполнять потенциально опасный действие задержка сеть приложение узел любой другой компонент система создавать острый ситуация подтверждение гипотеза  steady state  верный смочь предполагать система находиться определенный состояние выполнять действие завершать такой проверка подтверждать состояние изменяться моделировать реальный событие применять chaos engineering основа реальный событие другой слово копировать тот событие который мочь происходить ваш система например это сбой приложение нарушение работа сеть отказ узел проводить эксперимент продакшень  проводить эксперимент хаос продакшень проводить эксперимент хаос окружение разработка интеграция мочь получать реальный картина вести промышленный система автоматизировать эксперимент запускать непрерывно автоматизировать эксперимент хаос выполняться непрерывно составной часть конвейер непрерывный поставка это означать каждый час каждый несколько час каждый день каждый неделя каждый наш система происходить какоето событие проводить эксперимент каждый развертывать новый версия минимизировать радиус поражение начинать эксперимент хаос начинать малый наращивать масштаб параллельно расти уверенность ваш система конец конец следовать проводить эксперимент весь система резюме главный принцип построить гипотеза стабильный состояние моделировать реальный событие проводить эксперимент продакшень автоматизировать эксперимент запускать непрерывно минимизировать радиус поражение процесс chaos engineering общий процесс chaos engineering выглядеть следующий образ определение гипотеза устойчивый состояние  нужно начинать представление пойти начинать выбор ошибка внедрение система спрогнозировать результат внедрять работать система подтверждение стабильный состояние моделирование некоторый реальный событие  выполнять тест использование реальный сценарий увидеть ваш система вести определенный стрессовый условие обстоятельство подтвердить стабильный состояние  мы нужно подтверждать какой изменение происходить поэтому повторный проверка давать мы представление поведение система сбор показатель наблюдение информационный панель  нужно измерять надежность доступность ваш система использовать ключевой показатель производительность который соотноситься клиентский опыт например хотеть измерять сбой соответствие наш гипотеза изучать такой фактор влияние задержка количество запрос секунда внесение изменение исправление проблема  проведение эксперимент должный понимать работать нужно изменять мочь определять приводить недоступность сервис точно знать нарушать работа система итак исправлять это попробовать новый эксперимент пример chaos engineering   разбирать теория реальный пример понимать chaos engineering быть использовать kubernetes сначала создавать кластер kubernetes затем развертывать наш приложение уничтожать далеко  показывать определять стабильный состояние примечание  новичок kubernetes рекомендовать проходить курс  kubernetes база  прежде продолжать изучение хаос создавать кластер kubernetes мы нужный кластер kubernetes уничтожение мочь выбирать minikube docker desktop aks eks gke ниже использовать docker desktop создание кластер хотеть узнавать создавать кластер помощь другой инструмент обращаться курс the devops toolkit kubernetes chaos engineering  source httpsgistgithubcomf753c0093a0893a1459da663949df618    create a cluster     open docker preferences select the kubernetes tab and select the enable kubernetes checkbox   open docker preferences select the resources  advanced tab set cpus to 4 and memory to 60 gib and press the apply  restart button    destroy the cluster     open docker troubleshoot and select the reset kubernetes cluster button   select quit docker desktop клонирование осмотр репозиторий   мы нужно развертывать демонстрационный приложение который подготовить низко собираться клонировать репозиторий  vfarcicgodemo8  создавать виктор фарчич viktor farcic git clone httpsgithubcomvfarcicgodemo8git далее заходить каталог склонировать репозиторий cd go",
    "tags": [
        "chaos engineering",
        "chaos monkey",
        "kubernetes",
        "it инфраструктура",
        "онлайн образование",
        "it инфраструктуры",
        "it карьера"
    ]
}