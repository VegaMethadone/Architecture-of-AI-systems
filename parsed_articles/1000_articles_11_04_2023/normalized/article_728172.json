{
    "article_id": "728172",
    "article_name": "Go, Allure и HTTP, или Как мило тестировать HTTP-сервисы на Go (часть 2)",
    "content": "все привет все звать сергей разработчик ozon проходить полгода  тот пора мочь находить носок  выход мой первый статья  тестирование httpсервисов go  год библиотека  cute  поэтому горе желание рассказывать нынче тестировать httpсервисы go статья речь пойти новый возможность cute построение multistepтестов рассматривать сделать тест состоять несколько шаг доставать данные один тесто перенести это все выглядеть allure загрузка файл построение multipartтесты популярный кейс  проверка ручка регистрация нужно убеждаться api принимать картинка информация пользователь один запрос рассматривать такой тестировать написание табличный тест рассматривать возможность создавать массив тест проверка параметризация allureотчётами другой фич готовый lets read it again базовый вещь создание e2eтестов go помощь  cute  такой работа allureтегами формирование запрос написание afterbefore обработчик создание асерт другой важный мелочь рассказываться предыдущий статья рекомендовать сначала изучать  она  расширять базовый знание область тестирование httpсервисов начинать начало начинать начало import  context nethttp testing time  githubcomozontechcute githubcomozontechcuteassertsjson   func testexamplet testingt  cutenewtestbuilder titletitle              задавать название тесто descriptiondescription  придумывать описание  добавлять разный тег лейбл который поддерживаться allure create         requestrepeat3  случай responsestatus  200 ok запрос отправлять еще requestbuilder  создавать httpзапрос            cutewithheaderskvxauth hello my friendcutewithurihttpsjsonplaceholdertypicodecomposts1comments cutewithmethodhttpmethodget  expectexecutetimeout10timesecond  указывать запрос должный выполняться десять секунда  expectstatushttpstatusok           ожидать ответ 200 ok assertbody                            задавать проверка json тело ответ определенный поле jsonequal0email hellomyfriendpuperbiz jsonpresent1name  executetestcontextbackground t  результат получать следующий отчет год изменяться все мочь находить информация воспроизведение запрос также замечать лог следующий информация  run   testexample     cutego131 test start title     testgo267 start make request     step_contextgo100 request curl x get d  h xauth hello my friend httpsjsonplaceholdertypicodecomposts1comments     step_contextgo100 response status 200 ok     testgo275 finish make request     commongo123 error on path 0email expect superpuperbiz but actual eliseogardnerbiz     cutego134 test finished title  fail testexample 013s рассматривать самый простой тест минимальный количество информация проверка какихлибо дополнение мы нужно тесто загружать какойто файл просто использовать multipart multipart парень давать загружать файл  версия 0110  добавлять конструктор создание  multipartзапросов предполагать  нужно протестировать ручка два форма один который принимать json  файл принцип это сделать  старинка  отправка файл import    nethttp   os   bytes   path   pathfilepath   mimemultipart   io   func main    filedir _  osgetwd   filename  filetxt   filepath  pathjoinfiledir filename    file _  osopenfilepath   defer fileclose    body  bytesbuffer   writer  multipartnewwriterbody   part _  writercreateformfilefile filepathbasefilename   iocopypart file   writerclose    r err  httpnewrequestpost httpexamplecom body   if err  nil      panicerr      rheaderaddcontenttype writerformdatacontenttype   client  httpclient   clientdor  это работать создавать несколько метод спрятать реализация еще обвязывать allure отчет другой вещь один словом тяжело сложность это сравниться поиск носок давать попробовать самый сделать помощь cute import  context testing  githubcomozontechcute   func testuploadfilet testingt  cutenewtestbuilder titleuploat file create requestbuilder cutewithurihttplocalhost7000v1banner cutewithmethodpost cutewithformkvbody bytename vasya  заполнять текстовый форма cutewithfileformkvimage cutefile                   заполнять форма файл path vasyathebestmypicturepng   expectstatushttpstatusok executetestcontextbackground t  выполняться запрос эквивалентный следующий curl x post       f bodyname vasya       f imagevasyathebestmypicturepng       httplocalhost7000v1banner проверять сервис вернуть 200 ok multistepтест написать тест состоять несколько запрос бывать ситуация тесто необходимо выполнять несколько запрос давать попробовать собирать тест  import  context fmt io nethttp testing time  githubcomozontechcute githubcomozontechcuteassertsjson    структура запрос удаление type deleterequest struct  email string jsonemail   func test_twostepst testingt  drequest  deleterequest  подготавливать структура запрос удаление  cutenewtestbuilder titleсоздание удаление комментарий tagscomments  подготавливать запрос создание createstepcreate comment posts1 requestbuilder  создавать httpзапрос который отправлять cutewithurihttpsjsonplaceholdertypicodecomposts1comments cutewithmethodhttpmethodget cutewithheaderskvsome_auth_token authvalue  expectexecutetimeout10timesecond expectstatushttpstatusok assertbody jsonequal0email eliseogardnerbiz  проверять ответ поле email  nexttest aftertestexecute funcresponse httpresponse errors error error  b err  ioreadallresponsebody if err  nil  return err   temp err  jsongetvaluefromjsonb 0email  получать email тело ответ if err  nil  return err   drequestemail  fmtsprinttemp  сохранять email  return nil    подготавливать запрос удаление createstepdelete comment requestbuilder cutewithurihttpsjsonplaceholdertypicodecomposts1comments cutewithmethodhttpmethoddelete cutewithmarshalbodydrequest cutewithheaderskvsome_auth_token fmtsprint11111  assertbody jsonpresent0email  executetestcontextbackground t  итог быть выполнять запрос  получать следующий отчет  факт взять код самый первый раздел добавлять  nexttest  написать еще запрос думать обращать внимание  aftertestexecute  который доставать тело ответ первый запрос поле использовать второй запрос также мочь использовать  aftertestexecutet  который отличаться лишь иметь  cutet  логирование информация например помощь мочь залогировать какойнибудь заголовок тело ответ func t cutet response httpresponse errors error error  tlogfrequest_info trace_id  v responseheadergetxtraceid  return nil  подробно аналог возможность блок прочитывать прошлый  статья  раздел шаг 2 помнить прошлое забывать будущее парень давать конструктор заглядывать  исходный код  библиотека обнаруживать структура  test  который позволять сделать весь самый делать ранее билдер заполнение структура это выглядеть следующий образ type test struct  httpclient httpclient  name string                  название тесто  allurestep allurestep       allureтеги middleware middleware       afterbefore request    request          запрос expect     expect           валидация  давать попробовать составлять тест func test_one_executet testingt  test  cutetest name test_1  название тесто request cuterequest  собирать запрос builders cuterequestbuilder cutewithurihttpsjsonplaceholdertypicodecomposts1comments cutewithmethodhttpmethodget   expect cuteexpect  добавлять валидация code 200 assertbody cuteassertbody jsonequal0email eliseogardnerbiz jsonpresent1name     testexecutecontextbackground t  итог выполнять http getзапрос далее убеждаться  response code  200 ока  тело ответ поле  email   name  отчет allure появляться все равно сокращать  какихлибо лейбл arraytableтесты парень давать конструктор тест прошлый раздел рассматривать возможность создание простой тесто особый привязка allure мы хотеться использовать подход добавление разный род лейбл тест тест давать попробовать это реализовать func test_arrayt testingt    tests  cutetest  name       create something  создавать первый тест request cuterequest builders cuterequestbuilder cutewithurihttpsjsonplaceholdertypicodecomposts1comments cutewithmethodhttpmethodpost   expect cuteexpect code 201    name       delete something   создавать второй тест request cuterequest builders cuterequestbuilder cutewithurihttpsjsonplaceholdertypicodecom",
    "tags": [
        "go",
        "тестирование",
        "automation testing",
        "qa",
        "qa automation",
        "open source",
        "тестирование веб приложений",
        "e2e",
        "e2e тесты",
        "http"
    ]
}