{
    "article_id": "727668",
    "article_name": "Начинаем работать с Terraform",
    "content": "terraform терять свой актуальность несмотря постоянный развитие облачный инфраструктура связанный инструмент поэтому начинать использовать инструмент поздно сделать это сразу погружение базовый основа именно тот хотеть применять terraform работа собственный нужда переводить статья автор майкл кинг michael king рассматривать основа terraform рассказывать инструмент необходимый начало работа продемонстрировать настройка рабочий среда написание первый код развертывание инфраструктура выбирать именно terraform это инструмент открытый исходный код который активный комьюнити существовать множество ресурс решение проблема который мочь сталкиваться путь кроме terraform привязывать конкретный платформа позволять использовать управление инфраструктура несколько облачный провайдер начинать работать terraform назад возвращаться захотеть красота инструмент  доступность уровень помощь несколько строка код смочь определять инфраструктура terraform обрабатывать остальное provider aws   region  useast1   resource aws_instance example   ami            ami0c55b159cbfafe1f0  instance_type  t2micro   tags      name  exampleinstance    ресурс свойство определяться помощь ясный лаконичный синтаксис давать взглядывать код который использовать создание инстанс ec2 начало определять облачный провайдер который хотеть работать данный случай  aws затем создавать блок resource который определять свойство наш инстанс такой ami тип добавлять блок tags задавать имя наш инстанс просто правда дальнейший начинать создавать сложный настройка который позволять управлять несколько ресурс зависимость переменный рассматривать основа terraform давать переходить деталь развертывание код 1 прежде неплохо переходить каталог сохранять код terraform инициализировать рабочий каталог запускать команда terraform init загружать устанавливать необходимый плагин модуль ваш код 2 затем нужно запланировать изменение это сделать помощь команда terraform plan предварительно показывать изменение который terraform вносить ваш инфраструктура критически важный шаг который гарантировать знать обо вносить изменение быть задеплоить 3 готовый применять изменение воспользоваться команда terraform apply создавать ресурс инфраструктура соответствие написать вы код terraform запрашивать подтверждение прежде вносить изменение подтвердить изменение terraform развертывать код ваш инфраструктура это помощь этот шаг смочь легко развертывать свой код terraform управлять ваш облачный инфраструктура эффективно давать поговорить переменный локальный значение terraform это невероятно полезный инструмент который помогать писать гибкий переиспользуемый код переменный позволять параметризовать код terraform мочь легко видоизменять необходимость редактировать вручную переменный определяться отдельный файл затем использоваться код помощь специальный синтаксис пример variable region   type     string  default  uswest2   resource aws_instance example   ami            ami0c55b159cbfafe1f0  instance_type  t2micro  region         varregion  пример определять переменный region дефолтное значение uswest2 затем обращаться переменная атрибут region наш ресурс aws_instance использовать синтаксис var локальный значение позволять определять значение который повторно использовать ваш код это полезный необходимо вычислять значение основа другой переменный давать описательный имя сложный значение пример variable environment   type     string  default  prod   locals   instance_name  varenvironmentwebserver   resource aws_instance example   ami            ami0c55b159cbfafe1f0  instance_type  t2micro  tags      name  localinstance_name    пример определять локальный значение instance_name который объединять значение переменная environment описательный строка затем обращаться этот локальный значение тег name наш ресурс aws_instance видеть переменный локальный значение мочь сделать ваш код гибкий переиспользуемый легко читать настоятельно рекомендовать использовать свой проект terraform знать развертывать код terraform использовать локальный значение переменный приходить время начинать использовать общий функция который сделать ваш жизнь просто функция terraform помогать управлять инфраструктура эффективно сэкономить время избавлять головной боль один наиболее часто использовать terraform являться функция count  позволять создавать несколько инстанс один ресурс разный имя параметр необходимость писать код снова снова предполагать хотеть создавать инстанс ec2 вместо раз писать код использовать count сделать это resource aws_instance example   count          3  ami            ami0c55b159cbfafe1f0  instance_type  t2micro  код создавать инстанс ec2 одинаковый ami тип инстанс разный имя example0 example1 example2 просто простой другой полезный функция  for_each  работать аналогично count вместо создание несколько инстанс один ресурс позволять создавать несколько ресурс разный имя параметр предполагать хотеть создавать несколько инстанс ec2 разный ami тип инстанс variable instances   type  mapobject    ami            string    instance_type  string    default      webserver1        ami            ami0c55b159cbfafe1f0      instance_type  t2micro        webserver2        ami            ami0c55b159cbfafe1f0      instance_type  t2small         resource aws_instance example   for_each  varinstances  ami            eachvalueami  instance_type  eachvalueinstance_type  tags      name  eachkey    код создавать инстанс ec2 ami ami0c55b159cbfafe1f0 тип инстанс t2micro ami ami0c55b159cbfafe1f0 тип инстанс t2small инстанс быть называть webserver1 webserver2 функция count for_each  лишь пара пример множество полезный функция который использовать terraform эффективный управление инфраструктура один важный вещь который хотеть поделиться файл состояние  основа весь настройка terraform содержать информация который terraform должный знать ваш инфраструктура отслеживать создавать нужно создавать это json который отслеживать текущий состояние инфраструктура terraform использовать файл планирование внесение изменение ваш инфраструктура хотеть узнавать какой изменение вносить мочь использовать файл состояние сравнение текущий состояние предыдущий начинать работать terraform хранить файл состояние локально удаленный локальный состояние храниться компьютер который выполняться код terraform удалять находиться централизованный локация бакет s3 бд преимущество локальный хранение это просто требовать дополнительный настройка однако вызывать сложность работа команда совместно использовать синхронизировать файл состояние член команда довольно проблематичный удаленный хранение намного безопасно масштабируемый оно позволять несколько член команда трудиться один инфраструктура одновременно отлично подходить совместный работа кроме удалять состояние заблокировать предотвращение конкурировать изменение это снижать риск конфликт недостаток удаленный хранение относить необходимость дополнительный настройка создание бэкендхранилище настройка контроль доступ вариант также медленно локальный terraform получать файл состояние сеть выбор локальный удаленный хранение значительный степень зависеть требование инфраструктура работать одиночка локальный хранение  хороший вариант однако работа команда управление крупный инфраструктура ваш путь успех  удалять хранение знать использовать развертывать код terraform навык помогать автоматизировать инфраструктура управлять облачный ресурс оптимизировать процесс мочь работать команда делиться свой код улучшать общий производительность terraform  это просто инструмент это образ мышление учить думать инфраструктура код систематически проектировать тестировать развертывать масштабировать тот овладевать основа terraform готовый двигаться далеко курс terraform база  бозовой знание terraform мега продвигать",
    "tags": [
        "terraform",
        "aws",
        "облачные сервисы"
    ]
}