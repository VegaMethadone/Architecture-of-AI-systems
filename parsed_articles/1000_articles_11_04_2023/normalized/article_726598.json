{
    "article_id": "726598",
    "article_name": "Postgres: графовая база данных, о которой вы не подозревали",
    "content": "postgresql postgres  это мощный реляционный база данные способный хранить широкий спектр тип структура данные мы нужно хранить графовый структура данные часто обращаться база данные позиционировать подходящий решение например neo4j dgraph торопиться хотя работа графовый структура данные postgres обычно вспоминать идеально справляться эффективный хранение графовый данный запрос     разбираться графовый структура данные  прежде приступать объяснение postgres графова база данные мы нужно понимать такой графовый структура данные граф графовый структура данные  это набор узел ребро каждый узел обозначать сущность объект каждый ребро обозначать связь два узел       визуальный пример графовый структура данные    начинать воспринимать граф рамка код написать следующий typescript     class node    edges edge     data string   class edge    previousnode node   nextnode node   каждый узел node содержать список свой ребро каждый ребро edge содержать ссылка следующийпредыдущий узел ниже узнавать sql узел обязанный знать свой ребро    facebook  популярный социальный сеть использовать описание человек связь граф человек мочь друг этот друг свой список друг каждый человек представлять узел каждый дружба задавать ребро граф использоваться моделирование множество различный система например  npmзависимостей   рабочий процесс  транспортный система производственный линия многий другой     хранение графовый структура данные postgres  хранение граф postgres мы достаточно создавать два таблица  nodes   edges  таблица  nodes  хранить информация каждый сущность таблица  edges  храниться информация связь этот сущность    давать начинать создание таблица  nodes      create table nodes    id serial primary key   data varchar255   определять мы таблица  nodes  иметь столбец  id   data  столбец  id  содержать целочисленный значение автоматический инкремент служащий первичный ключ таблица столбец  data   это строка хранить дополнительный данные связывать узел пример быть усложнять сохранять строковый столбец однако реальный мир этот таблица мочь содержать угодно иметь любой количество столбец    самый важный таблица создание графовый структура данные являться таблица  edges      create table edges    previous_node integer references nodesid   next_node integer references nodesid   primary key previous_node next_node   создавать столбец  previous_node   next_node  обозначать взаимосвязь узел каждый этот столбец хранить внешний ключ узел важный вывод заключаться таблица  edges  ссылаться два строка один таблица ребро иметь один пара  previous_node   next_node  поэтому использовать составной первичный ключ каждый ребро уникальный мочь ссылаться сам    создавать таблица мочь вставлять данные     insert into nodes data values bob insert into nodes data values hank insert into nodes data values jeff  соединять узел ребро     insert into edges previous_node next_node values 1 2 insert into edges previous_node next_node values 1 3         nodes       id   data           1   bob       2   hank       3   jeff               edges       previous_node   next_node           1   2       1   3        визуализировать граф выглядеть       запрос графовый структура данные postgres  создавать графовый структура данные мочь начинать выполнять запрос помощь известный мы любимый sql    хотеть знать кто дружить боб     select id data from nodes join edges on nodesid  edgesnext_node where edgesprevious_node  1  находить  nodes  связывать узел иметь  id  1 id боб    похоже боб популярный захотеть узнавать кто дружить друг боб    давать вставлять еще несколько узел ребро показывать это     insert into nodes data values sally insert into nodes data values sue insert into nodes data values sam  insert into edges previous_node next_node values 2 4 insert into edges previous_node next_node values 3 4 insert into edges previous_node next_node values 4 5         nodes       id   data           1   bob       2   hank       3   jeff       4   sally       5   sue       6   sam               edges       previous_node   next_node           1   2       1   3       2   4       3   4       4   5        запрашивать друг друг боб мочь расширять предыдущий запрос снова выполнять он join таблица  edges  поддержка база данные превращаться кошмар мы приходиться выполнять join каждый уровень граф    postgres иметь встроенный фич позволять запрашивать графовый данные знать точно сколько join мы нужно  рекурсивный запрос  рекурсивный запрос позволять обходить граф начинать заданный узел двигаться ребро какойто заданный конечный точка    создавать рекурсивный запрос поиск друг боб друг мы нужно написать следующий sql     with recursive friend_of_friend as    select edgesnext_node   from edges   where edgesprevious_node  1   union   select edgesnext_node   from edges   join friend_of_friend on edgesprevious_node  friend_of_friendnext_node  select nodesdata from nodes join friend_of_friend on nodesid  friend_of_friendnext_node  поначалу это показываться непонятный поэтому разбирать команда рекурсивный запрос состоять два часть базовый случай рекурсивный случай базовый случай  это хотеть начинать запрос рекурсивный случай  это цикл который продолжать выполняться пока достигать какаято конечный точка     with recursive name as    base case   union   recursive case   выше показывать простой структура sql рекурсивный запрос    наш пример нужно начинать запрос друг боб находить ребро который боб id 1 являться  previous_node  затем рекурсивный случай непрерывно выполнять join таблица  edges  самый себя пока достигать конец граф боб пока достигать  friend_of_friendnext_node  null  вне рекурсивный случай объединять весь это вместе мы нужно запрашивать  nodes  связывать ребро рекурсивный запрос получать имя друг боб           data           hank       jeff       sally         заключение  помощь встроенный функция postgres сохранять графовый структура данные выполнять запрос использовать похожий подход мой предыдущий работа динамический генерация рабочий инструкция производственный линия основание заданный параметр определенный каждый ребро правило сгенерировать корректный документ помощь обход граф целиком храниться postgres использовать postgres работа реляционный данные мочь интегрировать графовый структура данные иметься база данные добавление лишний система",
    "tags": [
        "postgres",
        "postgresql",
        "графы",
        "графовые базы данных",
        "графовые структуры данных"
    ]
}