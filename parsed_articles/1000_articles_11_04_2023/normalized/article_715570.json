{
    "article_id": "715570",
    "article_name": "Зачем нужны feature-окружения и как с ними работать",
    "content": "паттерн featureокружений называть поразный ondemand review previewокружения нужный приближать среда разработка продакшен позволять разом избавляться множество проблема связанный организация разработка перенос код  создание featureокружений работа они ваш технологический стек должный достаточно мощный обеспечивать необходимый гибкость динамичность статья рассказывать реализовать некоторый механизм необходимый эксплуатация featureокружений       почему стоить использовать featureокружения   многий компания единый подход создание окружение разработка код складываться стихийно бессистемный правило разработчик запускать тестировать код свой рабочий компьютер функциональность переносить продаксить возникать все известный проблема it works on my machine   многое решение проблема становиться docker dockerконтейнеров разработка часто бывать недостаточно   десятый фактор  методология the twelvefactor app  рекомендовать держать окружение разработка промежуточный развертывание рабочий развертывание максимально похожий    допускать компания следовать рекомендация разработчик использовать собственный компьютер docker compose продакшн развертывать публичный облако kubernetes случай мочь возникать разный род проблема   работа режим несколько экземпляр  разрабатывать приложение cloud native следуемый методология 12factor app масштабировать приложение помощь запуск новый процесс согласно 8му фактор зачастую разработчик забывать локальный тестовый стенд редко моделировать особенность итог получаться плавать баги непредсказуемый поведение приложение   например программист разрабатывать вызов api который позволять лет изменять уровень логирование система тестовый стенд фич работать отлично перенос продакшн возвращать доработка ошибка повышенный уровень логирование включаться треть запрос возникать изза продакшень действовать экземпляр приложение логирование изменяться один  который принимать вызов api   длительный соединение  окружение разработка часто иметь прямой доступ приложение продакшень оно находиться ingress несколько балансировщик нагрузка возникать проблема длительный соединение пропадание httpзаголовков   например облачный балансировщик часто обрывать запрос long polling изза лимит длительность соединение стабильный работа websocket ingress нужно настраивать sticky sessions учитывать этот приложение работать нестабильный терять соединение сетевой запрос   поддержка деплоить несколько система  компания использоваться два система управление инфраструктура периодический изменение нужно дублировать причем просто скопировать нужно сделать перевод термин один платформа термин   зависимый сервис  приложение часто работать сам связка многий сервис очередь сообщение база данные другой сервис разрабатывать тестировать новый функциональность связанный сервис нужно настраивать запускать окружение разработка это часто нетривиальный задача сталкиваться компания новый сотрудник настраивать окружение разработка весь зависимость свой машина 152 неделя   поддержка локальный окружение пк разработчик  один программист предпочитать windows другой ubuntu третий работать macos разный поколение результат получаться эксплуатационный ад который невозможно сохранять единообразный актуальный окружение разработка каждый сотрудник   большинство этот проблема ошибка решаться помощь featureокружений  суть паттерн заключаться программист работать новый фич отдельный ветка git featureветках       разработчик коммитит изменять код featureветку репозиторий затем автоматически собираться артефакт который деплоиться специальный окружение правило создаваться новый окружение новый ветка также мочь персональный окружение каждый разработчик окружение находиться инфраструктура предприятие технологически близкий то продакшне   артефакт featureокружении сразу доступный сам разработчик коллега  другой программист qaинженерам постановщик задача это облегчать демонстрация разработка тестирование   создавать настраивать featureокружение   featureокружения  это динамический короче жить гибкий сущность поэтому ваш стек должный достаточно мощный статья описывать создавать окружение помощь kubernetes gitlab helm взгляд стек обеспечивать максимальный мощность гибкость   описывать действие выполнять использование другой система инструмент случай многий описывать возможность приходиться делать какимто другой способ некоторые создавать ноль   методика разработка git  это отдельный большой тема который свой особенность готовый методика например gitflow gitlab flow tbd многие команда разрабатывать свой любой случай хотеть использовать featureокружения нужно предусматривать процесс разработка возможность использование featureветок   пайплайн работа наш featureокружением быть создавать помощь gitlab   gitlab  это пайплайн код описываться yamlфайлах который храниться репозиторий код приложение фактически становиться часть благодаря этот ciпроцессы становиться прозрачный понятный разработчик   первый шаг пайплайн  сборка приложение билд build наш случай это docker image       секция  variables  описывать глобальный переменный gitlab  сервер docker_registry имя dockerобраза image_name второй переменная строиться база первый также несколько стандартный который предоставлять gitlab например это информация имя репозиторий ci_project_name имя ветка ci_commit_ref_slug также хеш коммит ci_commit_short_sha   стандартный переменный формироваться данный который характеризовать пайплайн именно механизм обеспечивать тот гибкость который позволять динамически создавать артефакт доставлять соответствующий featureокружения принцип механизм практически cicdсистемах gitlab наиболее развитый   секция  before_script  запускаться рано основный скрипт пайплайн подготовить инфраструктура окружение команда docker login передавать два переменный  логин пароль сервер docker registry переменный сохранять собственный хранилище защищать информация gitlab мочь хранить секретный данные который коммитить git   секция  only  указывать конкретный ветвь репозиторий который нужный сборка featureокружения имя должный начинаться префикс feature   секция  except  нужный исключать дублирование пайплайн featureветки создавать merge request пуша пайплайн запускаться дважды featureветки merge request избегать последний исключаться триггер пайплайн   следующий шаг пайплайн  деплый deploy развертка featureокружения       главный часть шаг  вызов helm package manager helm chart который описывать инфраструктура приложение находиться один репозиторий   вызов использоваться переменный который необходимый деплоить рассматривать подробно   секция  environment  указывать настройка механизм трекинг окружение который встраивать gitlab ci вебинтерфейс gitlab   имя окружение name составляться динамически имя ветка основа который собирать билд ci_commit_ref_name оно передаваться деплый   база имя окружение создаваться динамический ссылка окружение домен компания тестирование ingress который создавать wildcard азапись testcompanyru   итоговый ссылка иметь вид  httpsci_environment_slugtestcompanyru  благодаря динамический подстановка имя wildcard азапись публиковать любой количество окружение   секция  only   except  повторять предыдущий шаг пайплайн билд ограничивать ветвь который запускаться деплый   секция  variables  переменная ci_namespace формироваться имя kubernetes namespace который быть деплоить релиз этот имя уникально каждый featureветки состоять имя проект имя ветка репозиторий   вернуться секция  script  первый строка скрипт передавать helm имя namespace затем устанавливать несколько значение      globalenv  имя окружение     globalci url  ссылка окружение     globalimage_name  имя dockerобраза сформировывать предыдущий шаг пайплайн     globalgitlabpipeline  ссылка пайплайн        ссылка пайплайн  best practice который рекомендовать ссылка передаваться аннотация базовый объект kubernetes помогать отладка приложение благодаря знать какой пайплайн задеплоить объект мочь посмотреть коммит лог приводить просто демонстрация разнообразие стандартный переменный gitlab ci",
    "tags": [
        "devops",
        "kubernetes",
        "gitlab",
        "gitlab ci",
        "helm",
        "инфраструктура",
        "gitflow"
    ]
}