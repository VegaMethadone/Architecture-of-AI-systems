{
    "article_id": "726564",
    "article_name": "Как построить надёжную шину данных на Apache Kafka",
    "content": "все привет павел агалецкий ведущий инженер авито компания использовать микросервисный архитектура синхронный асинхронный обмен событие какойто момент мы становиться нужно обеспечивать надежнуюпередача сообщение стандартный apache kafka мы мало приходить идея пора строить собственный шина данные нужный шина данный микросервис подключать apache kafka напрямую этот быстро просто нужно развертывать кластер давать продюсер отправитель консьюмер получатель адрес подключение разрешать обмениваться событие прямой подключение микросервис kafka такой подход весомый минус сложно менять топология система захотеть отказываться kafka разделять она несколько кластер приходиться обновлять клиент пользователь поменять адрес настройка каждый язык разработка нужный свой клиент авито писать go php python другой получаться зоопарк разный система обмен событие рост система прочитывать сообщение kafka становиться сложно изза расти нагрузка поэтому решать пойти другой путь поставлять kafka микросервис data bus шина данные изолировать kafka сервис брать получение отправка сообщение получатель реализовать взаимодействие apache kafka шина отделять микросервис друг друг kafka микросервис подключаться шина данные протокол websocket публиковать событие метод подписываться интересовать событие название топик протокол простой поддерживаться весь язык разработка который использовать авито микросервис подключаться шина протокол websocket сам шина работать kafka напрямую шина напрямую взаимодействовать kafka скрывать особенность работа разработчик микросервис нужно знать офсет хранение событие команда поддержка разрабатывать клиент разный язык программирование инженер авито приходиться разбираться kafka кроме шина предоставлять разработчик универсальный метрика например скорость запись чтение количество публиковать событие время обработка событие размер бэклога данный пользователь получать наш сервис сразу подключение специальный действие это помогать разработчик отладка микросервис шина данный  центральный система авито средний нагрузка она составлять порядок 3 миллион запрос запись около 10 миллион запрос чтение минута ее постоянно использовать 500 сервис компания поэтому наш главный цель  обеспечивать физический надежность доступность система  помимо физический доступность мы важный логический надежность шина данные данные должный консистентный любой сервисконсьюмер смочь прочитывать сообщение сервисыпродюсер случайно целенаправленно записывать невалидный событие который мочь вызывать поломка система просто оставаться непрочитанный архитектура шина данные основа apache kafka сначала большой кластер kafka распределять несколько датацентр авито момент полагаться возможность самый kafka восстанавливаться отказ часть сервер который входить ее кластер один большой kafka растягивать весь датацентр авито подход оказываться очень удачный сервер датацентр доступный шина работать отключение датацентр появляться заметный просадка latency момент отключение один датацентр время запись наш система достигать 30 секунда это происходить момент отключение kafka довольно топик который иметь 15 тысяча партиция отключение датацентр потеря связь часть брокер выполняться ребаланс выбираться новый мастер этот время топика становиться недоступный запись это сильно влиять работа наш пользователь запись данный шина авито важный чтение микросервис мочь записывать давать система получать ошибка большой таймаут ломаться многие процесс итог это становиться заметно конечный пользователь авито  сайт приложение поэтому мы очень важно запись быстрый кроме хотеть работа kafka локальный любой сервис который взаимодействовать шина данные операция должный происходить внутри один кластер поэтому перерабатывать архитектура создавать kafka federation общий схема архитектура kafka federation отказываться один большой кластер заменять несколько маленький каждый датацентр размещать kafka экземпляр шина данные также экземпляр микросервис который должный устойчивый отказ микросервисыпродюсер записывать данный шина который находиться один они кластер затем шина передавать событие write kafka доступный запись  первый шаг микросервис мочь записывать данные локально затем событие write kafka помощь репликатор записываться общий центральный kafka она реализовать старый схема  распределять кластер весь датацентр второй шаг репликатор копировать событие локальный kafka центральный центральный kafka доступный запись чтение подверженный проблема медленный запись высокий latency пользователь это становиться незаметный запись выполняться сначала локальный write kafka задержка замечать репликатор возникновение проблема датацентр какоето время перелагать данные большой kafka это влиять качество работа система авито чтение центральный kafka осуществляться реплика шина давать расположенный каждый датацентр очередь подключаться микросервисыконсьюмер третий шаг шина данные считывать сообщение центральный kafka передавать консьюмер получаться система который доступный запись вне зависимость отказ иной датацентр недоступный микросервис остальной датацентр продолжать работа  обеспечивать логический надежность шина данные микросервис авито постоянно эволюционировать меняться данные набор событие который публиковать читать система должный уметь проверять сообщение сохранять консистентность данный сломаться изза изменение пользователь шина должный уверять любой условие смочь прочитывать событие получать валидный данные поэтому точка зрение логический надежность мы нужно реализовать схема сообщение валидация схема сообщение контракт  этот описание продюсер записывать консьюмер читать какой событие поле тип данный разработчик прямо код микросервис специальный директория указывать событие который публиковать читать внутри авито использовать описание синхронный асинхронный схема обмен brief  текстовый формат строгий типизация недоступный вне компания структура описание похожий grpc схема событие формат brief schema serviceupdatecommited serviceupdatecommited коммит библиотека сервис  message serviceupdatecommited      servicename string название сервис     repository string адрес репозиторий     repositoryclone string адрес репозиторий клонирование     owner string владелец сервис     update libupdateversion библиотека обновление     commitdata commitdata данные коммит репозиторий     jirataskid string уникальный идентификатор апдейт  название jira тикет eg arch123   message libupdateversion      libname string название библиотека     language string язык программирование     desired string желать обновление   message commitdata      branchname string имя ветка который производить коммит     comment string комментарий pr   удобство разработчик реализовать кодогенерация основа описание событие автоматически сгенерировать код прописывать модель данные клиент программист достаточно указывать схема событие итог получаться работать клиент который сразу использовать публикация чтение сообщение проверка валидность схема выполнять шина данный сервис пытаться выкатиться продаксить система сравнивать схема событие схема продюсер консьюмер  схема валидация данные развертывание микросервер шина проверять ряд критерий наличие обязательный поле совпадение поле тип данные продюсер консьюмер также шина запрещать микросервис выполнять валидный действие например давать возможность продюсер удалять событие который консьюмер сначала нужно убирать ожидание сообщение сервисахполучатель затем  сервисепродюсер пример  поменять тип поле строка число обратно итог шина данный способный переживать отказ отдельный сервер датацентр продакшень система работать три год последний полтора год один серьезный инцидент связанный недоступность отказ шина гарантировать соблюдение контракт продюсер консьюмер конечный итог это обеспечивать надежность система длительный перспектива пользователь уверенный сервис смочь прочитывать событие который публиковать другой сервис шина данные скрывать пользователь нюанс работа kafka мы это помогать незаметно заменять схема один экземпляр система kafka fe",
    "tags": [
        "apache kafka",
        "шина данных",
        "микросервисы"
    ]
}