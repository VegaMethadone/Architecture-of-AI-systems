{
    "article_id": "726672",
    "article_name": "Микросервисы сына маминой подруги. Пишем правильные микросервисные приложения на Java",
    "content": "все привет сегодня решать написать статейка все любимый микросервис давно хотеть изучать тема микросервисный приложение актуальный технология который использоваться построение данный статья должный помогать такой микросервис микросервис  это архитектурный подход разработка приложение который предполагать разбиение приложение маленький независимый компонент каждый который выполнять определенный функция компонент мочь взаимодействовать друг друг api позволять разрабатывать приложение гибко масштабировать  говорить простой язык микросервис  это lego программист просто собирать разный кирпичик вместе создавать красивый здание чтото сломаться легко заменять нужный кирпичик перестраивать конструкция приятно наступать микросервис маленький болеть большой монолит автор статья придумывать аналогия лего микросервисный архитектура становиться актуальный предоставлять ряд преимущество который важный современный разработка программный обеспечение гибкость масштабируемость микросервис позволять быстро гибко развивать приложение добавлять новый функция компонент также обеспечивать легкий масштабируемость приложение необходимость разделение ответственность каждый микросервис выполнять определенный функция позволять разделять ответственность разный команда упрощать сопровождение приложение независимость устойчивость ошибка каждый микросервис работать независимо другой позволять изолировать ошибка сбой работа один компонент затрагивать работа приложение легкий замена обновление микросервис легко заменять обновлять упрощать поддержка приложение уменьшать время простой случай сбой изменение подход использование современный технология микросервис позволять использовать различный технология язык программирование каждый компонент упрощать разработка повышать производительность запоминать java кроме микросервисный архитектура предоставлять возможность использование облачный технология контейнер такой  docker  облегчать развертывание приложение повышать масштабируемость дело java микросервис сегодня  spring boot  предоставлять огромный пакет инструмент работа микросервис подробно этот топик мочь ознакомляться  ссылка  пойти далеко рассматривать все любимый  spring cloud   spring cloud  это набор инструмент разрабатывать компания spring который позволять быстро легко создавать микросервисный приложение обеспечивать множество функция такой конфигурация регистрация отслеживание микросервис балансировка нагрузка трассировка запрос многий другой понимание насколько важный spring cloud представлять пытаться создавать микросервисный архитектура должный написать свой собственный код каждый функция такой конфигурация регистрация отслеживание микросервис балансировка нагрузка далее это занимать время усилие приводить ошибка который избегать помощь spring cloud api gateway сервер реестр сервис архитектура микросервисный приложение самый дело очень простой крайне действенный главный мысль архитектура состоять инкапсуляция наш сервис запрос вне коммуникация наш сервис подниматься отдельный api gateway  api gateway   это дверь космический корабль предоставлять доступ различный отсек корабль также управлять входить исходящий трафик защищать экипаж космический опасность капитан корабль попросить открывать дверь api gateway готовый выполнять задача позволять получать доступ нужный отсек  просто казаться первый взгляд первый очередь ваш gateway работать правильно нужно иметь tool регистрация ваш микросервис иначе gateway знать нужно отправлять тот иной запрос java  spring cloud netflix  который прекрасный  eureka   spring cloud eureka   это сервер реестр сервис который использоваться обнаружение регистрация микросервис распределять система являться часть библиотека spring cloud предоставлять механизм управление мониторинг состояние сервис система принцип работа spring cloud eureka достаточно простой каждый микросервис регистрировать сервер eureka запуск сообщать свой имя ipадресе порт затем клиент мочь использовать eureka поиск нужный сервис получение адрес настраивать наш gateway такой образ мочь трекать наш реестр сервис брать оттуда нужный информация микросервис перенаправлять туда наш запрос давать разбирать следующий пример gateway настраиваться крайне просто сначала мы нужно добавлять 2 dependency наш java проект pomxml dependency       groupidorgspringframeworkcloudgroupid       artifactidspringcloudstartergatewayartifactid dependency dependency       groupidorgspringframeworkcloudgroupid       artifactidspringcloudstarternetflixeurekaclientartifactid dependency gradlebuild implementation group orgspringframeworkcloud name springcloudstartergateway implementation group orgspringframeworkcloud name springcloudstarternetflixeurekaclient  далее должный помечать наш application файл аннотация  enableeurekaclient  регистрация проект микросервис это нужный сделать apigateway любой другой микросервис последний шаг оставаться настройка applicationyml properties файл следующий образ пример предполагать 2 сервис нужно переадресовывать запрос incidentservice authenticationservice server   port 8083  spring   application     name apigateway   cloud     gateway       routes          id incidents           uri lbincidents           predicates              pathapiv1incident          id authentication           uri lbauthentication           predicates              pathapiv1authentication   eureka   client     serviceurl       defaultzone httplocalhost8761eureka     fetchregistry true     registerwitheureka true id uri генериться зависимость поле springapplicationname ваш конфигурационный файл общение сервис  приходить наш любимый брокер сообщение называть страшный сон junior программист собес слышать такой слово message queue kafka rabbitmq лицо покрываться мокрый таска собес джуна написать копия спринг бут 15 минута покрой весь код юнит тесто самый дело брокер сообщение очень крутой простой штука который позволять оптимизировать работа микросервисный приложение  message queue   это механизм который позволять компонент система обмениваться сообщение друг друг посредник называть очередь сообщение очередь сообщение являться центральный место хранение передача сообщение компонента система представлять система ресторан очередь сообщение  это тот очередь который складываться самый популярный блюдо меню заказ этот блюдо начинать поступать официант ставить очередь повар начинать готовить очередь такой образ каждый посетитель получать порция блюдо порядок очередь хаос конфликт однако также ресторан очередь сообщение переполняться система постоянно поступать большой объем запрос компонент успевать обрабатывать сообщение быстро случай ресторан происходить настоящий фудфайт который приводить сбой работа система решать использовать message queue забывать следить объем убеждаться компонент система работать режим другой ваш система функционировать швейцарский часы каждый посетитель получать свой заказ вовремя задержка многие возникать вопрос использовать брокер сообщение общение микросервис мочь отправлять запрос простой resttemplate парить мозги  вопрос любить отвечать примерно такой ключ использование брокер сообщение микросервис иметь несколько преимущество который делать важный элемент микросервисный архитектура разрыв зависимость брокер сообщение позволять уменьшать зависимость микросервис делать система гибкий масштабировать микросервис мочь обмениваться сообщение брокер иметь непосредственный знание друг друг позволять легко добавлять удалять изменять микросервис распределение нагрузка брокер сообщение обрабатывать сообщение асинхронно позволять распределять нагрузка микросервис обеспечивать быстрый обработка запрос гарантированный доставка брокер сообщение обеспечивать гарантированный доставка сообщение микросервис временно недоступный отказываться обрабатывать сообщение улучшать отказоустойчивость микросервис временно недоступный выходить строй брокер сообщение сохранять сообщение очередь отправлять микросервис снова становиться доступный такой образ использование брокер сообщение микросервис позволять ",
    "tags": [
        "микросервисы",
        "java",
        "брокеры сообщений",
        "kafka",
        "spring cloud",
        "spring"
    ]
}