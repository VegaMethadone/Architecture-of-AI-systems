{
    "article_id": "725864",
    "article_name": "Отладка гейзенбагов: история о параллельной обработке",
    "content": "гейзенбаг   существительное  баг исчезать попытка отлаживать   пролог  недавно заниматься крупный миграция кодовый база python analyzer стремиться она ускорять среди прочий изменение один крупный улучшение заключаться следующий анализатор становиться использовать concurrentfuturesprocesspoolexecutor параллельный выполнение независимый задача  такой образ мочь задействовать ядро цп   все срабатывать довольно  большой репозиторий наблюдать существенный увеличение скорость время ситуация улучшаться смочь контролировать функционировать инспектор ошибка     глава 0 первый камень преткновение  течение первый два неделя развертывать обновление становиться фиксировать аварийный завершение некоторый аналитический прогоны отчасти это ожидать  крупный миграция неизбежно возникать пограничный случай просто должный способный оперативно отлаживать любой возникать проблема     симптом  заглядывать лог этот прогоны замечать наш пул процесс аварийный завершаться ошибка brokenprocesspool обычно такой аварийный ситуация происходить большой репозиторий попытка проанализировать большой количество файл    случаться каждый анализ проходить проблема прогон хрупкий     диагноз   ответ  подсказывать подобный мочь происходить поскольку процесс израсходовать доступный память время присматриваться мониторинг    наш аналитический задание выполнять google cloud работать контейнер мониторинг который удобно осуществлять помощь gcp monitoring перезапускать неудавшийся анализ пронаблюдать использоваться ram видеть следующий     график использование память   сожаление это оригинальный размер изображение      очень похожий контейнер заканчиваться память    убеждаться контейнер действительно примерно 100 выгребать лимит память который устанавливать     задача  проводить дополнительный исследование становиться понимать проблема повидеть заключаться очередь задача    правильно задавать футура например поступать параллельно применять процесс ко весь элемент состав любой заданный набор данный     def processitem       do something here  data  get_data results    with concurrentfuturesprocesspoolexecutorcpu_count as executor     futures        for item in data         futuresappendexecutorsubmitprocess item      for future in concurrentfuturesas_completedfutures         result  futureresult         resultsappendresult   чтото делать результат  первый взгляд код кажется прямолинейный корректный основной упускаться вид один вещь ограничивать объем память иметься распоряжение  каждый вызов executorsubmit создаваться футура футура содержаться копия тот данный ее передавать затем приступать выполнение футур каждый футура иначе выполняться выделение память обработка затем возвращение результат момент окончание вычисление список футур который быть содержаться футура один также память    причем элемент очень мочь создавать сотня тысяча футур поедать память результат сталкиваться отказ попытка выделять память соответственно приводить ошибка brokenprocesspool     исправление  способ это исправлять вопервых начинать объединять задача пакет код который выглядеть примерно     with concurrentfuturesprocesspoolexecutorcpu_count as executor     while data         futures             less jobs at a time         for item in data10             futuresappendexecutorsubmitprocess item          for future in concurrentfuturesas_completedfutures             item result  futureresult             resultsappendresult             dataremoveitem   чтото делать результат   хранить десять футур затем отбрасывать получать результат также удалять тот элемент который успевать обрабатывать    однако простой способ решать задача     with concurrentfuturesprocesspoolexecutorcpu_count as executor     futures  executorsubmitprocess item for item in data      for future in concurrentfuturesas_completedfutures         result  futureresult         resultsappendresult   чтото делать результат  это интересный превращать футура генератор    хранить список футур ранее ситуация меняться генератор ленивый создавать футура попросить as_completed запрашивать футура условие иметься пространство который она запускать поскольку использовать футура цикл for попадать сборка мусор каждый итерация     такой образ получать результат затем сразу избавляться нужный мы футура память пожираться проблема решать верно      глава 1 фантомный задержка   большинство случай анализатор работать идеально ожидаться некоторый редкий случай начинать наблюдаться какието задержка    устанавливать пороговый значение 25 минута  качество максимальный длительность анализ один репозиторий превышение порог отменять анализ сбрасывать пометка timed out время истекать 25 минута  это очень долго анализ обычно такой задержка случаться наличие какоголибо баг анализатор     симптом  такой поведение казаться очень хаотичный непредсказуемый    дело ход анализ примерно 10 минута пуск вывод логово просто прекращаться контейнер переставать печатать он прекращаться всякий событие    25 минута контейнер приходиться убивать поскольку никакой результат генерироваться ситуация подаваться задержка    никакой реальный способ подробно выяснять причина такой зависание поскольку извне зайти продакшенконтейнер невозможно     диагноз  первый взгляд это классический проблема область многопроцессорный разработка казаться либо взаимный блокировка либо какойто рабочий процесс который дожидаться застревать бесконечный цикл поэтому приниматься закапываться исходный код     гденибудь база код бесконечный цикл любой цикл while    чрезвычайно длительный обработка каждый процесс который порождать предусматриваться задержка поэтому проблема мочь возникать   взаимный блокировка возможный состояние взаимный блокировка процесс должный потреблять цп    весь время продолжать поступать новый процесс память качество предохранительный мера против неуловимый ошибка brokenprocesspool модифицировать код  воссоздавать пул такой ошибка происходить     executor  concurrentfuturesprocesspoolexecutorcpu_count process_pool_broke  false  while data     futures        try         for future in concurrentfuturesas_completedfutures             item result  futureresult             resultsappendresult             dataremoveitem      except brokenprocesspool         executorshutdownwaitfalse         loggerinfore creating pool         executor  concurrentfuturesprocesspoolexecutorcpu_count  executorshutdown   чтото делать результат  лог также наблюдать воссоздание пул соответственно память данный случай съедаться уделять это пристальный внимание поскольку признак указывать взаимный блокировка     изыскание  проблема заключаться должный както воссоздавать этот поведение репозиторий изза который подвисать анализ оказываться приватный поэтому мочь воссоздавать локальный машина ровно окружение требоваться находить публичный репозиторий работа который провоцироваться такой проблема правда один ниточка представляться репозиторий должно 800 около файл python речь идти большой проект    пробовать прогонять продакшенанализатор большой проект например django  мы везти всякий анализ проходить масло     искать свидетельство задержка история анализатор находить другой крупный репозиторий который такой задержка ранее фиксироваться находить пара подобный репозиторий открытый исходный код какимто образ попытать счастие примерно дюжина репозиторий раз суметь получать взаимный блокировка находить который удаваться воспроизводить проблема проект называться weblate    попытаться повторно запускать анализатор посмотреть уверенно воспроизводить баг репозиторий weblate неудачно     попробовать несколько  задержка действительно самый настоящий гейзенбаг хотя отношение поведение развиваться последовательно тот задержка который побуждать заниматься этот расследование исчезать попытка повторно прогнать самый анализ    попытка проанализировать weblate наш внутренний инстанс deepsource мы также помогать никакой задержка никакой зависание     докапываться истина  итак случайный образ отказывать репозиторий становиться показываться вдвое усугублять проблема",
    "tags": [
        "программирование",
        "исследования и прогнозы в it",
        "процессоры",
        "отладка"
    ]
}