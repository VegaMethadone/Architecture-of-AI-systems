{
    "article_id": "727510",
    "article_name": "Мир приключений по API-серверу Kubernetes. Часть 2. Наблюдение и кэширование",
    "content": "наш предыдущий статья приключение сервер kubernetes api рассматривать интерфейс хранилище исследовать единственный реализация дерево etcd3 однако внимательный прочтение сноска пост показывать честный говорить etcd3  единственный реализация это оспаривать cacher также технический реализация хотя требоваться базовый реализация подробно рассматривать кэширование один будущий пост подробно изучать кэширование возможность чем поговорить статья   наблюдение  хотеть проблема решение смотреть кэширование  просто нужно решение watchcache   cacherlisterwatcher   reflector  связывать все вместе метод  watch  смотреть успешно  просто показывать код наблюдение прежде вводить какойлибо тип кэширование стоить вернуться тот факт  storageinterface  включать метод  watch  реализация  etcd3  поддерживать  ранее  изучать  возможность отслеживание изменение обращаться непосредственно  etcd  помощь  etcdctl   etcd  предлагать  watch api  который использовать двунаправленный поток grpc доставка событие клиент изменение значение  ключ  реализация etcd3 watch  создавать  watchinterface  поддерживать  watcher  новый  watcher  создаваться каждый вызов  watch  каждый  watcher  суть просто вызывать  etcd  watch api пересылать событие канал давать взять наш программа  предыдущий пост  модифицировать она отслеживать изменение  configmaps  кластер мочь находить инструкция получать данные pci необходимый связь  etcd  кластер  kind    directwatchgo package main  import  context fmt  goetcdioetcdclientpkgv3transport clientv3 goetcdioetcdclientv3 v1 k8sioapicorev1 k8sioapimachinerypkgruntime k8sioapimachinerypkgruntimeserializer k8sioapiserverpkgstorage k8sioapiserverpkgstorageetcd3 k8sioapiserverpkgstoragevalueencryptidentity k8siokubernetespkgapiscore k8sv1 k8siokubernetespkgapiscorev1   func main  tlsconfig err  transporttlsinfo certfile       pkietcdservercrt keyfile        pkietcdserverkey trustedcafile  pkietcdcacrt clientcertfile pkiapiserveretcdclientcrt clientkeyfile  pkiapiserveretcdclientkey clientconfig if err  nil  panicerr  c err  clientv3newclientv3config endpoints stringhttps1270012379 tls       tlsconfig  if err  nil  panicerr   scheme  runtimenewscheme k8sv1addtoschemescheme coreaddtoschemescheme f  serializernewcodecfactoryscheme s  etcd3newc fcodecforversionsnil funiversaldecoder nil k8sv1schemegroupversion nil registry v1resourceconfigmap identitynewencryptchecktransformer true etcd3newdefaultleasemanagerconfig w err  swatchcontextbackground configmaps storagelistoptions predicate storageeverything recursive true  if err  nil  panicerr  for e  range wresultchan  co ok  eobjectv1configmap if ok  panicnot a config map  fmtprintfs  ssn etype conamespace coname   обращать внимание факт регистрировать тип  k8siokubernetes  скоро  k8sioapi  это нужно выполнять преобразование  internal  версия наш желаемый версия  v1  также передавать  nil codecforversions  поскольку декодировать чтение событие поток запускать кластер  kind  мочь начинать перенаправление порт  etcd pod   kubectl portforward n kubesystem podetcdkindcontrolplane 23792379 мочь начинать наш программа  go run directwatchgo added  defaultkuberootcacrt added  kubenodeleasekuberootcacrt added  kubepublicclusterinfo added  kubepublickuberootcacrt added  kubesystemcoredns added  kubesystemextensionapiserverauthentication added  kubesystemkubeproxy added  kubesystemkuberootcacrt added  kubesystemkubeadmconfig added  kubesystemkubeletconfig added  localpathstoragekuberootcacrt added  localpathstoragelocalpathconfig ожидаться получать  added  событие  configmaps  находиться данный момент кластер создавать обновлять удалять  configmap  увидеть другой событие отражаться поток просмотр  kubectl create configmap k8sasa fromliteral helloworld configmapk8sasa created   kubectl create configmap k8sasa fromliteral helloasa o yaml dryrun  kubectl apply f  configmapk8sasa configured   kubectl delete configmap k8sasa configmap k8sasa deleted посмотреть каждый этот событие поток просмотр соответствующий тип added  defaultk8sasa modified  defaultk8sasa deleted  defaultk8sasa общий наблюдение мочь получать событие любой время меняться интересовать тип похоже  etcd  наш маленький программа сильно потеть давать взглядывать некоторый показатель  etcd  убеждаться мочь находить открытый адрес метрика  etcd  наш кластер  kind  просматривать команда контейнер модуль  pod   kubectl get pod n kubesystem etcdkindcontrolplane ojsonpathspeccontainers0command  jq      etcd   advertiseclienturlshttps17219022379   certfileetckubernetespkietcdservercrt   clientcertauthtrue   datadirvarlibetcd   experimentalinitialcorruptchecktrue   experimentalwatchprogressnotifyinterval5s   initialadvertisepeerurlshttps17219022380   initialclusterkindcontrolplanehttps17219022380   keyfileetckubernetespkietcdserverkey   listenclienturlshttps1270012379https17219022379   listenmetricsurlshttp1270012381   listenpeerurlshttps17219022380   namekindcontrolplane   peercertfileetckubernetespkietcdpeercrt   peerclientcertauthtrue   peerkeyfileetckubernetespkietcdpeerkey   peertrustedcafileetckubernetespkietcdcacrt   snapshotcount10000   trustedcafileetckubernetespkietcdcacrt  listenmetricsurls   искать  etcd  обслуживать  показатель  prometheus конечный точка  metrics  этот адрес создавать минимальный конфигурационный файл prometheus давать команда сборщик выполнять очистка  etcd  prometheusyml global   scrape_interval 1s scrape_configs    job_name etcd     static_configs      targets 1270012379 прежде запускать prometheus убеждаться получать доступ конечный точка  etcd metrics  перенаправление порт пространство имя  host network  позволять запускать prometheus пространство имя  host network  упрощать доступ панель мониторинг браузер перенести конечный точка  etcd metrics   kubectl portforward n kubesystem podetcdkindcontrolplane 23812381 затем запускать контейнер prometheus подключать сеть хост    docker run nethost rm v pwdprometheusymletcprometheusprometheusyml promprometheus панель мониторинг prometheus должный доступный браузер адрес  1270019090  мочь получать график показатель который предоставлять  etcd  вводить запрос например  irateprocess_cpu_seconds_totaljobetcd5m  показывать скорость увеличение общий системный пользовательский процессорный время запускать программа который устанавливать просмотр  configmaps  увидеть существенный влияние процессор диапазон ось y составлять  003   023  примечание  поскольку запускать  etcd  кластер  kind  сервер api kubernetes другой компонент взаимодействовать дополнение нагрузка программа следовать ожидать один часы вряд оказывать существенный влияние увеличивать количество час начинать сталкиваться проблема давать настраивать наш программа запускать 10 000 просмотр  configmaps  manydirectwatchgo package main  import  context fmt os ossignal  goetcdioetcdclientpkgv3transport clientv3 goetcdioetcdclientv3 v1 k8sioapicorev1 k8sioapimachinerypkgruntime k8sioapimachinerypkgruntimeserializer k8sioapiserverpkgstorage k8sioapiserverpkgstorageetcd3 k8sioapiserverpkgstoragevalueencryptidentity k8siokubernetespkgapiscore k8sv1 k8siokubernetespkgapiscorev1   func main  tlsconfig err  transporttlsinfo certfile       pkietcdservercrt keyfile        pkietcdserverkey trustedcafile  pkietcdcacrt clientcertfile pkiapiserveretcdclientcrt clientkeyfile  pkiapiserveretcdclientkey clientconfig if err  nil  panicerr  c err  clientv3newclientv3config endpoints stringhttps1270012379 tls       tlsconfig  if err  nil  panicerr   scheme  runtimenewscheme k8sv1addtoschemescheme coreaddtoschemescheme f  serializernewcodecfactoryscheme s  etcd3newc fcodecforversionsnil funiversaldecoder nil k8sv1schemegroupversion nil registry v1resourceconfigmap identitynewencryptchecktransformer true etcd3newdefaultleasemanagerconfig for i  0 i  10000 i  w err  swatchcontextbackground configmaps storagelistoptions predicate storageeverything recursive true  if err  nil  panicerr  go func  for e  range wresultchan  co ok  eobjectv1configmap if ok  panicnot a config map  ",
    "tags": [
        "network",
        "kubernetes",
        "k8s",
        "slurm",
        "it компании",
        "it инфраструктура",
        "карьера программиста",
        "карьера ит специалиста"
    ]
}