{
    "article_id": "727640",
    "article_name": "Программирование контроллера сервоприводов MC50. Развёртывание промежуточного ПО",
    "content": "схема плата контроллер   статья  первый шаг разработка прошивка выполнять   заниматься промежуточный программный обеспечение промежуточный  это придавать наш девайса основной масса фич rtos встраивать система приобретать особый популярность сопровождаться полезный промежуточный софт    rtos  мы портировать   подключать устойчивый сбой файловый система exfat стек tcpip вместе прикладной протокол http mqtt sntp dns mdns ftp telnet  стек usb режим девайса хост класс cdc acm cdc ecm rndis storage hid движок логгер движок параметризация база json кодировка отладочный монитор движок freemaster стекать сетевой протокол tcpip мы нужный вопервых значительно облегчать дистанционный отладка устройство вовторых сеть упрощать групповой управление масштабирование количество устройство один система управление втретьих такой образ упрощаться интеграция сторонний программирование управление оборудование такой  eclipse 4diac   matlab   nodered   openhab  тп один неочевидный причина переходник usbethernet обеспечивать гальванический развязка этот развязка любой устройство разъем ethernet интеграция такой переходник azure rtos написать   начинаться работа нужный компонент выбираться окно конфигурация  synergy software package ssp  ide  e² studio компонент достаточно каждый повторять рутинный операция выбор опция конфигурация номер прерывание приоритет прерывание номер транспортный канал тип транспортный канал разруливать конфликт приоритет назначать размер служебный буфер стек окно конфигурация промежуточный ssp работа сказать тяжелый вскидка требоваться месяц овладевать весь хитрость конфигурирование e2studio получение рабочий результат использовать полный набор стек ssp проект счастие работа проделывать выкладывать готовый фреймворк собранный ssp репозитарий azure rtos итак авто генерация исходник ssp получать 2125 файл исходник самый ценный  это некоторый особо сложный драйвер такой sdio usb dma аппаратный криптография графический ускоритель больший часть исходник однако промежуточный софт azure rtos ssp идти свой версия azure rtos отличаться тот репозитарий основной структура директория формат хедер конфигурационный константа ядро rtos идти свой оригинальный порт семейство synergy момент написание статья релиз ядро rtos репозитарий azure rtos 620 релиз ядро ssp 240 версия 619 отставание незначительный изменение api давать просто заменять один другой  структура директория генерация проект ssp убирать лишний добавлять нужный генерация проект увидеть жирный слой hal изолировать прямой доступ периферия hal послужить мы первый этап начинать мешать мы нужный прямой доступ порт  движок транспортировка данные периферия коммуникационный периферия проч потребоваться тщательный изучение исходник оценка свой возможность полность избавляться hal очевидно невозможно обозримый перспектива сделать прямой доступ порт довольно тривиальный простой прямо обращаться порт например управлять светодиод объявлять название логический сигнал светодиод define     red_led            r_pfsp504pfs_bpodr далее включать  red_led  1  выключать  red_led  0  светодиод просто arduino показывать анализ конфликт hal возникать дополнительно оставлять пустой структура const ioport_cfg_t g_bsp_pin_cfg     number_of_pins  0   p_pin_cfg_data 0   этот тот структура который hal использовать начальный инициализация пин полностью она удалять поскольку отказываться работать драйвер spi i2c состав hal начальный инициализация hal мы нужный свой  удобный вариант  поэтому выбирать компромисс забывать также устанавливать макрос отключение  проверка пиновый существование   define ioport_cfg_param_checking_enable 0 важный момент hal свой фаза инициализация запрещать доступ некоторый регистр доступ приходиться восстанавливать отработка hal старт словом такой оператор встречать мой код открытие доступ регистр     разрешать запись регистр пин     r_pmiscpwpr_bbowi   0     r_pmiscpwpr_bpfswe  1      r_systemprcr  0xa50b  открывать доступ запись регистр  далее очень важно правильно запускать движок отладочный трассировка чип это делаться следующий команда trckcr  uint8_ttrckcr_reg trckcr  0x80 uint8_ttrckcr_reg  trckcr  разрешать трассировщик частотй 120 мгц манипуляция увидеть файл  bsp_initc   реализоваться перехват некоторый часть процесс инициализация старт программа    самый сложный hal synergy  это организовывать прерывание   hal synergy сложный например hal stm32 разработчик renesas решать сильно абстрагироваться железо вводить файловый метафора сродни линукс сопровождать организация прерывание дополнительный информационноуправляющий структура специальный образ размещать линкер архитектура synergy жестко закреплять периферия номер прерывание любой сигнал прерывание периферия задавать любой номер nvic соответственно вектор номер прерывание задаваться периферийный блок название  interrupt controller unit icu  этап старт прошивка структура icu блок icu видно схема стоять периферия непосредственно контроллер прерывание nvic ядро arm свой суть гибкий удобный решение программист ssp превращать непроходимый квест первый проблема начинаться вектор объявляться ssp три разный макрос  ssp_vector_define   ssp_vector_define_chan   ssp_vector_define_unit  макрос применять конкретный сигнал прерывание зависеть тип периферия периферия логика программист renesas одиночный мультиканальный мультя юнитовый отличаться канал юнит периферия спрашивать второй проблема заключаться реализация этот макрос пример один define ssp_vector_define_unitisripunit_namesignalchannel      void isr void      static void  gp_ctrl_ip_unit_name_channel_signal      const ssp_vector_t g_vector_ip_unit_name_channel_signal          bsp_place_in_section_v2vectorip_unit_name_channel_signal isr      const ssp_vector_info_t g_vector_info_ip_unit_name_channel_signal           bsp_place_in_section_v2vector_infoip_unit_name_channel_signal          event_numberelc_event_ipunit_name_signal          ip_id  ssp_ip_ip ip_channelchannel ip_unitssp_ip_unit_ipunit_name          ip_signalssp_signal_ip_signal pp_ctrl  gp_ctrl_ip_unit_name_channel_signal  это превращаться код обработка препроцессор  объявление функция обслуживание прерывание void                      usbfs_int_isr void   переменный предназначенный хранение указатель структура управляющий информация драйвер static void              gp_ctrl_usb_fs_0_int     непосредственно вектор тот адрес переход процедура обслуживание прерывание переменный размещать секция vector  const ssp_vector_t        g_vector_usb_fs_0_int      __attribute__ sectionvectorusb_fs_0_int      __attribute__ __used__usbfs_int_isr   структура описание тип прерывание переменный размещать секция vector_info const ssp_vector_info_t   g_vector_info_usb_fs_0_int __attribute__ sectionvector_infousb_fs_0_int __attribute__ __used__     event_number  elc_event_usbfs_int    ip_id          ssp_ip_usb            идентификатор энумератор e_ssp_ip    ip_channel    0    ip_unit       ssp_ip_unit_usbfs      идентификатор энумератор e_ssp_ip_unit                                             usb    ip_signal     ssp_signal_usb_int     идентификатор энумератор e_ssp_signal    pp_ctrl       gp_ctrl_usb_fs_0_int   ссылка объявлять ранее переменный содержащю                                             указатель управляющий информация драйвер  далее начинаться интересный командный файл линкер вид icf наш случай r7fs5d97e3a01cfpicf  определяться такой именованный секция define block vect_info          ro section vector_info   keep                            section    vector         place at start of vect_region   ro section vectors         place in vect_region            ro section vector        place at start of flash_region  block vect_info              секция vectors предназначать размещение стандартный вектор ядро arm reset systick секция  vector  быть размещать адрес переход обработчик остальной прерывание который пример высоко туда попадать переменный  g_vector_usb_fs_0_int  указывать обработчик usbfs_int_isr секция  vector_info  попадать переменный  g_vector_info_u",
    "tags": [
        "azure rtos",
        "usbx",
        "synergy",
        "embedded",
        "netx duo",
        "filex"
    ]
}