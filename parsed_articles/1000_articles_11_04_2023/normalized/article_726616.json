{
    "article_id": "726616",
    "article_name": "Оптимизируем NiFi Flow. Настройка Load Balancing, подходы к Scheduling и выбор метода merge",
    "content": "использовать свой работа nifi наверняка задумываться оптимизация делать пост поделиться свой наработка область настройка nifi благодаря который получать позитивный результат улучшать работа наш собственный сервис конкретно речь пойти выбор стратегия балансировка нагрузка нод кластер load balancing настройка работа процессор nifi рамка один нод concurrent tasks run duration также делать косяк merge record интересно нырять кат давать обсуждать хороший сделать nifi звать рустем работать датаинженер леруа мерлен использовать свой работа nifi очень хотеться оптимизировать самый очевидный вариант  задействовать нод кластер nifi производить вычисление параллельно значит  задача нужно балансировать параметр load balancing отвечать распределение данные flow files доступный нод nifi кластер важно понимать nifi распределение данные происходить автоматически этот настройка оставаться совесть разработчик система предусматривать 4 стратегия load balancing do not balance   делать обрабатывать данные тот нод кластер изначально попадать partition by attribute   распределять данные значение выбирать flow file attribute файл одинаковый значение атрибут гарантированный распределяться один нод round robin   распределение flowфайлов  равномерно  все нод single node   файл ехать один нод какой именно неизвестно использовать load balancing иметь смысл случай накладной расход распределение данные оказываться сильно низкий выигрыш последующий параллельный обработка например селектит чтото бд primary node nifi затем хотеть както трансформировать данные параллельно кластер использовать балансировка такой случай хороший идея поделиться свой опыт балансировка вопервых сразу сказать использовать метод round robin именно быть рассматривать round robin применяться часто просто равномерно раскидывать данный узел эффективный параллельный обработка задумываться какой атрибут направлять далее пример быть рассматривать кластер nifi 3х нод давать посмотреть процесс наглядный пример  процессим сообщение кафка скриншот видеть flow  раздваивать поток каждый ветвь который делать одинаковый действие данные сообщение kafka происходить какаято трансформация идти merging балансировка выставляться очередь нужно открывать настройка очередь нижний левый часть диалоговый окно выбирать метод балансировка кружочек первый очередь правый часть flow означать очередь устанавливать балансировка данные попадать очередь перераспределяться весь нод кластер равномерно выбирать round robin давать подготовить данные наш тест собирать первый очередь каждый ветвь flow обращать внимание момент работа flow попадание данные очередь балансировка кружок краситься синий цвет это являться индикатор данные данный момент распределяться нод скриншот ниже видно очередь слева переполняться справа причина устанавливать балансировка nifi раскидывать данные 3 разный очередь каждый нод  балансировка данные итак запускать flow целиком проверять действительно данный сбалансировать сторона обрабатываться быстро оно происходить  сравнение round robin not balanced сразу поделиться свой опыт  ставить балансировка каждый очередь это показываться логичный самый дело происходить ненужный перераспределение flowфайлы распределять нод соответственно далеко быть любой случай обрабатываться этот нод поэтому последующий очередь нужно убирать балансировка  вначале round robin далеко do not balance брать данные kafka поддерживать queuing semantics поэтому чтение данный nifi kafka существовать поддержка загрузка данный партиция кафка нод nifi принудительный установка load balancing результат данные мочь попадать nifi распределенный нод такойже финт проворачивать сдругой очередь jms queues amazon sqs mqtt это работать количество партиция должно равный количество нод кластер оставаться целочисленнократный  3 9 например наш случай иметься 3 нод 5 партиция это значит балансировка нормальный несмотря дружба nifi kafka именно поэтому балансировка метод round robin давать тот результат который видеть высоко нюанс другой источник брать данные например google cloud storage какойто иной файловый система никакой встроенный совместимость получение данные браться листинг процессор list далее идти процессор fetch листинг делаться primaryноде иначе дублирование такой задача желание поиграть балансировка также закономерный появляться процессим файл gcp сначала показываться балансировка делать прямо fetch это хороший вариант этап fetch извлекать fs данные случай приходиться потратить ресурс распределение выгружать данные эталонный вариант использование балансировка чтение различный файловый система   правильно поставлять балансировка этап листинг очень мало данные суть мы потребоваться лишь распределять название файл праймарь нод остальной процессор fetch работать параллельно использовать свой кусок листинг каждый нод оптимально использовать ресурс быть голословный проверять практика какойто смысл балансировка  round robin vs not balanced gcp запускать оба ветка сразу становиться видно сбалансированный сторона обгонять несбалансированный слева обрабатывать половина файл справа  делать вывод нужно стараться балансировать меньший объем данные это возможный например листинг путь fs список дата иной сиквенс рано ставить балансировка процессор выполняться параллельно нужно повторять каждый очередь иначе эффект обратный scheduling тонкость давать нырнуть немного глубоко nifi оптимизировать уровень кластер уровень один нод предусматривать несколько параметр timerdriven thread pool   это настройка nifi определять максимальный количество одновременно работать процессор треды процессор один нод рекомендовать значение  уровень 24 раз реальный количество ядро cpu concurrent tasks   параметр определять количество использовать поток процессор n нод параметр процессор concurrent task устанавливать значение m максимально возможный число поток процессор  nm execution   параметр процессор определять какой нод кластер запускаться нод primary run duration   очень интересный параметр процессор определять долго должный работать момент запуск планировщик 0 ms lower latency  2000 ms higher throughput уровень общий  concurrent tasks  кластер определяться параметр maximum timer driven thread count конфигурация параметр стоить начинать 2хcpu затем медленно увеличивать необходимость следить утилизация ресурсы кластер посмотреть значение параметр controller settings мониторять утилизация cpu system diagnostics значение актуальный течение минута run duration очень полезный например лететь микробатч собираться батч крупный обрабатываться целиком приводить пример  запускать генерация файл  микробатчинг flow видно очередь разбухать мы это нравиться хотеть чтото это сделать казаться логичный увеличивать количество треды ставить 2 скрин видно это помогать увеличивать далеко мы это рано поздно помогать возникать проблема дефицит ресурс поэтому решение раздувание количество треды выглядеть оставлять concurrent tasks1 вместо увеличивать run duration файл успевать пролететь ситуация изменяться посмотреть получаться очередь начинать рассасываться значит метод помогать простой вывод ситуация оптимизация nifi хитрый наращивание количество ресурс один задача делать merge record радовать вопрос который просто мочь сказать речь идти nifi  это проблема merge record мочь давать 100 объяснение феномен пользоваться merge record доставлять масса головной боль процессор точно склеивать файл батч нужный размер никакой игра параметр пора помогать допускать файл разный значение атрибут merge избавляться мелкий файл выход некоторый случай такой проблема приводить падение скорость дальнейший обработка файл изза большой количество наш случай  рамка nifi это сделать короче советовать переходить merge content который надежно merge record судя мой наблюдение ожидать склеивать файл батч нужный размер то merge content производительный нуждаться парсинг flowфайлов дальнейший слияние использовать merge content мочь хотя просто производительный  показывать это реальный пример flow происходить разветвление merge record merge co",
    "tags": [
        "data engineering",
        "open source",
        "apache nifi",
        "nifi"
    ]
}