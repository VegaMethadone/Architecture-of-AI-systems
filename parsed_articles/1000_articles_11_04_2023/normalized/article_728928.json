{
    "article_id": "728928",
    "article_name": "Чем новее, тем лучше: как мы с GSON на Kotlinx.Serialization переезжали",
    "content": "привет хабр андрей мещеряк androidразработчик команда рост тинькофф инвестиция инвест стараться пробовать новое поддерживать современный стек технология обходить сторона библиотека kotlinxserialization который пользоваться удивлять малый количество русскоязычный публикация kotlinxserialization решать поделиться опыт инвест миграция gson kotlinx рассказывать подводный камень неочевидный момент использование проводить сравнение работа этот библиотека такой kotlinxserialization хороший kotlinx serialization  мультиплатформенный мультиформатный библиотека сериализация написать jetbrains специально kotlin состоять плагин компилятор coreбиблиотеки набор вспомогательный библиотека поддерживать различный протокол сериализация данные   поддержка протокол kotlinx serialization возможный благодаря разделение процесс сериализация этап   преобразование объект последовательность примитив  кодирование получать последовательность согласно указывать формат  реализовать логика репрезентация объект примитивный тип применять разный формат построение конечный результат инстанс работа наиболее популярный формат данные поставляться вместе библиотека процесс сериализация объект kotlinxserialization kotlinxserialization работать основа кодогенерация время компиляция каждый класс помечать аннотация serializable  генерироваться сериализатор  который помещаться companion object класс плагин компилятор смотреть класс аннотировать serializable говорить ide существованиинесуществование сериализатор класс генерация это помогать избегать ошибка добавление несериализовать поле сериализовать класс инвест сериализация использоваться формат json поэтому далеко быть говорить немой внедрение kotlinxserialization больший часть использовать библиотека gson основной недостаток который  использование рефлексия gson создание объект использовать unsafeallocator выделять память объект заполнять поле значение null затем поле перезаписываться исходить входной данные неполученный данный просто игнорироваться рантайм происходить nullpointerexception интересный факт kotlinxserialization основывать рефлексия использовать доступ  объектамкомпаньон   сгенерировать сериализатор главное преимущество kotlinxserialization  полный совместимость kotlin это подразумевать использование система тип kotlin поддержка nonnullable тип дефолтный значение поле отличие gson kotlinxserialization создавать объект класс десериализация путем вызов конструктор исключать ошибка использование получать объект фич реализовать помощь gson приходиться писать кастомный typeadapter усложнять процесс разработка целое ухудшать изящность код выделять обширный система исключение kotlinxserialization gson один jsonparseexception позволять детально разбираться причина возникать ошибка то  версия 140 часть иерархия исключение становиться публичный  большинство случай kotlinxserialization простой использование удобный разработчик кейс обходиться дополнительный логика например библиотечный класс приходиться писать собственный сериализатор переход kotlinxserialization кейс миграция первый шаг миграция сделать середина 2020 год сначала kotlinxserialization заводить наш экспериментальный приложение опробовать нестандартный случай применение  сериализация enum sealedклассов дженерик библиотечный класс начинать переход основный приложение добавлять необходимый работа провайда объект kotlinx json который отвечать кодирование получать сериализатор последовательность примитив формат json содержать принятый проект конфигурация собственный сериализатор enum обработка дефолтный значение основной сериализатор часто использовать библиотечный класс обертка gradleплагином упрощать подключение библиотека модуль отключать предупреждение компилятор  requiresoptinexperimentalserializationapi  правило r8proguard поставляться библиотека начинать версия 150 lintправила сериализовать класс большой штат разработчик правило облегчать контроль соблюдение подход принимать проект написание новый фич начинать использовать kotlinxserialization попутно переводить старый работа firebase remote config переводить kotlinxserialization сначала код писать вручную добавление поддержка kotlinxserialization openapi generator новый фич больший часть код становиться генерировать автоматически исправлять мелочь рамка принимать проект соглашение кейс миграция kotlin nullableтипы  стандартный конфигурация kotlinx json характерный поведение опциональность property точка зрение язык отличаться опциональность точка зрение десериализатор поэтому nullable properties необходимо добавлять null default value default value присвоение значение null возможно конкретный указание приходить json  name null  отсутствие поле name ответ приводить jsondecodingexception проблема решать флаг конфигурация  explicitnulls   false стандартный конфигурация значение true создание инстанс json флаг позволять игнорировать отсутствие поле ответ nullable properties ситуация контракт бэкенд устанавливать четкий правило опциональность значение поле какоето свойство зашивать реализация gson обязательный оказываться необязательный приходить определенный условие gson приводить ошибка этап парсинг json обращение свойство происходить оно проинициализировать миграция kotlinxserialization это приводить непредвиденный ошибка изза обязательный соблюдение контракт этап десериализация важно аккуратный этот момент обработка ошибка десериализация enum  проект стоять место  добавляться новый фич старый версия приложение также нужно поддерживать мочь уверенный enum быть содержать набор значение сам начало например enum class bonus  a b unknown   class testinstance val bonus bonus  бэкенд прийти другой значение попытка десериализация testinstance приводить jsondecodingexception решать проблема указывать создание инстанс json флаг конфигурация  coerceinputvalues   true который отвечать поддержка обработка  некорректный значение  добавлять дефолтное значение enumсвойству class testinstance val bonus bonus  bonusunknown  такой ситуация обрабатываться стандартный средство библиотека возникать необходимость получать список enum kotlinxserialization иметь встроенный механизм объявление дефолтный значение class testinstance val bonuses listbonus   новый неизвестный значение bonus приводить ошибка десериализация смочь получать testinstance вообще гибкость kotlinxserialization позволять любой класс реализовывать собственный логика сериализация хватать стандартный средство библиотека предоставлять нужный класс реализация интерфейс kserializer serializablewith  bonusenumserializerclass enum class bonus  a b unknown   class bonusenumserializer     private val fallback bonus  null   kserializerbonus       val descriptor serialdescriptor          primitiveserialdescriptor             bonusclassjavacanonicalname             primitivekindstring               fun serializeencoder encoder value bonus        encoderencodestringvaluename        fun deserializedecoder decoder bonus          return decoderdecodejsonelementjsonprimitivecontent         let  toenumit    fun toenumvalue string bonus      return bonusclassjavaenumconstants         firstornull  itname  value           fallback       полный код сериализатор сериализатор состоять три часть функция serialize deserialize свойство descriptor функция отвечать преобразование объект поток примитив кодирование энкодер необходимый формат данные обратный процесс получение объект поток примитив descriptor описывать структура данные сериализовать класс который использоваться этап кодирование корректный репрезентация объект десериализация полиморфный структура данные  объект разный тип различаться значение какогото свойство содержать разный данные такой объект представлять вид полиморфный иерархия базовый классомродитель тип получать объект заранее неизвестный определяться рантайм среди наследник базовый класс десериализация использоваться polymorphicserializer самый простой вариант создание структура  sealedклассы стандартный имплементация полиморфный сериализатор искать входной данные поле type использ",
    "tags": [
        "kotlin",
        "android",
        "serialization",
        "benchmarking"
    ]
}