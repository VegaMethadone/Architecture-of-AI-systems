{
    "article_id": "720360",
    "article_name": "Продвинутый GraphQL со Spring Boot",
    "content": "статья узнавать использовать spring for graphql свой приложение spring boot spring for graphql  относительно новый проектверсия 10  выпускать несколько месяц назад релиз мы приходиться подключать сторонний библиотека упрощать реализация graphql приложение spring bootя описывать альтернативный решение свой предыдущий статьяхв следующий статья узнавать проект graphql java kickstartв статья увидеть создавать сложный запрос graphql помощь библиотека netflix dgs быть использовать очень похожий схема модель сущность этот два статья spring boot graphql исходный код хотеть попробовать сделать это самостоятельно мочь посмотреть исходный коддля нужно клонировать репозиторий githubзатем просто следовать мой инструкция вопервых должный переходить каталог sampleappspringgraphql наш пример spring boot предоставлять api база graphql подключаться база данные h2 памятион использовать spring data jpa качество слой взаимодействие база данныхесть сущность employee  department  organization каждый храниться отдельный таблицевота модель отношение начало работа spring forgraphql дополнение стандартный модуль spring boot мы необходимо включать следующий два зависимость dependency   groupidorgspringframeworkbootgroupid   artifactidspringbootstartergraphqlartifactid dependency dependency   groupidorgspringframeworkgraphqlgroupid   artifactidspringgraphqltestartifactid   scopetestscope dependency springgraphtest предоставлять дополнительный возможность построение модульный тестовстартер поставляться необходимый библиотека автоконфигурациейоднако включать интерфейс graphiqlчтобы включать должный устанавливать следующий свойство файл applicationyml  spring   graphql     graphiql       enabled true умолчание spring for graphql пытаться загружать файл схема каталог  srcmainresourcesgraphql искать файл расширение  graphqls  gqls  приводить схема graphql сущность department тип department  ссылаться другой тип organization  employee список сотрудник запрос поиск отдел отдел id один мутация добавление новый отдел type query     departments department    departmentid id department   type mutation     newdepartmentdepartment departmentinput department   input departmentinput     name string    organizationid int   type department     id id    name string    organization organization    employees employee  схема тип organization  очень похожаиз сложный вещь мы нужно обрабатывать соединение тип employee  department  extend type query     organizations organization    organizationid id organization   extend type mutation     neworganizationorganization organizationinput organization   input organizationinput     name string   type organization     id id    name string    employees employee    departments department  последний схема  тип employee отличие предыдущий схема определять тип отвечать обработка фильтрацииemployeefilter фильтровать зарплата должность возрастусуществовать также метод запрос обработка фильтрация  employeeswithfilter  extend type query    employees employee   employeeswithfilterfilter employeefilter employee   employeeid id employee   extend type mutation    newemployeeemployee employeeinput employee   input employeeinput    firstname string   lastname string   position string   salary int   age int   organizationid int   departmentid int   type employee    id id   firstname string   lastname string   position string   salary int   age int   department department   organization organization   input employeefilter    salary filterfield   age filterfield   position filterfield   input filterfield    operator string   value string  создание сущность держать зло использовать lombok реализация сущность вотсущность  employee  соответствовать тип  employee  определенный схема graphql entity data noargsconstructor allargsconstructor equalsandhashcodeonlyexplicitlyincluded  true public class employee    id   generatedvaluestrategy  generationtypeidentity   equalsandhashcodeinclude   private integer id   private string firstname   private string lastname   private string position   private int salary   private int age   manytoonefetch  fetchtypelazy   private department department   manytoonefetch  fetchtypelazy   private organization organization  создаваться сущность department  entity data allargsconstructor noargsconstructor equalsandhashcodeonlyexplicitlyincluded  true public class department    id   generatedvaluestrategy  generationtypeidentity   equalsandhashcodeinclude   private integer id   private string name   onetomanymappedby  department   private setemployee employees   manytoonefetch  fetchtypelazy   private organization organization  мочь взглядывать сущность organization  entity data allargsconstructor noargsconstructor equalsandhashcodeonlyexplicitlyincluded  true public class organization    id   generatedvaluestrategy  generationtypeidentity   equalsandhashcodeinclude   private integer id   private string name   onetomanymappedby  organization   private setdepartment departments   onetomanymappedby  organization   private setemployee employees  использование graphql forspring spring boot spring forgraphql предоставлять модель программирование основа аннотация использовать известный паттерн controller также адаптировать библиотека querydsl использовать вместе spring data jpaзатем мочь использовать свой репозиторий spring data аннотировать помощь graphqlrepository статья быть использовать стандартный jpa criteria api генерация сложный запрос фильтр объединение начинать наш первый контроллерапо сравнение оба предыдущий статья netflix dgs graphql java kickstart быть хранить запрос мутация один классен нужно аннотировать метод запрос помощь querymapping  метод мутация помощь mutationmapping последний метод запрос  employeeswithfilter выполнять расширенный фильтрация основа динамический список поле передавать входной тип   employeefilter передавать входной параметр должный аннотировать аргумент метод помощь  argument  controller public class employeecontroller      departmentrepository departmentrepository    employeerepository employeerepository    organizationrepository organizationrepository     employeecontrollerdepartmentrepository departmentrepository                       employeerepository employeerepository                        organizationrepository organizationrepository        thisdepartmentrepository  departmentrepository       thisemployeerepository  employeerepository       thisorganizationrepository  organizationrepository         querymapping    public iterableemployee employees         return employeerepositoryfindall         querymapping    public employee employeeargument integer id         return employeerepositoryfindbyididorelsethrow         mutationmapping    public employee newemployeeargument employeeinput employee        department department  departmentrepository          findbyidemployeegetdepartmentidget       organization organization  organizationrepository          findbyidemployeegetorganizationidget       return employeerepositorysavenew employeenull employeegetfirstname employeegetlastname                 employeegetposition employeegetage employeegetsalary                 department organization         querymapping    public iterableemployee employeeswithfilter          argument employeefilter filter        specificationemployee spec  null       if filtergetsalary  null          spec  bysalaryfiltergetsalary       if filtergetage  null          spec  spec  null  byagefiltergetage  specandbyagefiltergetage       if filtergetposition  null          spec  spec  null  bypositionfiltergetposition                      specandbypositionfiltergetposition       if spec  null          return employeerepositoryfindallspec       else          return employeerepositoryfindall         private specificationemployee bysalaryfilterfield filterfield        return root query builder  filterfield          generatecriteriabuilder rootgetsalary         private specificationemployee byagefilterfield filterfield        return root query builder",
    "tags": [
        "spring",
        "graphql",
        "spring boot"
    ]
}