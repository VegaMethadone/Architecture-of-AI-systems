{
    "article_id": "725676",
    "article_name": "Принципы построения многомодульного Android-приложения и их применение в СберЗдоровье",
    "content": "все привет звать александр android разработчик сберздоровье статья чистый архитектура многомодульность очень многий компания готовый делиться свой опыт получать результат внедрение этот практика хотеть попробовать исправлять ситуация материал рассказывать принцип построение многомодульный приложение применять разработка мобильный приложение сберздоровье android это мы давать этот статья многомодульность спешить пролистывать описывать ниже принцип применять мобильный разработка разработка целое приступать чистый архитектура цель классический вариант архитектура приложение  это набор модуль связь они который обеспечивать функциональность практика мало собирать объединять компонент  предварительный проработка четкий иерархия зависимость организация взаимодействие такой разработка обреченный провал верить сказать это сотня разработчик который допускать подобный ошибка сталкиваться трудность поддержка масштабирование обновление свой софт  предупреждать любой трудность разработка приложение android другой система желательно придерживаться принцип чистый архитектура предлагать роберт мартин определение  чистый архитектура  постараться выделять наиболее значимый чистый архитектура   это набор верный решение организация который хотеться применять разный этап работа проект выбор структурный элемент интерфейс определение сценарий взаимодействие приложение цель чистый архитектура   снижать человеческий трудозатраты создание сопровождение система правильно организованный архитектура упрощать тестирование поддержка модификация разработка развертывание также обеспечивать независимость предшественник чистый архитектура рекомендация роберт мартина организация чистый архитектура основывать идея принцип прежний архитектурный построение который считать предшественник несколько hexagonal architecture гексагональный архитектура  также известный  архитектура порт адаптер  подразумевать создание слабо связанный компонент приложение который легко подключать программный среда помощь порт адаптер это делать компонент взаимозаменяемый любой уровень упрощать автоматизация тестирование onion architecture луковый архитектура  подразумевать разделение приложение уровень организация первый уровень который находиться центр  независимый зависеть второй второй  третий третий  четвертый далее  datacontextinteraction данные контекст взаимодействие  парадигма использовать программирование система взаимодействовать объект подразумевать улучшение читаемость объектноориентированный код также четкий разделение код быстрый изменение поведение система парадигма отделять данные контекст взаимодействие  boundarycontrolentity граница управление сущность  представлять себя подход объектный моделирование основывать трехфакторный представление класс правильно спроектировать иерархия пакет актер взаимодействовать пограничный объект boundary объектысущность entity мочь взаимодействовать управляющий объект control управляющий объект control мочь взаимодействовать объект любой тип основной преимущество подход bce являться группирование класс вид иерархический уровень это способствовать хороший понимание модель уменьшать сложность архитектура который основывать чистый архитектура общий признак  цель разделять программный обеспечение уровень каждый вариант бизнесправлять пользовательский системный интерфейс предусматривать отдельный уровень  желательно разделять компонента удобство понимание приложение представлять вид дом компонент  вид комната маленький часть целый разработка компонент  маленький сущность который развертывать состав система java kotlin  это jar файл android  aar модуль например наш приложение android маленький часть компонент  модуль  рассматривать принцип организация компонент забегать немного вперед  применять api impl подход который описывать статья  многомодульность androidприложений  материал также ссылка гитрепозиторий пример принцип построение компонент который нужно руководствоваться связанность компонент сочетаемость компонент разбирать подробно каждый связанность компонент определять принцип связанность компонент определять какой компонента относить иной класс это решение должно приниматься соответствие зарекомендовать принцип разработка уточнять зачастую подобный выбор зависеть контекст связанность компонент определять принцип rep release equivalence principle   принцип эквивалентность повторный использование выпуск принцип гласить класс модуль составлять компонент должный принадлежать связанный группа класс объединять компонент должный выпускаться вместе наш случай хороший пример являться core модуль который класс объединяться общий признак работа ресурс сеть далее ccp common closure principle   принцип согласованный изменение  подразумевать объединение класс который понадобиться изменять один общий причина класс тесно связанный физически концептуальный настолько быть меняться вместе должный принадлежать один компонента crp common reuse principle   принцип совместный повторный использование  принцип помогать определять какой класс должный включаться компонент главный концепция  вынуждать пользователь компонент зависеть ненужный crp  обобщенный версия принцип разделение интерфейс isp solid который советовать создавать зависимость интерфейс метод который использовать согласно принцип crp стоить создавать зависимость компонент который иметь неиспользуемый класс интерфейс целое  создавать зависимость чеголибо неиспользуемый  примечательно принцип противоречить друг друг принцип  rep   ccp   включительный стремиться сделать ваш компонент крупный принцип  crp  наоборот  исключительный стремиться сделать ваш компонент мелко  отсюда появляться диаграмма противоречие принцип связность который показывать влияние друг друг ребро диаграмма описывать цена нарушение принцип противоположный вершина  диаграмма позволять находить золотой середина который отвечать текущий нужда разработчик нужно помнить   искать баланс исходить потребность приложение сочетаемость компонент разбираться сочетаемость компонент интересно раскидывать класс логический связь сочетаемость компонент  это взаимоотношение они понимать это такой разбирать принцип adp acyclic dependency principle   принцип ацикличность зависимость  согласно принцип цикл графа зависимость недопустимый нужно рассматривать схема ниже схема видно циклический зависимость  featuretwo  использовать  featureone   featureone  использовать  featurethree   featurethree  использовать  featuretwo  обеспечивать ацикличность схема нужно каждый компонент мочь работать независимо какойто компонент должный зависеть другой необходимо разрывать цикл необходимо создавать новый модуль использовать принцип dip инверсия зависимость sdp stable dependencies principle     принцип устойчивый зависимость   согласно sdp зависимость должный направлять сторона устойчивость устойчивый компонент считаться который зависеть другой компонент изменение требоваться усилие согласование  компонент независимый схема видно устойчивый компонент x стрелочка показывать зависеть другой компонент х устойчивый компонент например наш androidприложении устойчивый считаться  core компонент   случай неустойчивый компонент наоборот  неустойчивый компонент y считать это  feature компонент  зависеть множество другой y очень неустойчивый компонент важно отмечать компонента должный устойчивый  компонент система устойчивый невозможно изменять sap stable abstraction principle   принцип устойчивый абстракция согласно sap устойчивость компонент пропорциональный абстракция sap упоминать ранее sdp вместе соответствовать принцип инверсия зависимость dip компонент принцип sdp требовать зависимость направлять сторона устойчивость sap  устойчивость подразумевать абстрактность наш случай модуль  featureoneapi  полностью соответствовать два принцип устойчивый кто зависеть абстрактный немой никакой реализация пример упаковка компонент функционал приложение сберздоровье наш случай схема содержать неустойчивый фич модуль featureoneimpl зависеть два устойчивый  core модуль легковесный featureoneapi который нап",
    "tags": [
        "android",
        "архитектура",
        "многомодульность",
        "solid"
    ]
}