{
    "article_id": "728830",
    "article_name": "Как на самом деле работает Async/Await в C# (Часть 3)",
    "content": "оригинальный статья довольно объемный взять смелость разбивать несколько независимый часть легкое перевод восприятие disclaimer  являться профессиональный переводчик перевод подготовить скоро коллега быть благодарный любой исправление помощь перевод статья очень интересный давать сделать она доступный русский язык часть 1 самый начало часть 2 асинхронный модель основа событие eap часть 3 появление tasks асинхронный модель основа задача tap valuetasks итератор c помощь asyncawait внутренний устройство преобразование компилятор synchronizationcontext configureawait поле state machine заключение появление tasks асинхронный модель основа задача tap net framework 40 появляться тип systemthreadingtaskstask свой суть task  это просто структура данный который представлять себя возможный завершение некоторый асинхронный операция другой платформа аналогичный тип называться  promise future task создаваться представление некоторый операция затем операция который логически представлять завершаться результат сохраняться task достаточно просто ключевой особенность task который делать гораздо полезный iasyncresult заключаться встраивать понятие продолжение этот особенность означать мочь подходить любой задача попросить асинхронно уведомлять завершение причем сам задача обрабатывать синхронизация обеспечивать вызов продолжение независимо завершаться задача завершаться завершаться одновременно запрос уведомление почему это важный вспомнить наш обсуждение старый шаблон apm два основной проблема должный реализовывать собственный реализация iasyncresult каждый операция встраивать реализация iasyncresult который просто использовать свой нужда должный знать вызов метод begin хотеть сделать завершение это делать реализация комбинатор другой обобщенный процедура потребление составление произвольный асинхронный реализация весьма сложный задача  отличие task этот общий представление позволять подходить асинхронный операция инициировать операция предоставлять продолжение инициировать операция нужно предоставлять это продолжение метод который инициировать операция каждый иметь асинхронный операция производить task каждый потреблять асинхронный операция потреблять task связь они нужно делать особенный task становиться универсальный язык общение производитель потребитель асинхронный операция это изменять лицо net подробно поздно вместо погружаться сложный код task поступать попедагогически просто реализовывать простой версия это претендовать большой реализация лишь достаточно полный функциональность помогать понимать суть task который конец конец являться просто структура данные координировать подача прием сигнал завершение начинать несколько поле   class mytask      private bool _completed     private exception _error     private actionmytask _continuation     private executioncontext _ec       мы нужно поле знать завершаться задача _completed мы нужно поле хранение любой ошибка который приводить неудача задача _error также реализовывать общий mytasktresult также private tresult _result хранение успешный результат операция пока это очень похожий наш пользовательский реализация iasyncresult случайно самый главное  поле _continuation простой реализация поддерживать один продолжение достаточно пояснение настоящий task использоваться  поле object  который либо отдельный объект продолжение либо list объект продолжение это делегат который вызывать задача завершаться немного суть отмечаться один фундаментальный достижение task сравнение предыдущий модель возможность предоставлять работа продолжение обратный вызов операция инициировать мы нужный метод который позволять мы это сделать поэтому добавлять continuewith public void continuewithactionmytask action      lock this              if _completed                      threadpoolqueueuserworkitem_  actionthis                  else if _continuation is not null                      throw new invalidoperationexceptionunlike task this implementation only supports a single continuation                  else                      _continuation  action             _ec  executioncontextcapture                момент вызов continuewith задача помечать завершать continuewith просто ставить очередь выполнение делегат противный случай метод сохранять делегат продолжение поставлять очередь задача завершаться также сохранять нечто называть executioncontext затем использовать это последующий вызов делегат пока беспокоиться часть вернуться достаточно просто затем мы нужно иметь возможность помечать mytask завершать означать асинхронный операция который представлять завершаться реализовывать метод отметка успешный завершение setresult отметка завершение ошибка setexception public void setresult  completenull  public void setexceptionexception error  completeerror  private void completeexception error      lock this              if _completed                      throw new invalidoperationexceptionalready completed                   _error  error         _completed  true          if _continuation is not null                      threadpoolqueueuserworkitem_                               if _ec is not null                                      executioncontextrun_ec _  _continuationthis null                                  else                                      _continuationthis                                              сохранять любой ошибка помечать задача выполнять затем ранее зарегистрировать продолжение ставить очередь вызов мы нужный способ распространять любой исключение который мочь происходить задача это типовой mytask вернуть _result поддержка определенный сценарий также разрешать этот метод блокировать ожидание завершение задача мочь реализовать термин continuewith продолжение просто сигнализировать manualreseteventslim который вызывать сторона затем блокировать ожидание завершение public void wait      manualreseteventslim mres  null     lock this              if _completed                      mres  new manualreseteventslim             continuewith_  mresset                    mreswait     if _error is not null              exceptiondispatchinfothrow_error       это суть настоящий task намного сложно гораздо эффективный реализация поддержка любой количество продолжение множество настройка должный вести например должный продолжение ставиться очередь это сделать должный вызываться синхронно часть завершение задача возможность хранить несколько исключение один специальный знание отмена тонна вспомогательный метод выполнение общий операция например taskrun который создавать task представление делегат поставлять очередь вызов пуля поток далее весь никакой магия свой основа это просто видеть также мочь замечать мой простой mytask публичный метод setresultsetexception непосредственно время task самый дело task такой метод просто внутренний тип systemthreadingtaskstaskcompletionsource служащий отдельный производитель задача завершение это сделать технический необходимость способ удерживать метод завершение вещь предназначать потребление мочь передавать задача беспокоиться завершать изпод ваш контроль сигнал завершение являться деталь реализация создавать задача также оставлять себя право завершать оставлять источник taskcompletionsource cancellationtoken cancellationtokensource работать аналогичный схема cancellationtoken  это просто структурный обертка cancellationtokensource предоставлять публичный доступный область связанный потребление сигнал отмена возможность создание который являться возможность ограниченный иметь доступ cancellationtokensource мочь реализовать комбинатор помощник mytask аналогичный предоставлять task хотеть простой mytaskwhenall пожалуйста public static mytask whenallmytask t1 mytask t2      var t  new mytask      int remaining  2     exception e  null      actionmytask continuation  completed               e  completed_error  just store a single exception for simplicity         if interlockeddecrementref remaining  0                      if e is not null tsetexceptione             else tsetresult                    t1co",
    "tags": [
        ".net",
        "c#",
        "асинхронное программирование"
    ]
}