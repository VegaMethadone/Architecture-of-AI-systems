{
    "article_id": "726222",
    "article_name": "Пора забывать GridSearch — встречайте ProgressiveGridSearch. Фракталы в ML, постепенно увеличиваем разрешение",
    "content": "здравствовать звать николай стрекопытов придумывать подбирать гиперпараметр бескомпромиссный gridsearchа нужно лишь изменять порядок вычисление это заявка обновление индустриальный стандарт  скоро смочь улучшать свой mlпайплайны замена несколько строчка код   сначала короче   разбирать проводить вычисление gridsearch progressivegridsearch первый перебирать возможный комбинация стандартный вложенный цикл нужно перебирать элемент матрица первый алгоритм сначала перебирать столбец первый строка приступать ко второй строка это просто брутфорс предлагать действовать разумный постепенно увеличивать разрешение вычисление сначала получать представление функция крупный мазок все диапазон затем средний мазок далеко мелкий далее останов подход давать возможность адекватно приближать функция невычисленный узел   качество функция взять изображение визуально процесс выглядеть   изображение усреднять лицо взять  httpshabrcomrucompanypiterblog308720 пока ясно метод аналог optuna использовать генеративный алгоритм фильм ужас гифок хорошо заливать поздно анимация процесс видно пока gridsearch проходить один строчка progressivegridsearch получать масса информация ландшафт функция это размерность 2 порядок разрешение 4 отрыв расти прямо пропорциональный размерность порядок разрешение видно второй анимация размерность тот 2 порядок разрешение 7 подробный решение получаться красивый известно математический результат бывать либо красивый либо неправильный сразу предупреждать речь далеко пойти многокритериальный оптимизация гиперкуб рекурсия который совокупность порождать фрактал поэтому текст спойлер предназначать смелый дух полный сила остальной мочь поддерживать поставлять звездочка репозиторий посмотреть картинка переходить заключение математический сторона  идея строиться получать представление ландшафт функция сначала крупный мазок затем средний затем мелкий далее заданный мелкость пока срабатывать критерий останов подход давать инвариантность относительно стартовый точка поиск это огромный преимущество математически задача поставлять следующий узелкандидат выбираться далеко располагать предыдущий узел первый узел разумно выбирать вершина гиперкуб отрезкаквадратакуба 1d2d3d являться наш диапазон вариант эквивалентный формула  решение многокритериальный оптимизационный задача оказываться неожиданно красивый легко вычислять рассматривать одномерный случай качество  взять квадрат евклидов норма точкирешение оказываться середина отрезок граница который последовательность внутри отрезок один точка последовательность график xxl2 k3 k5 график видно точка действительно являться паретооптимальный изменение координата увеличивать функционал уменьшать хотя это вариант обобщение понятие экстремум многомерный критерий больший наглядность рассматривать порядок построение кривой расстояние depth  4 узел 16 красный верхний график показывать узел который вычисляться данный итерация синий остальной нижний график красный показывать узел который производить вычисление синий тот который результат обобщаться пмерный случай появляться гиперкуб фрактал точкамирешение быть являться вершина гиперкуб каждый гиперкуб делиться   вдвое меньший сторона такой образ возникать последовательность вложенный друг друг гиперкуб образующая фрактал вершина который являться решение задача оптимальный упорядочивание желание закономерность увидеть одномерный случай двумерный сильно заметный красный ужевычисленный узел белый вычислять поскольку речь идти поиск сетка сводить метод целочисленный непрерывный это давать свой вклад 1 это универсализировать метод вместо точка просто оперировать индекс автомат получать целочисленный непрерывный метод кастомизировать распределение шаг сетка 2 паретооптимальный решение целочисленный задача максимально далекий вещественный число 0 15 внутри отрезок это 75 самый далекий целый  7 8 особенность нужно учитывать иначе быть коллизия повторный вычисление  приступать программирование оказываться алгоритм оптимальный упорядочивание узел суть являться построение dimарного дерево заданный глубина обход узел поэтажный мы нужно класс  hypercube progressivegridsearch import numpy as np from typing import callable list union   это просто контейнер узловкандидат который давать потомок  лежать внутри гиперкуб являться контейнер узловкандидат class hypercube     def __init__self resolution_degree int start_point nparray parentnone         selfresolution_degree  resolution_degree         selfstart_indexes  start_point         selfparent  parent          selfside  2  resolution_degree  1         selfdim  selfstart_indexesshape0          selfnode_order_graph  none         selfset_node_order_graph      def set_node_order_graphself         selfnode_order_graph                    schema_string  00  strselfdim  b          for node_number in range2  selfdim             binary_mask  schema_stringformatnode_number              point  nparrayselfstart_indexes              for index flag in enumeratebinary_mask                 if flag  1                     pointindex  selfside              selfnode_order_graphappendpoint      def splitself         for node in selfnode_order_graph             yield hypercuberesolution_degreeselfresolution_degree  1                             start_pointnparoundnode  selfstart_indexes  2astypeint                             parentself      def compute_curr_depthself         res  0         if selfparent is none             return res         else             parent  selfparent             while parent is not none                 res  1                 parent  parentparent              return res   class progressivegridsearch     def __init__self func callable params list stop_criterion callable max_resolution_degree int  10         selffunc  func         selfparams  params         selfstop_criterion  stop_criterion         selfmax_resolution_degree  max_resolution_degree          selfnumber_of_nodes  2  max_resolution_degree          selfdim  0         selfgrids            for param in selfparams             if typeparam is real                 selfdim  1                 grid  nplinspaceparamleft_boundary paramright_boundary numselfnumber_of_nodes                 selfgridsappendgrid             elif typeparam is integer                 selfdim  1                 grid  nparangeparamleft_boundary paramright_boundary                 selfgridsappendgrid          selfmask  npzerosselfnumber_of_nodes  selfdimastypebool         selfvalues  npfull_likeselfmask fill_valuenpnanastypefloat          selfnodes_queue  none         selfcurr_hypercube  none         selfnumber_of_functions_calls  none      def __iter__self         hypercube  hypercuberesolution_degreeselfmax_resolution_degree start_pointnpzerosselfdimastypeint          selfgenerator  curr_hcnode_order_graph for curr_hc in selfappend_generatorhypercube         selfnumber_of_functions_calls  0          selfnodes_queue  iter         return self      def __next__self         try             node_indexes  nextselfnodes_queue               это фильтрация коллизия             if selfmasktuplenode_indexesitem is true                 return nextself              node_point                for k index in enumeratenode_indexes                 node_pointappendselfgridskindex              node_point  nparraynode_point               это префильтрация коллизия             if selfcurr_hypercuberesolution_degree  selfmax_resolution_degree and selfcurr_hypercuberesolution_degree  1                 if npanynode_indexes  2  0 and npsumnode_indexes  2  0 and npsumnode_point  0                     return nextself                  b  node_indexes  selfcurr_hypercubestart_indexes                  if npanyb  2  0 and npallnode_indexes  0                     return nextself              selfmasktuplenode_indexes  true             selfnumber_of_functions_calls  1              return node_point node_indexes         except stopiteration             selfnodes_queue  iternextselfgenerator             return nextself      def append_generatorself h",
    "tags": [
        "сезон machine learning",
        "методы оптимизации",
        "нейронные сети",
        "машинное обучение",
        "подбор гиперпарметров"
    ]
}