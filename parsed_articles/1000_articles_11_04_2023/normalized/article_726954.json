{
    "article_id": "726954",
    "article_name": "Приложения в Kubernetes: быстрый запуск Kafka с KRaft",
    "content": "автор статья рустем галиев ibm senior devops engineer  integration architect   привет хабр сегодня возможность устанавливать kafka один самый простой конфигурация этот установка оптимизировать производственный среда идеально подходить быстрый локальный разработка apache kafka  это фреймворк реализовать программный шина использовать потоковый обработка это программный платформа открытый исходный код разрабатывать apache software foundation написать scala java проект направлять предоставление унифицировать платформа высокий пропускной способность малый задержка обработка поток данные реальный время иной слово распределенный система обмен сообщение серверный приложение режим реальный время этот установка kafka использовать проект ранний версия название apache kafka raft kraft это проект который устранять зависимость zookeeper сперва мы полезно иметь реестр этап билд пушить деплоймент необходимость передавать частный образ интернет вместо сохранять локальный реестр устанавливать реестр существовать множество вариант создание реестр образ контейнер предпочитать чистый решение kubernetes поэтому устанавливать реестр docker registry helm chart добавлять репозиторий установка диаграмма  helm  helm repo add twuni httpshelmtwunio  helm repo list устанавливать чарт частный реестр контейнер helm install registry twunidockerregistry    version 210    namespace kubesystem    set servicetypenodeport    set servicenodeport31500 реестр доступный услуга вывести kubectl get service namespace kubesystem забывать назначать переменный среда общий расположение реестр export registry4f809e0c89d3406b8e4ccc59da3d2223288724787731500kira01environmentsvmoopscom пройти несколько секунда прежде развертывание реестр сообщать оно доступно kubectl get deployments registrydockerregistry namespace kubesystem реестр становиться доступный проверять содержимое пустой реестр curl registryv2_catalog  jq c увидеть ответ реестр ожидать пустой массив  repositories запускать кафка брокер kafka  это распределенный система который реализовать основной функция система публикацииподписка каждый хост кластер kafka работать сервер называть брокер который хранить сообщение отправлять топика обслуживать запрос консьюмер настоящий время kafka использовать zookeeper отслеживание состояние брокер кластер kafka ведение список топик сообщение kafka сегодня быть использовать ранний доступ возможно будущий реализация kafka использовать kraft вместо полагаться zookeeper управление метаданные реализовать ядро kafka вид набор контроллер кворум zookeeper основывать алгоритм консенсус raft поэтому реализация являться надежный отказоустойчивый обещать улучшать производительность безопасность kafka конфигурация kraft также подходить быстрый разработка настоящий время официальный образ контейнер поддерживать реализация kraft однако ibm предоставлять файл   dockerfile   entrypointsh  который загружать домашний каталог наш вм dockerfile from openjdk11  env kafka_version332 env scala_version213 env kafka_homeoptkafka env pathpathkafka_homebin  label namekafka versionkafka_version  run wget o tmpkafka_scala_versionkafka_versiontgz httpsdownloadsapacheorgkafkakafka_versionkafka_scala_versionkafka_versiontgz    tar xfz tmpkafka_scala_versionkafka_versiontgz c opt    rm tmpkafka_scala_versionkafka_versiontgz    ln s optkafka_scala_versionkafka_version kafka_home    rm rf tmpkafka_scala_versionkafka_versiontgz  copy entrypointsh  run chmod x entrypointsh entrypoint entrypointsh entrypointsh node_idhostname6 listenersplaintext9092controller9093 advertised_listenersplaintextkafkanode_idservicenamespacesvcclusterlocal9092  controller_quorum_voters for i in  seq 0 replicas do if  i  replicas  then     controller_quorum_voterscontroller_quorum_votersikafkaiservicenamespacesvcclusterlocal9093 else     controller_quorum_voterscontroller_quorum_voters1 fi done  mkdir p share_dirnode_id  if   f share_dircluster_id  node_id  0  then cluster_idkafkastoragesh randomuuid echo cluster_id  share_dircluster_id else cluster_idcat share_dircluster_id fi  sed e snodeidnodeidnode_id  e scontrollerquorumvoterscontrollerquorumvoterscontroller_quorum_voters  e slistenerslistenerslisteners  e sadvertisedlistenersadvertisedlistenersadvertised_listeners  e slogdirslogdirsshare_dirnode_id  optkafkaconfigkraftserverproperties  serverpropertiesupdated   mv serverpropertiesupdated optkafkaconfigkraftserverproperties  kafkastoragesh format t cluster_id c optkafkaconfigkraftserverproperties  exec kafkaserverstartsh optkafkaconfigkraftserverproperties этот два файл создавать надежный образ kafka основа kraft создавать образ kraft docker build t registrykafkakraft  создание образ контейнер занимать несколько минута отправлять образ kraft реестр образ контейнер локальный кластер kubernetes который настраивать ранее docker push registrykafkakraft ibm также предоставлять манифест  statefulset  запуск kraft kubernetes  kafkayaml  apiversion v1 kind namespace metadata   name kafkakraft  apiversion v1 kind persistentvolume metadata   name kafkapvvolume   labels type local spec   storageclassname manual   capacity storage 10gi   accessmodes  readwriteonce   hostpath path mntdata  apiversion v1 kind persistentvolumeclaim metadata   name kafkapvclaim   namespace kafkakraft spec   storageclassname manual   accessmodes  readwriteonce   resources requests   storage 3gi  apiversion v1 kind service metadata   name kafkasvc   labels app kafkaapp   namespace kafkakraft spec   clusterip none   ports  name 9092   port 9092   protocol tcp   targetport 9092   selector app kafkaapp  apiversion appsv1 kind statefulset metadata   name kafka   labels app kafkaapp   namespace kafkakraft spec   servicename kafkasvc   replicas 3   selector matchlabels   app kafkaapp   template metadata   labels     app kafkaapp spec   volumes      name kafkastorage       persistentvolumeclaim         claimname kafkapvclaim   containers      name kafkacontainer       image registrykafkakraft       ports          containerport 9092          containerport 9093       env          name replicas           value 3          name service           value kafkasvc          name namespace           value kafkakraft          name share_dir           value mntkafka       volumemounts          name kafkastorage           mountpath mntkafka манифест  это объявление  persistentvolume  хранение данные kafka создавать локальный директория mkdir mntkafka иметь kraft реестр образ контейнер мочь запускать kraft envsubst  kafkayaml  kubectl apply f  envsubst  использоваться ввод значение  registry yaml  kraft устанавливаться пространство имя kafkakraft переключать контекст этот пространство имя последующий команда предполагать контекст kubectl config setcontext current namespacekafkakraft проверять статус установка kubectl get servicesstatefulsetspodspvpvc хотя первый брокер kafka запускать проверять лог kubectl logs kafka0 видеть ошибка лог такой  error connecting to node  ошибка подключение узел настоящий время являться нормальный активность поскольку брокер пытаться соединяться друг друг запуск несколько секунда под быть сообщать запускать  statefulset  сообщать готовность 33 kubectl get servicesstatefulsetspods  grep z running33kafkasvc9092 обращать внимание служба kafka доступный кластер адрес  kafkasvc9092  завершение хотеть приглашать бесплатный урок  мой коллега otus рассказывать устраивать мониторинг кластер компонент приложение кластер изучать различный подход мониторинг подход мониторинг приложение компонент кластер основной метрика kubernetes также узнавать кластеризациюфедерация prometheus дополнительный хранилище метрика prometheus victoria metrics thanos cortex зарегистрироваться бесплатный вебинар",
    "tags": [
        "kafka",
        "kraft",
        "kubernetes"
    ]
}