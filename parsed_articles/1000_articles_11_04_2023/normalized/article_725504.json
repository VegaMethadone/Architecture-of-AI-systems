{
    "article_id": "725504",
    "article_name": "JavaScript: два интересных сниппета",
    "content": "hello world   небольшой заметка хотеть поделиться вы два сниппет который показываться очень интересный первый сниппет представлять себя пример реализация простой реактивность signal второй  способ предотвращение несогласованность данный результат состояние гонка race condition первый конструкция использоваться  solidjs  некоторый дополнительный оптимизация второй  заимствовать один рабочий проект   интересно просить кат   начинать сигнал   взглядывать следующий код   let currentlistener  function createsignalinitialvalue    let value  initialvalue   const subscribers  new set    const read         if currentlistener        subscribersaddcurrentlistener          return value       const write  newvalue       value  newvalue     subscribersforeachfn  fn       return read write   function createeffectcallback    currentlistener  callback   callback   currentlistener  null    функция  createsignal  создавать реактивный значение функция  createeffect  принимать коллбэк который выполняться изменение значение   пример использование данный сниппет     const count setcount  createsignal0  const button  documentqueryselectorbutton  createeffect     buttontextcontent  count   buttonaddeventlistenerclick      setcountcount  1    нажатие кнопка значение счетчик увеличиваться единица это приводить обновление текст кнопка   такой образ код работать ожидаться почему это работать      давать разбираться   const count setcount  createsignal0   count   setcount   это соответственно функция чтение запись  read   write  значение переменная  value  жить замыкание closure возвращать  createsignal  значение  value  становиться  0    createeffect     buttontextcontent  count    это пожалуй самый хитрый строчка код     createeffect  записывать передавать коллбэк переменный  currentlistener    createeffect  запускать коллбэк   buttontextcontent  count  выполняться справа налево   count   read  добавлять  currentlistener  набор  subscribers  делать коллбэк подписчик   count  возвращать значение  value    значение  value  становиться текст кнопка    createeffect  очищать  currentlistener      buttonaddeventlistenerclick      setcountcount  1    интересовать следующий строка   setcountcount  1   также выполняться справа налево     count   read  возвращать значение  value  данный этап  currentlistener  null  поэтому никакой коллбэк  subscribers  добавляться   setcount1  1   write2  обновлять  value  значение  2    setcount  запускать коллбэк содержаться  subscribers      buttontextcontent  count       ловкость рука никакой мошенничество      поговорить несогласованность данный результат состояние гонка   начинать общий описание проблема     один страница иметься возможность модификация данные храниться сервер несколько способ   каждый модификация сервер запрашиваться свежий данные выполняться одинаковый запрос   получение ответ каждый запрос обновляться локальный состояние данные храниться память клиент который использоваться рендеринг компонент   модификация соответственно запрос мочь выполняться очень быстро   предполагать выполняться 2 модификация второй секунда первый   сервер отправляться 2 запрос   первый обрабатываться сервер 3 секунда второй  1 секунда   ответ второй запрос приходить 2 1  1 секунда обновление локальный состояние  повторный рендеринг ответ первый запрос  3 0  3 секунда обновление локальный состояние  повторный рендеринг   пользователь видеть состояние актуальный выполнение первый модификация sic   данный клиент согласовывать совпадать данные сервер     набросать абстрактный пример   разметка   div   button2button   button4button   button6button div p idcounter0p plast button clicked span idlastbtnspanp   скрипт    функция возвращать случайный целое число заданный диапазон const randint  min max  mathfloormin  mathrandom  max  min  1  функция имитировать обработка запрос сервер const sleep  ms  new promiseres  settimeoutres ms  const count setcount  createsignal0  const counter  documentgetelementbyidcounter const lastbtn  documentgetelementbyidlastbtn   текст параграф обновляться каждый изменение значение счетчик createeffect     countertextcontent  count    функция имитировать получение данный сервер  задержка составлять 1 6 секунда const getdata  async   await sleeprandint1 6  1000   функция имитировать отправка запрос  обновление локальный состояние получение ответ const update  async n      реальный приложение n возвращаться getdata   await getdata   setcountn   documentqueryselectorallbuttonforeachbtn      каждый кнопка обновлять значение счетчик свой текст 2 4 6   btnaddeventlistenerclick        const n  btntextcontent      отображать значение последний нажимать кнопка     lastbtntextcontent  n      обновлять значение счетчик     updaten       демо     быстрый нажатие несколько кнопка возникать состояние гонка приводить то итоговый значение счетчик любой три 2 4 6 знать какой точно значение счетчик мочь полагаться производство дальнейший вычисление кроме заметно текст параграф время обновляться новый значение этот значение счетчик текст параграф должно такой текст последний нажимать кнопка последний модификациизапрос достигать сделать это простой средство библиотека обходиться     сниппет   class query     переменный хранение последний промис  запрос   lastpromise    async lastpromise       записывать промис переменный     thislastpromise  promise      ждать ответ сервер     const result  await promise      индикатор разрешать промис являться последний запрос     const islast  thislastpromise  promise      возвращать результат индикатор     return result islast       создавать экземпляр  query    const query  new query   оборачивать вызов  getdata  метод  last  обновлять значение счетчик случай индикатор  islast  иметь значение  true  тот данный обновление являться ответ последний запрос   const update  async n     const result islast  await querylastgetdata   if islast       реальный приложение setcount передаваться result     setcountn       демо     значение счетчик идентично текст последний нажимать кнопка результат обработка последний запрос обновление значение счетчик выполняться однократно   такой образ обеспечивать согласованность данные пользователь также предотвращать лишний повторный рендеринг производительность приложение     согласованность данный  это пользователь также сервер поскольку последующий модификация серверный данные вполне мочь использоваться данные храниться клиент тп   следовать отмечать приводить решение являться идеальный поскольку лишний запрос равный выполняться нагрузка сеть оптимальный являться техника название дедупликация запрос отменять запрос находиться процесс выполнение например помощь  abortcontrollersignal  выполнять последний запрос понятно выполняться новый запрос должный идентичный данный способ намного сложный рассматривать взгляд дедупликация запрос использовать готовый решение тип  react query  ждать один самый сложный задача вебразработка  правильный работа кеш  существовать другой способ борьба состояние гонка     просто выполнять запрос течение определенный время уверять запрос быть множественный привет debouncing   пожалуй это хотеть вы поделиться   надеяться узнавать чтото новый зря потратить время   happy coding",
    "tags": [
        "timeweb_статьи",
        "javascript",
        "reactivity",
        "signal",
        "race condition",
        "request deduplication",
        "snippet",
        "реактивность",
        "состояние гонки",
        "дедуликация запросов",
        "сниппет"
    ]
}