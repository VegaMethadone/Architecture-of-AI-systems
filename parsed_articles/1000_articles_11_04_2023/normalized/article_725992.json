{
    "article_id": "725992",
    "article_name": "Менеджмент зависимостей в Javascript",
    "content": "javascript стремительно развиваться протяжение 20 год этот время появляться огромный количество различный решение разработка вебприложение несмотря развитие вебстандарт самый вебплатформа достаточно тяжело представлять проект использовать никакой сторонний библиотека многий разработчик процесс установка зависимость представлять себя некий магия который происходить выполнение  npm install  магический npm install взгляд четкий понимание принцип работа магия позволять уменьшать головной боль разработка большой сложный приложение повышать эффективность процесс установка разбираться этот принцип предлагать рассматривать история развитие управление зависимость javascript хронологический порядок какм делать рано появление nodejs npm подключение библиотека сайт осуществляться помощь тег  script  прямо html script srcurlбиблиотекиscript это работать нужный адрес  urlбиблиотеки  размещать js файл сделать это два способ воспользоваться cdn который размещать код библиотека script srchttpsajaxgoogleapiscomajaxlibsjquery361jqueryminjsscript такой случай контроль самый дело получать пользователь делегировать работа провайдер cdn доверять качество бонус пользователь получать кроссдоменный кеш например загружать jquery другой сайт открытие наш сайт получать ее кеш вместо загружать cdn заново url совпадать сожаление механизм  актуальный  скачать код библиотека самостоятельно полагать например директория  vendors  script srcvendorsjquery361minjsscript такой случай иметь полный контроль код библиотека способ получение пользователь необходимость мочь производить они дополнительный преобразование например минифицировать второй способ становиться все актуальный рост экосистема javascript расти количество библиотека подключать сайт скачивать библиотека вручную хранить репозиторий код становиться все накладный поэтому появляться инструмент именовать  bower  bower bower   пакетный менеджер основной задача  автоматизировать загрузка различный компонент приложение сторонний ресурс непосредственно репозиторий код такой случай хранить информация нужно скачать файл  bowerjson     name myapp   dependencies      react 1610     напоминать выполнение команда  bower install  bower устанавливать зависимость указанный поле  dependencies  bower иметь свой собственный реестр пакет который скачивать версионирование стоить отдельно отмечать  bowerjson  указывать конкретный url который должный загружать библиотека диапазон версия согласно  semver  фактически являться реализация  принцип инверсия зависимость  проект зависеть конкретный код храниться удаленный сервер абстракция вид диапазон версия выбор соответствующий версия загрузка код отвечать пакетный менеджер semver гарантировать выбор любой версия указанный диапазон проект работать это работать например хотеть использовать свой проект библиотека react открывать документация изучать api библиотека обращать внимание версия библиотека написать этот документация например это версия  1610  первый разряд версия согласно semver означать изменение api ломать обратный совместимость мажорный второй  обратносовместимый изменение api минорный соответственно минимальный версия который мы подходить использование api который видеть документация   1610  максимальный версия который мочь использовать опасаться проект переставать работать   1700  записывать диапазон вид  1610 1700  краткий запись существовать модификатор диапазон версия помощь который мочь обозначать самый диапазон версия  1610  практика все радужно разработчик библиотека случайно выпускать ломать изменение минорный обновление библиотека такой случай мы приходиться внимательно следить история обновление библиотека подбирать диапазон напарываться проблема либо указывать конкретный версия вместо диапазон транзитивный зависимость bower позволять формализовать автоматизировать управление зависимость фронтендразработка подталкивать экосистема javascript закономерный рост соответственно усложнение помимо появление пакетный менеджер возникать  различный модульный система  весь это совокупность позволять разработчик библиотека использовать другой библиотека самый снижать уровень копипаста теоретически объем код загружать пользователь зависимость зависимость проект называться транзитивный транзитивный зависимость разрешение зависимость пакетный менеджер начинать установка этап разрешение resolution зависимость этап анализировать зависимость поле  dependencies  подбирать наиболее актуальный версия библиотека соответствовать указанный он диапазон поскольку загружать библиотека мочь свой зависимость разрешение зависимость производиться результат процесс становиться рекурсивный представлять себя обход дерево который постепенно достраиваться зависимость локальный разработка помимо использование библиотека непосредственно код приложение разработчик писать автотест производить всяческий манипуляция исходный код делать множество другой несомненно полезный вещь изобретать свой велосипед разумеется также использоваться различный библиотека добавлять библиотека свой проект хотеть вместе она исходный код загружать еще тонна инструмент который несомненно полезный самый библиотека мы мочь абсолютно нужный поэтому экономия дисковый пространство пользователь библиотека  bowerjson  появляться поле  devdependencies  devdependencies   зависимость который пакетный менеджер устанавливать являться прямой зависимость проект транзитивный  devdependencies  пакетный менеджер игнорировать установка зависимость devdependencies плоский модель установка bower поддерживать плоский модель установка зависимость подразумевать загрузка прямой транзитивный зависимость один директория пример высокий результат установка bower выглядеть пример установка зависимость bower такой структура иметь место развитие экосистема javascript количество транзитивный зависимость крайне быстро расти рано поздно неизбежно приводить конфликт версия конфликт мочь возникать случай зависимость проект зависеть разный версия один тот библиотека конфликт версия зависимость bower устанавливать зависимость один директория устанавливать несколько версия один пакет поэтому разработчик приходиться решать такой конфликт вручную путем выбор версия который результат использоваться довольно рискованно случай несколько разный мажорный версия ручной разрешение конфликт разрешение подобный конфликт  bowerjson  появляться поле  resolutions  позволять вручную производить разрешение транзитивный зависимость    resolutions      libraryd 200     менее выбор один несколько мажорный версия зависимость  самый хороший вариант один транзитивный зависимость высокий доля вероятность сломаться безопасно устанавливать оба версия bower позволять решение проблема находить смежный область  бекендразработка nodejs платформа разрабатывать свой пакетный менеджер   npm  npm npm иметь nested модель установка который подразумевать каждый зависимость проект создаваться свой директория  node_modules  который изолированно храниться ее зависимость  это позволять избегать конфликт версия nested модель установка поскольку npm изначально предназначаться nodejs пакет он иметь модульный формат commonjs который поддерживаться браузер соответственно использовать фронтенд невозможно однако появление  browserify  инструмент собирать commonjs модуль файл пост который впоследствии занимать  webpack  этот проблема решать разработчик постепенно начинать переходить bower npm безболезненный миграция bower npm появляться флаг  flat  который менять модель установка плоский переход nested модель установка бесплатный директория  node_modules  представлять себя довольно глубокий иерархия пакет который занимать колоссальный количество место диск также мочь приводить проблема изза  ограничение максимальный длина путь windows  классический мема node_modules бекенд это приемлемый наверное тянуть сайт библиотека среди который множество дубликат никто хотеться поэтому npm 3 появляться новый hoisted модель установка механизм дедупликация пакет hoisted модель установка представлять себя нечто средний плоский nested модель п",
    "tags": [
        "node.js",
        "npm",
        "pnpm",
        "yarn",
        "package",
        "javascript",
        "install"
    ]
}