{
    "article_id": "726410",
    "article_name": "Руководство по Кросс-Платформенному Системному Программированию для UNIX и Windows: Уровень 1",
    "content": "помощь учебный материал научаться писать кроссплатформенный код си использовать системный функция популярный ос windows linuxandroid macos freebsd управление файл файловый io консольный io пайп неименованный запуск новый процесс  написать свой небольшой вспомогательный функция поверх низкоуровневый системный апи api наш основной код использовать функция мочь работать любой ос изменение  учебный материал  начальный уровень  делить сложный вещь часть пример код слишком заумный тот начало программировать си  обсуждать различие системный апи разбираться создавать кроссплатформенный программный интерфейс который скрывать различие пользователь интерфейс давно писать кроссплатформенный софт си хотеть поделиться свой опыт другой  надеяться материал полезный хотеть изучать системный программирование например помогать ты перенести существующий приложение один ос другой содержание введение основной проблема программирование разный ос пример код выделение память детектор время компиляция стандартный io кодировка конвертация данные файловый io простой программа файлэхо системный ошибка управление файл листинг каталог неименованный пайп запуск другой программа запуск другой программа unix запуск другой программа windows запуск другой программа чтение вывод получение текущий датывремя приостановка выполнение программа заключение введение один неудобный вещь программирование си  поддержка несколько ос каждый ос иметь свой оригинальный системный апи  например хотеть наш приложение работать linux windows мы нужно написать 2 разный программа си  мочь решать проблема переключаться язык go python java тд который предоставлять мы полный кроссплатформенный системный библиотека  однако возможный сценарий это правильный решение  хотеть написать высокопроизводительный сервер nginx  мы абсолютно необходимый си  мы нужно строить логика наш программа вокруг несколько низкоуровневый сишный библиотека  мочь сам написать необходимый обвязка библиотека другой язык вместо мочь просто взять использовать си  хотеть наш приложение работать встроенный система ограниченный аппаратный ресурс цп память  мы нужный си вставлять препроцессорный ветка  if  наш код компилятор использовать отдельный логика каждый ос  основной проблема этот подход заключаться код выглядеть все таки некрасиво  наш функция несколько ветка  ifdef  внутри код становиться слишком сложно читать поддерживать  увеличиваться вероятность каждый новый правка сломать чтото гдето мало ожидать  препроцессорный ветка  прямо таки палочкавыручалочка должный злоупотреблять технология нужно соблюдать баланс использовать  библиотека который скрывать принципиальный различие системный апи   другой слово использовать библиотека который предоставлять мы простой использование кроссплатформенный интерфейс  пользовательский код построить поверх библиотека просто компилироваться работать разный ос  это являться главный тема данный учебник основной проблема программирование разный ос первый мы обсуждать  самый дело различаться системный апи разный ос какой проблема мы приходиться решать написание код разный ос самый главное linux macos freebsd  весь это unixсистемы  большинство случай похожий системный апи тот posix это значительно сокращать время необходимый перенос код си они  сожаление системный функция один имя напр  sendfile  иметь разный параметр  флажок который передавать функция вести иначе напр  o_nonblock  сокет  код написать linux легко перенести другой ос изза linux специфичный системный вызов который просто macos напр  sem_timedwait   должный очень аккуратный прямой использование системный функция наш код  держать голова деталь  трудно поэтому оставлять комментарий гденибудь код мочь быстро вспомнить нюанс прошествие время  итог мы нужный тонкий прослойка код наш приложение системный апи  кроссплатформенный библиотека  это именно программный слой который решать проблема описывать  время скрывать деталь реализация каждый ос хороший библиотека должный также описывать различие свой документация понимать именно работать конкретный ос  иначе мочь получать код который некоторый система работать плохо вовсе неправильно продолжать упоминать выше проблема совместимость апи давать предполагать наш приложение использовать какуюнибудь linuxспецифичную функция хотеть оно работать еще macos  мы нужно решать 1 должный написать аналогичный функция вручную macos 2 должный переосмыслять наш подход высокий уровень  вариант 1 хороший нужно осторожный например попытаться реализовать наш собственный  sem_timedwait  macos скоро быть использовать  pthread_cond_timedwait  эмуляция ее логика должный уверенный все остальное включая обработка сигнал unix работать аналогично реализация linux  насчет именовать семафор наш функция поддерживать  код мы сам еще приходиться поддерживать  взгляд просто переделывать логика приложение использовать какоето альтернативный решение возможность поговорить windows  windows  это unix она апи полностью отличаться аспект включая ограничиваться файл сокет таймер процесс тд  хотя microsoft сирантайм c runtime библиотека предоставлять функция напр  _open  который аналогичный posix поведение все равный полностью совпадать unix  иметь вид мочь сталкиваться некоторый неожиданный проблема прочиташь 100 документация microsoft docs понимать именно такой функция работать внутри  теоретически  _open  должный простой тонкий оболочка  createfilew  быть уверенный пока увидеть код  однако вообще пытаться учиться правильно использовать функцииобертка очень расписывать четкий документация функция winapi низкий уровень напр  createfilew   поэтому свой работа возможность стараться использовать функция winapi напрямую какието обертка вокруг unix использоваться символ    путь файл windows обычно использоваться     однако большинство функция winapi также принимать    путь работать корректно  поэтому сказать windows поддерживать       качество символ разделитель путь просто помнить    срабатывать некоторый редкий случай компиляция код разный платформа возможный конфликт имя  наш совершенно корректный код компилироваться ос изза очень странный ошибка компиляция который поначалу довольно сложно понимать  это происходить например использовать какоето имя переменный функция свой код этот имя использоваться один системный заголовочный файл который подключать  include   проблема усугубляться этот имя использоваться препроцессор  случай компилятор сходить ум сообщение ошибка мало помогать  предотвращать проблема рекомендовать ты использовать префикс уникальный твой проект  некоторый время назад начинать использовать префикс  ff  имя код мой библиотека тот пора один конфликт имя  nginx например везде использовать префикс  ngx_  это обычный практика проект си  замечать  namespace ы си сильно помогать решение описывать выше проблема попрежний мочь использовать зарегистрировать  define  системный заголовочный файл  все равный сначала нужно сделать  undef  стоить сказать компилировать свой код windows помощь mingw помнить инклуд файл mingw идентичный файл поставлять комплект microsoft visual studio  мочь дополнительный конфликт вокруг глобальный имя  это зависеть какой инклуда использоваться еще один различие системный функция windows unix заключаться кодировка текст  хотеть открывать файл имя содержать нелатинский символ нужно использовать правильный кодировка текст иначе система понимать либо открывать неправильный файл либо вернуть ошибка файл находить  умолчание система unix обычно использоваться кодировка utf8 windows  utf16le  один этот отличие мешать мы удобно использовать системный функция напрямую наш код  попытаться это сделать получать сплошной  ifdef  внутри наш функция  поэтому наш библиотека должный обрабатывать имя параметр системный апифункция автоматически преобразовывать текст правильный кодировка  использовать utf8 свой проект все рекомендовать делать  utf16le неудобный многий смысл включая факт гораздо менее популярный среди текстовый документ который мочь находить интернет  utf8 то популярный еще один отличие unix windows  это юзерспейс",
    "tags": [
        "программирование",
        "системное программирование",
        "linux",
        "windows"
    ]
}