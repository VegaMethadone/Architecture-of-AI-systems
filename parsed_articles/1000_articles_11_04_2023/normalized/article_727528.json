{
    "article_id": "727528",
    "article_name": "Визуализация 5 алгоритмов сортировки на Python",
    "content": "реализация алгоритм сортировка выбор пузырек вставка слияние быстрый сортировка помощь python введение сортировка массив часто использоваться программирование помогать  понимать  давать выполнять поиск поэтому скорость сортировка большой объем информация крайне важный функциональный проект оптимизация время работа алгоритм упорядочение объект статья посмотреть реализация визуализация пять популярный алгоритм сортировка код написать python графический интерфейс построить tkinter 5 алгоритм включать сортировка  выбор сортировка  пузырек сортировка  вставка сортировка  слияние быстрый  сортировка quicksort визуализация массив рис 1  пример массив  неупорядоченный целочисленный данные класс предоставлять перегружать реализация  оператор сравнение  сортироваться python это _lt_  мало _gt_  _eq_  равно код ниже демонстрировать перегружать метод  мало  def __lt__self other      compare object with other object of same type     return selfvalue  othervalue давать представлять числовой данные помощь столбец высота столбец i равный значение элемент массив i одинаковый ширина такой изображение список числовой значение рис 1 вид столбец приводить рис 2 рис 2 значение целый число вид высота столбец сортировка числовой данные убывание возрастание требовать соответствующий перестановка значение анимация каждый алгоритм данные требоваться обновлять диаграмма замена отдельный элемент низкий  код python замена два элемент  список  def swaparr a b      переставлять элемент a b массив      temp  arra     arra  arrb     arrb  temp      возвращать массив рендеринг необходимый класс canvas bar код комментарий полный пользовательский интерфейс лежать  репозиторий github  ниже показывать необходимый код отображение обновление класс  canvas   bar index  меняться указывать выше  setter  запускать функция  update_bar  основной холст запуск обновление элемент массив меняться место indexsetter def indexself i      update coordinates when index changes      self_index  i       update horizontal coordinates     selfx1  self_index  selfwidth     selfx2  selfx1  selfwidth       dispatch updates to subscriber visualiser     selfsubscriberupdate_barself сортировка выбор встроенный алгоритм сортировка  отсортировывать   элемент  использовать  хранилище   исходный элемент  ниже  реализация сортировка выбор python подробный комментарий внешний цикл производить итерация весь длина несортированный массив этот время внутренний цикл искать минимальный значение оставаться часть набор данный затем происходить единый замена переставлять элемент номер i элемент  min_index  def selection_sortself unsorted n           итерироваться массив     for i in range0 n                   инициализироваться первое значенить         current_min  unsortedi                   инициализировать минимальный индекс         min_index  i                   итерироваться оставаться элемент массив         for j in rangei n                           проверять jтое значение мало текушего минимальный             if unsortedj  current_min                                 обновляес минимальный значение индекс                 current_min  unsortedj                 min_index  j                           менять iтое jтое значение         swapunsorted i min_index метод сортировка выбор обычно включать параметр временный сложность    on²   n² итерация очевидный два вложенный цикл пространственный сложность    o1   упоминаться выше сортировка происходить массив поэтому использование память зависеть данные обработка рис 3  сортировка выбор сортировка пузырек несколько проходить список сравнивать соседний элемент элемент меняться место зависимость условие сортировка ниже показывать реализация сортировка выбор python комментарий def bubble_sortself unsorted n      алгоритм сортировка пузырек            итерироваться неотсорт массив предпоследний элемент     for i in range0 n  1                 проставлять условие флаг финальный список         swapped  false                   итерироваться осташвимся неотсортированный объект         for j in range0 n  1  i                         сравнивать соседний элемент             if unsortedjvalue  unsortedj  1value                                 менять элемент место                 swapunsorted j j  1                 swapped  true                   завершать алгоритм смена происходить         if not swapped             break обращать внимание алгоритм сортировка пузырек плохой случай средний значение временной сложность    on²   внутренний  цикл  работать мало  n  поэтому операция занимать менее n² время пространственный сложность    o1   дополнительный память  использоваться происходить обмен элемент исходный массив большой значение  всплывать пузырек  верхний часть список мера выполнение программа показывать рис 4 рис 4  сортировка пузырек сортировка вставка строить конечный массив  один элемент  использовать код указанный низко выполнение метод несортированный массив объект  def insertion_sortunsorted n      сортировка вставка            итерация неотсортированный массив     for i in range1 n                 получать значение элемент         val  unsortedivalue                   записывать hole индекс i         hole  i                   проходить массив обратный сторона пока находить элемент текущий         while hole  0 and unsortedhole  1value  val                           переставлять элемент место  получать правильный позиция             unsortedholevalue  unsortedhole  1value                           делать шаг назад             hole  1                   вставлять значение верный позиция         unsortedholevalue  val сортировка вставка плохой случай временный сложность    on²  внешний цикл  for  внутренний while работать приблизительно  n  пространственный сложность    o1  операция проводиться исходный массив такой образ дополнительный память требоваться рис 5  сортировка вставка сортировка слияние сортировка слияние  алгоритм сортировка принцип разделять властвовать задача раскладываться мелкий аналогичный подзадача тот пора пока решать базовый случай несортированный массив разделяться тот пора пока выделяться базовый случай отдельный элемент затем происходить сравнение временный массив перемещаться обратно вверх стек рекурсия def divideself unsorted lower upper      рекурсивный функция разделение массив подмассив сортировка            помощь рекурсия достигать базовый случай     if upper  lower         return           получать средний значение разделение     mid  lower  upper  2           делить массив посередине     divideunsorted lower mid     divideunsorted mid  1 upper           склеивать отсортировывать массив     mergeunsorted lower mid mid  1 upper       def mergeunsorted l_lower l_upper r_lower r_upper      merging two sorted arrays to one sorted array            извлекать левый правый индекс     i j  l_lower r_lower           инициализировать временный массив     temp             проходить индекс     while i  l_upper and j  r_upper                   определять какой значение следовать вставлять временный массив         if unsortedivalue  unsortedjvalue             tempappendunsortedi             i  1         else             tempappendunsortedj             j  1           один условие выше заканчиваться первый      поэтому обрабатывать незаконченный случай     while i  l_upper         tempappendunsortedi         i  1     while j  r_upper         tempappendunsortedj         j  1           присваивать значение временный массив      for y k in enumeraterangel_lower r_upper  1         unsortedk  tempy сортировка слияние временный сложность   on logn   алгоритм сортировка разделять властвовать такой временный сложность этот сложность  плохой сценарий подобный алгоритм пространственный сложность   on  выделение память увеличиваться быстро константа kn тот кратный размер набор данный рис 6  сортировка слияние быстрый сортировка быстрый сортировка примерно дватирать раз быстро основной конкурент сортировка слияние пирамидальный сортировка часто реализовать рекурсивно пример ниже з",
    "tags": [
        "сортировка",
        "сортировка слиянием",
        "сортировка вставками",
        "сортировка пузырьком",
        "сортировка выбором",
        "быстрая сортировка",
        "python",
        "backend"
    ]
}