{
    "article_id": "726090",
    "article_name": "Потоковый обмен в распределённых системах и использование реактивных потоков в нереактивных приложениях: опыт «Магнита»",
    "content": "привет хабр насвязь андрей зяблин java разработчик компания магнит несколько год назад продлять дочь подписка наnetflix заинтересовываться какони поддерживать обслуживание сотня миллион клиент изучать вопрос увлекаться реактивный подход впрограммирование некоторый время этот увлечение приносить практический польза приразработка сервис магнит встатья рассказывать протирать решение который позволять реализовывать потоковый обмен данные избд распределять приложение  реализация сиспользование hibernate  реализация сиспользование mybatis  ограничение скорость обмен сиспользование механизм обратный давление backpressure библиотека bucket4j  постановка задача наш команда разрабатывать приложение дляинтеграция различный сервис сеть атакже дляинтеграция сгосударственный сервис вобласть ветеринария ветис  упрощенно структура приложение выглядеть  бизнесзапрос запрос вформат json предназначать дляобмен науровна бизнесданный операция позиция операция пр раскладываться вболее низкоуровневый запрос вформат поддерживаться госсервис  цсм централизованный сервис сеть меркурий разрабатывать мы приложение интеграция bdsmclient работа сбизнесзапрос бд см база данные сеть магазин  mercury обеспечивать взаимодействие шлюз ветис  processing выполнять обработка бизнесзапрос доотправка запрос вшлюз  проблемный место оказываться передача данные изцсмы вбд см объем передавать данные огромный анасторона бд см напрашиваться тонкий клиент писать непосредственно вбаза  требование обмен данные извлекаться избд объем данные миллион запись засеанс  передача вестись интернет поhttp  необходимо использовать orm  изучать различный технология приходить кмнение чтовнаш случай оптимально использовать реактивность  доработка сторона цсм бд см  всинхронный код цсм встраиваться реактивный код обмен дляприем данные насторона бд см писаться отдельный реактивный приложение использовать технология  java streams hibernate streamresult reactive streams spring webfluxreactor spring webclient rsocket демонстрация граничный условие невсегда иметься возможность использовать r2dbc намомент разработка дляoracle небыть стабильный реактивный драйвер  hibernate streamresult требовать активный транзакция нався время фетч нужно отслеживать завершение фетч ошибка закрытие соединение завершать транзакция стандартный решение ввид trycatch неподходить вданный ситуация решение использование hibernate основной сложность реализация заключаться вкорректный работа странзакция васинхронный режим дляэтого приходиться создавать отдельный механизм благо reactor это позволять основа решение составлять  stateless session streamresult генерация flux stream далее рассматривать код сущность customer  справочник заказчик operation  операция заказчик например продажа public class customer         id      generatedvaluestrategy  generationtypesequence generator  sequence      sequencegeneratorname  sequence sequencename  sq_customer allocationsize  1      private long id        columnname  name      private string name      public class operation         id      generatedvaluestrategy  generationtypesequence generator  sequence      sequencegeneratorname  sequence sequencename  sq_operation allocationsize  1      private long id        columnname  total_sum      private long totalsum        manytoone      joincolumnname  customer_id      private customer customer        manytomany      jointable          name  operation_detail          joincolumns  joincolumnname  operation_id          inversejoincolumns  joincolumnname  product_id      private listproduct products        загрузка данные загрузка данные достаточно простой несовсем иметь отношение ктем статья демонстрироваться мощь функциональный программирование наданный пример показывать насколько функциональный библиотека reactor какон облегчать разработка класс commagnitfluxcommonserviceinitdataservice private void fillcustomer       fluxrange0 customer_record_limit          mapi  customerbuildernamecustomer   ibuild          subscribecustomerrepositorysave      private void fillproduct       fluxrange0 product_record_limit          mapi  productbuildernameproduct   ibuild          subscribeproductrepositorysave      private void filloperation       supplierlistproduct productsupplier    new randomints5 1 8          boxeddistinct          mapproductid  productbuilderidlong productidbuild          collectcollectorstolist      listcustomer customers  listcustomer customerrepositoryfindall      fluxrange0 operation_record_limit          mapi  operationbuilder              totalsumlong randomnextint100              customercustomersgetrandomnextintcustomerssize  1              productsproductsupplierget              build          buffer1000          subscribeoperationrepositorysaveall    использование hibernate стриминг класс выполнять основной работа поуправление транзакция васинхронный режим это чтото вроде autocloseable всинхронный приложение  класс commagnitfluxhibernatedaohibernatefluxresultproducer requiredargsconstructor  public class hibernatefluxresultproducert            private final entitymanagerfactory entitymanagerfactory        private statelesssession statelesssession                функция выполнять hql запрос создавать flux result stream             public fluxt executestring qlstring classt resultclass           optionalofnullablestatelesssessionifpresente                throw new runtimeexceptioncursor already open                    val sessionfactory  entitymanagerfactoryunwrapsessionfactoryclass          использование stateless session позволять ускорять чтение счет использование detached объект          statelesssession  sessionfactoryopenstatelesssession          statelesssessiongettransactionbegin          val query  statelesssessioncreatequeryqlstring resultclass          использоваться возможность hibernate потоковый чтение бд  getresultstream          return fluxfromstreamquerygetresultstream              public monovoid commit           return closetrue              public monovoid rollback           return closefalse              public monovoid closeboolean committran           if statelesssessiongettransactionisactive               if committran                   statelesssessiongettransactioncommit               else                   statelesssessiongettransactionrollback                                    statelesssessionclose          return monoempty              данный класс стартовать транзакция выполнять hql запрос также иметь метод commit rollback  контроллер работать hibernate основной функционал работа споток реализовать вприватный метод getoperationflux генерация поток осуществляться вызов метод fluxusingwhen который называть асинхронный autocloseable контроллер предоставлять эндпоинт  getoperationsstream  json стриминг getoperationsws  вебсокет класс commagnitfluxhibernatecontrollerhibernateoperationcontroller public class hibernateoperationcontroller         private final objectfactoryhibernatefluxresultproduceroperation streamresultproducerobjectfactory        getmappingpath  operationsstream produces  applicationstreamjson      public fluxoperation getoperationsstream           return getoperationflux              messagemappingoperations      public fluxoperation getoperationsws           return getoperationflux              private fluxoperation getoperationflux           monohibernatefluxresultproduceroperation streamresultexecutormono  mono              juststreamresultproducerobjectfactorygetobject          return fluxusingwhenstreamresultexecutormono              se  seexecuteselect o from operation o join fetch ocustomer c operationclass              hibernatefluxresultproducercommit            результат работа первый метод посмотреть непосредственно вбраузер  останавивать загрузка илидаж закрывать браузер убеждаться чтометод close вызываться  второй метод интерсный наего основа реализовать обмен попротокол rsocket длятестирование rsocket клиент реализовать наjavascript также данный пример демонстрировать использование мех",
    "tags": [
        "реактивное программирование",
        "java",
        "распределенные системы",
        "mybatis",
        "backpressure",
        "hibernate",
        "reactive streams"
    ]
}