{
    "article_id": "726100",
    "article_name": "Замеряй и ускоряй: как мы сократили время вызова метода в Java-коде в 16 раз",
    "content": "привет хабр замирать производительность код  самый простой упражнение разработчик приходиться решать куча сложность разбираться метод создавать правильный условие все равный получать результат погрешность любой метод бесплатный требовать ресурс процессор звать александр певненко javaразработчик сбертех вместе команда развивать platform v dataspace это облачный сервис который упрощать ускорять разработка приложение использовать концепция backendasaservice baas хранение управление данные рассказывать наш способ замер производительность код помощь бенчмарков рассматривать метод быть пример оптимизация код platform v dataspace который помогать сокращать время вызов метод 16 статья быть пользоваться язык java python построение график набор библиотека jmh  также адаптировать kotlin scala тд вообще измерять производительность код вроде все работать нормально самый дело помимо очевидный выгода вид скорость стабильность еще один причина оптимизация рассматривать важный часть культура cicd небольшой проект параметр мочь критичный зато практически agileкоманды сегодня работать devopsпрактиками осознавать ценность непрерывный поставка пока проект молодой развертывание тестирование относительно простой модуль вырастать рамка агент выполнять сборка локальный сборка тест начинать уходить час голова разработчик приходить светлый мысль стоять уменьшать код заниматься производительность какието метод раздувать небывалый размер именно помощь приходить оптимизация код становиться часть непрерывный интеграция следующий шаг развитие devops наш случай важный аспект скорость  platform v dataspace поставляться состав облачный платформа platform v который лежать основа большинство продукт сбер оптимизация devops  изза продукт быстро расти важно обеспечивать непрерывный поставка функциональность промышленный эксплуатация замеривать производительность метода сложность вернуться наш пример один проект platform v dataspace вызов метод занимать очень время алгоритм построить избегать сложность вызывать метод малый кровь получаться пристальный рассмотрение выясняться код вызывать метод несколько изза растягиваться timestamp оптимизация нужно оценивать точный длительность работа метод классический подход замер оптимальность код  нотация большой этот метод один сложность позволять замеривать код боевой условие прикладывать максимум усилие проводить оценка помощь нотация обеспечивать видимый оптимальность блок код отдельность получать неоптимальный решение вспоминать жадный алгоритм производительность композироваться результат мочь повлиять разный фактор стиль программирование тип использовать данные особенность процессор решать обращаться альтернативный решение  бенчмарка бенчмарк  тест оценка длительность работа метод хороший позволять замеривать скорость работа алгоритм учет внешний фактор реальный оборудование основа любой бенчмарка лежать системный время работа процессор расчет длительность выполнение блок код часто использоваться метод  systemnanotime  который оказываться свой особенность дело метод системный взятие время неизбежный давать погрешность сделать void checktime long oldtime  systemnanotime work return systemnanotime  oldtime  погрешность связанный метод бесплатный стоимость равный стоимость ресурс машина который затрачивать расчет избегать получаться квантовый механика наблюдатель влезать квантовый мир вносить погрешность сам факт наблюдение возникать вопрос получаться никак избегать погрешность вычисление стоимость метод  work  считать baseline основа строить сжигать время замер подробный изучение метод оказываться погрешность избегать несколько вариант самый простой  использовать библиотека jmh java jmh хороший почему подходить мы jmh  это набор библиотека тестирование производительность небольшой функция использовать библиотека избегать погрешность благодаря то узнавать латентность  время вызов  systemnanotime  измерять гранулярность метод  разрешать способность минимальный ненулевой разница вызов метод  systemnanotime  это позволять мы получать значение который коррелировать длительность исполнение метод взятие время вроде все простой jmh сам вычислять латентность гранулярность расслабляться все равный стоить разный ос измерение время помощь латентность гранулярность разный поэтому вызывать метод большой количество поток нужно осторожный наш случай использовать бенчмарка jmh невозможный изза внутренний ограничение требование процесс поэтому приходиться искать третий вариант  измерять производительность код писать бенчмарка самостоятельно тестирование оптимальность код боевой условие еще способ избегать погрешность  измерять стоимость  systemnanotime  это позволять мы получать значение который коррелировать длительность исполнение метод взятие время решение проблема повторный вызов метод подготовить самописный бенчмарк попробовать вычесть baseline оптимизация затем сравнивать сколько время требоваться исполнение код доработка работать просто собирать графический интерфейс визуализация python получаться набор данные оптимизация визуализация набор данный аналогичный измерение оптимизация давать видимый результат график ниже  измерение оптимизация верхний линия нижний визуальный сравнение два набор данные визуальный сравнение три набор данные усреднение значение эксперимент аналитический вывод  выигрыш производительность оптимизация итог длительность вызов метод сокращаться 16 график этот значение отображаться погрешность который допустимый визуализация замер проводить боевой условие сам значение выигрыш действительный погрешность два замер вычитаться сам мы необходимый относительный значение абсолютный вывод измерять производительность код стоить хотя любопытство повышать скорость продукт упрощать развертывание бенчмарка  отличный решение наш случай самописной бенчмарка помогать серьезно сокращать длительность вызов  systemnanotime  работать большинство проект тестировать оптимальность весь система ради снижение количество потенциальный проблема писать собственный бенчмарка устранять погрешность помощь вычитание стоимость метод  удел каждый jmh проблема решаться автоматически измерение латентность гранулярность вполне пользоваться такой решение работа намного мало польза очевидный",
    "tags": [
        "производительность",
        "бенчмарк"
    ]
}