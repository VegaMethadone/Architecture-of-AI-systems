{
    "article_id": "727354",
    "article_name": "Вызов асинхронных внешних API с помощью AWS Step Functions",
    "content": "внешний api мочь помогать организация оптимизировать операция снижать затрата улучшать качество услуга свой клиент однако интеграция сторонний вендор мочь сталкиваться различный проблема такой безопасность отказоустойчивость стоимость организация должный уверять система способный справляться проблема производительность простой некоторый случай вызов внешний api связывать дополнительный расход такой плата лицензия поставщик внешний api заключать контракт соблюдение максимальный rps количество запрос секунда система должный соответствующий образ адаптироваться пост показывать выглядеть архитектура вызов внешний api помощь aws step functions упор надежность этот решение применимый любой индустрия который использовать данные интегрироваться внешний api пример включать приложение электронный коммерция интернетмагазин интегрироваться платежный шлюз логистический компания приложение сектор здравоохранение банковский сфера обзор решение использоваться вервис aws вызов сторонний сервис обработка асинхронный вызов длительный задача этот архитектура также доступный раздел aws reference architecture diagrams aws architecture center показывать рисунок 1 данный архитектура позволять ограничивать вызов внешний сервис соответствие требовать максимальный rps использовать возможность step functions step functions тормозить основной процесс получение колбек внешний система рисунок 1 асинхронный вызов внешний api давать рассматривать каждый шаг отдельность step functions настраивать обработка длительный запрос сторонний api внутри рабочий процесс добавлять шаг который приостанавливать использовать  waitfortasktoken  качество колбек устанавливать таймаут выбрасывать ошибка ответ получать task token тело запрос отправляться  amazon sqs  очередь amazon simple queue service  amazon cloudwatch  использоваться мониторинг длина очередь должный реализовать возможность изменение контракт сторонний сервис длина очередь превышать предел определенный максимальный rps сторонний система сообщение sqs триггер срабатывать функция  lambda  запускать requestor step functions  express workflows  частота вызов управлять использовать размер пакет  batch  запрос параллелизм масштабирование лямбда  reserved  and  maximum  concurrency описывать подробно далее необходимость добавлять динамический задержка внутри лямбда который настраиваться aws appconfig нужный низкий частота вызов соответствовать требовать rps step functions вызывать  amazon api gateway  выступать качество httpпрокси позволять ограничивать количество запрос заданный rps это дополнительный защита важный динамический настройка частота запрос внешний api вызываться асинхронно отправлять данные очередь получать идентификатор job id внешний сервис неудачный запрос отправляться sqs dlq dead letter queue task token job id основный процесс сохраняться таблица  dynamodb  job id использоваться сопоставление запрос ответ task token  возобновление процесс который сделать запрос выполнение работа внешний сервис отправлять job id callback webhook endpoint перевод  прима переть реализованный помощь api gateway получать данные преобразовываться api gateway помещаться sqs генерироваться ответ внешний система лямбда забирать получать ответ sqs затем извлекать сохранять task token job id нужный разблокировать ожидать рабочий процесс вызывать sendtasksuccess неудавшийся сообщение отправляться dlq основный процесс передаваться job id следующий шаг вызываться step functions обработка ответ внешний сервис управление частота вызов соответствовать лимит rps необходимо иметь механизм ограничение частота вызов частота опрос сообщение sqs шаг 3 напрямую влиять частота вызов управление частота вызов лямбда sqs качество источник использовать различный параметр такой batch size количество запись отправлять функция стандартный очередь это 10 000 запись очередь fifo firstin firstout максимальный количество запись  10 использование batch size ограничивать частота вызов следовать использовать сочетание другой параметр такой reserved concurrency maximum concurrency batch window максимальный время течение который происходить сбор запись вызов лямбда секунда применимый стандартный очередь maximum concurrency устанавливать ограничение количество одновременный экземпляр лямбда который мочь вызываться помощь sqs устанавливаться уровень источник событие конфигурация этот параметр показывать рисунок 2 рисунок 2 другой параметр который также мочь также использоваться reserved concurrency гарантировать максимальный количество параллельный экземпляр лямбда lambda иметь зарезервировать пул другой мочь использовать резерв также использовать ограничение частота вызов provisioned concurrency создавать определенный количество среда исполнение готовый мгновенно использоваться вызов ваш лямбда обращать внимание использование параметр влечь себя расход ваш учетный запись aws дополнительный параметр показывать рисунок 3 рисунок 3 развитие ваш архитектура время реализация архитектура следовать учитывать некоторый нюанс убеждаться ваш решение достаточно зрелый рассматривать некоторый пример внешний api отвечать запрос шаг 8 возникать таймаут шаг 1 разумный таймаут должный настраивать основной step functions шаг 1 значение таймаут должно учитывать максимальный время ответ  раздел  error handling in step functions  описываться реализовывать логика различный тип ошибка ошибка таймаут настраиваться помощь statestimeout динамический задержка внутри лямбда упоминаться шаг 4 должный использоваться пик трафик внешний сторона очень низкий лимит rps рассматривать другой альтернатива введение задержка например использовать планировщик  amazon eventbridge scheduler  запускать лямбда регулярный интервал обработка сообщение amazon sqs это позволять избегать затрата простойожидание ваш лямбда заключение пост представлять подробный руководство использование сервис aws управление жизненный цикл асинхронный запрос также описывать пять различный параметр управление частота вызов ограничение внешний api соответствие заданный лимит rps также рассматривать пример обработка ошибка step functions мониторинг помощь cloudwatch кроме данный архитектура полностью  serverless  позволять избавляться рутинный работа создание высокодоступный надежный безопасный экономически эффективный система aws",
    "tags": [
        "amazon api gateway",
        "cloudwatch",
        "sqs",
        "architecture",
        "step functuions",
        "best practices"
    ]
}