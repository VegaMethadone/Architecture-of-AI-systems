{
    "article_id": "725208",
    "article_name": "Отменить нельзя продолжить",
    "content": "описывать асинхронный цепочка запрос сломать все просто думать    автор менеджер состояние reatom сегодня хотеть рассказывать главный киллерфич reduxsaga rxjs она получать просто грядущий изменение стандарт ecmascript    речь пойти автоматический отмена конкурентный асинхронный цепочка  обязательный свойство работа любой rest api другой общий асинхронный последовательный операция      базовый пример     const geta  async      const a  await apigeta   return a   const getb  async params     const b  await apigetbparams   return b   export const event  async      const a  await geta   const b  await getba   setstateb    пример максимально банальный большинство писать код нужно запрашивать бекенд сначала один данные основа запрашивать конечный данные другой эндпоинт ситуация осложняться первый данные зависеть пользовательский ввод часто этот какието фильтр сортировка таблица пользователь чтото менять делать запрос пользователь менять чтото еще мы прилетать ответ предыдущий запрос пока новый завершаться отображаться weird state        это еще ерунда подавлять большинство бекенд сервер следить очередность запрос отвечать сначала второй запрос первый  пользователь это отражаться данные старый фильтр новый данные появляться  wat state        избегать wat state пример картинка вроде просто отменять последний запрос        каждый конкретный запрос поставлять отмена сложно хотя код нужно писать готовый инструмент рука axios коробка фич давать возможность прокинуть сигнал отмена управлять нужно сам никакой автоматика    это сделать сам просто отмена добавлять версионирование запрос     let aversion  0 const geta  async      const version  aversion   const a  await apigeta   if version  aversion throw new erroraborted   return a   let bversion  0 const getb  async params     const version  bversion   const b  await apigetbparams   if version  bversion throw new erroraborted   return b   export const event  async      const a  await geta   const b  await getba   setstateb    бойлерплейтненько это все исправлять wat state weird state        наш попытка отменять предыдущий запрос что приводить мы нужно версионировать цепочка     const geta  async getversion     const version  getversion   const a  await apigeta   if version  getversion throw new erroraborted   return a   const getb  async getversion params     const version  getversion   const b  await apigetbparams   if version  getversion throw new erroraborted   return b   let version  0 const getversion    version export const event  async      version   const a  await getagetversion   const b  await getbgetversion a   setstateb    использовать каждый запрос  getversion  замыкание тк реальный код функция мочь разбрасывать разный файл мы приходиться объявлять общий контракт  передача функция версия первый аргумент    зато задача решать отмена цепочка предотвращать weird state        wat state  появляться        код выглядеть еще бойлерплейтненько мочь использовать нативный abortcontroller который поддерживаться браузер nodejs     const geta  async controller     const a  await apigeta   controllerthrowifaborted   return a   const getb  async controller params     const b  await apigetbparams   controllerthrowifaborted   return b   let controller  new abortcontroller export const event  async      controllerabortconcurrent   controller  new abortcontroller   const a  await getacontroller   const b  await getbcontroller a   setstateb    становиться надеяться понятно это все еще выглядеть неудобно многословный контроллер приходиться перепрокидывать рука стоять оно мой практика никто делать переписывать функция оно нормально друг друг взаимодействовать код консистентный никто точно никто делать вообще функция async подробно прочитывать  how do you color your functions  важно понимать описывать пример максимально упрощенный реальный задача поток данные соответствующий проблема мочь намного сложный серьезный    какой альтернатива rxjs reduxsaga позволять описывать код свой специфический api который капот автоматически трекать конкурентный вызов асинхронный цепочка отменять устаревать проблема это именно api  оно очень специфичный вид поведение  порог вход достаточно большой мало mol  уметь автоматический отмена      import  from subject  from rxjs import  switchmap  from rxjsoperators  const geta  async      const a  await apigeta   return a   const getb  async params     const b  await apigetbparams   return b   export const event  new subject event   pipe     switchmap  fromgeta     switchmapa  fromgetba      subscribeb  setstateb      reduxjstoolkit   createlistenermiddleware  api который некоторые фич reduxsaga который позволять решать примитивный случай проблема отслеживание цепочка локальный интегрировать все api тулкит    еще вариант      контекст  статья обсуждать автоматический отмена задача общий  смотреть асинхронный контекст вызов бекенд асинхронный контекст давно являться важный инструмент надежный код nodejs  asynclocalstorage  идти обсуждение внедрение стандарт  ecma tc39 proposal slides  код мочь выглядеть каждый цепочка  context  свой собственный abortcontroller      const context  new asynccontextnew abortcontroller  const geta  async      const a  await apigeta   contextgetthrowifaborted   return a   const getb  async params     const b  await apigetbparams   contextgetthrowifaborted   return b   export const event  async      contextgetabortconcurrent   contextsetnew abortcontroller   const a  await geta   const b  await getba   setstateb      представлять писать сложный асинхронный конкурентный многоступенчатый логика асинхронный контекст точно делать это надежно просто    возможность использовать какието полифил сожаление тим ангуляр давно пытаться это сделать zonejs покрывать кейс получаться    вернуться вопрос проброс первый аргумент какогото контекстный значение именно сделать reatom  первый аргумент приходить  ctx  это конвенция который соблюдаться связанный функция очень удобный  ctx  содержаться несколько полезный свойство метод реактивность управление сайдэффект иммутабельный помогать дебаг еще переопределять упрощение тестирование    вернуться наш баран  автоматический отмена пакет  reatomasync  фабрика  reatomasync  заворачивание асинхронный функция трекер контекст который автоматически искать приходить  ctx  abortcontroller подписываться контроллер отменять вручную использовать оператор  withabort  который отменять конкурентный запрос      import  reatomasync withabort  from reatomasync  const geta  reatomasyncasync ctx     const a  await apigeta   return a   const getb  reatomasyncasync ctx params     const b  await apigetbparams   return b   export const event  reatomasyncasync ctx     const a  await getactx   const b  await getbctx a   setstateb pipewithabort   прелесть этот существовать api добавлять поддержка abortcontroller сложно это очень простой паттерн  перепрокидывание первый аргумент требовать специфический знание изучение новый концепция  стоить просто принимать конвенция писать несколько символ возможный необходимость мочь прозрачно расширять контекст добавлять необходимый фич важно передавать контекст иммутабельный какомто редкий случай хватать  reatomlogger  контекст просто инспектировать дебаживать документация гайд это    повторяться важный отличие реализация отмена reatom rxjs reduxsaga являться использование нативный abortcontroller который являться стандарт использоваться браузер nodejs также множество другой библиотека внутри  reatomasync  контроллер доставать напрямую контекст  ctxcontroler  подписываться событие отмена прокинуть  signal  нативный fetch отменять существовать браузерный запрос  хороший практика тк одновременно существовать лишь 6 соединение случай другой библиотека который предоставлять abortcontroller запрос отменять приложение зависать браузер мочь тормозить новый запрос получение свежий данные    круто еще reatom вспомогательный пакет разрабатываться один монореп очень интегрироваться друг друг например  onconnect пакет reatomhooks  прокидыват",
    "tags": [
        "ruvds_статьи",
        "reactive programming",
        "redux",
        "состояние",
        "state",
        "state management",
        "state manager",
        "react",
        "reactjs",
        "react.js",
        "reatom",
        "rx",
        "rxjs",
        "redux saga"
    ]
}