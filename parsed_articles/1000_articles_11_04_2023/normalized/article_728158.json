{
    "article_id": "728158",
    "article_name": "Если вы отказались от регулярных выражений, то теперь у вас три проблемы",
    "content": "известный шутка программист гласить решение ваш проблема включать парсинг текст помощь регулярный выражение два проблема некоторый программист прочитывать шутка решать попробовать иной подход возможно регулярный выражение нужный возможно задача решать простой split строка чемто подобный однако другой мочь задумываться немного глубоко задаваться вопрос сделать нечто настолько дерзкий результат получать проблема пост написать такой дух    он использоваться код python однако легко адаптировать любой язык поддержка функция высокий порядок      элементарный частица  задумываться парсинг понимать многое связанный потребление входной данные давать написать функция выполнять задача     def shiftinp     return boolinp and inp0 inp1  получать входной последовательность  inp  возвращать первый элемент  inp0  оставаться элемент  inp1  входной данные возвращать  false  функция выглядеть странно работать пошагово символ строка      shiftbar b ar  shiftar     применяться оставаться символ ar a r  shiftr r   shift false   полезно бывать создавать каждый функция обратный функция крайний мера это научаться работать физический расчет противоположно потребление входной данные разуметься отсутствие потребление входной данные давать написать функция     def nothinginp     return none inp   nothing  выполнять обработка возвращать  none  любой входной данные также возвращать получать входной данные изменение      nothingbar none bar    nothing  отличаться отсутствие доступный входной данные просто означать решать   делать иметься входной данные    оба функция являться пример быть называть парсер парсер  это функция определять свой сигнатура вызов соглашение возвращать данный частность парсер  это любой функция принимать какието входной данные  inp  случай успех возвращать кортеж  value remaining   value   это некий нужный значение  remaining   оставаться входной данные парсинг который нужно выполнять неудача парсер возвращать  false     хотя функция короткий еще сокращать помощь  lambda      shift    lambda inp boolinp and inp0 inp1 nothing  lambda inp none inp  преимущество  lambda  делать код компактный наглядный кроме позволять разработчик пытаться добавлять значимый имя документация type hint то развертывать    кстати  lambda   это третий проблема сдвиг лямбда  это проблема давать двигаться далеко      система парсинг  получать называться система парсинг любой система она правило система мочь использовать иметься парсер  shift   nothing  также использовать  lambda  создание новый парсер иметься все      модификатор парсер  давать написать правило применять предикат результат парсер     filt  lambda predicate           lambda parser            lambda inp mparserinp and predicatem0 and m  лямбда моржовый оператор вычисление краткий схема ужас твориться мочь использовать вместо четыре лямбда     filt  lambda predicate           lambda parser            lambda inp              lambda m m and predicatem0 and mparserinp  однако читаемость важный то  бог любить троица проблема лямбда бивень четыре лямбда один бивень    функция  filt  получать вход предикат парсер комбинировать создавать новый парсер это выглядеть немного странно работать схожий декоратор пример это использовать      digit  filtstrisdigitshift  letter  filtstrisalphashift  digit456 4 56  letter456 false   возвращать значение  false  данный случай означать парсинг срабатывать точно  shift  возвращать  false  заканчиваться входной данные создавать помощь  filt  парсер возвращать  false  создавать значение соответствовать передавать предикат    забавный формулировка  filt  позволять легко создавать другой тип полезный фильтр просто передавать произвольный предикат фильтр точный соответствие литерал     literal  lambda value filtlambda v v  value  фильтр который значение должный браться заданный множество допустимый значение     memberof  lambda values filtlambda v v in values  несколько пример применение этот фильтр иметься парсер      dot  literalshift  even  memberof02468digit    digit shift  dot456  456  dot456 false  even456 4 56  even345 false   естественно продолжать все упрощать выявлять соответствие отдельный символ написать следующий вспомогательный функция     char  lambda v literalvshift    dot  char  dot456  456   аналогично то задача  filt  заключаться игнорирование элемент противоположность игнорирование являться какоето действие поэтому сохранять баланс код мы нужный противоположный сила давать называть операция  fmap      fmap  lambda func           lambda parser            lambda inp mparserinp and funcm0 m1   fmap  получать вход функция парсер создавать новый парсер который передавать функция применяться успешный парсинг  fmap  использоваться преобразование значение например      ndigit  fmapintdigit  ndigit456 4 56  tenx  fmaplambda x 10x  tenxndigit456 40 56  tenxdigit456 4444444444 56    примечание   map   filter   имя встроенный функция который python использовать работа итерировать элемент использовать это запутывать присвоение имя поэтому выбирать  fmap   filt  концептуальный наш функция служить семантически схожий цель      повторение  пока наш парсер работать одиночный входной данные делать интересный вещь нужно заставлять сопоставлять несколько входной данный например несколько цифра буква здорово смочь задавать нечто подобный     digits  one_or_moredigit  сделать это мочь использовать функциональный техника задействующий рекурсия однако скажем напрямую  python ужасно справляться рекурсия различный причина меньший который являться внутренний ограничение рекурсия делать быть вместо вдохновляться театр сломать четвертый стена повертываться зритель признавать всетака писать код python ладно     def one_or_moreparser     def parseinp         result            while mparserinp             value inp  m             resultappendvalue         return boolresult and result inp     return parse  цикл  while  согласоваться наш система лямбда однако сказать это pythonic просто ломать ограничение рекурсия поэтому давать сделать другой наш функция  one_or_more  принимать вход парсер создавать выход новый парсер многократно вызывать передавать парсер пока находиться совпадение список создавать      digit  filtstrisdigitshift  digits  one_or_moredigit  digits456 456   digits1abc 1 abc  digitsabc false   нравиться цифра разделять список использовать  fmap  снова соединять      digits  fmapjoinone_or_moredigit  digits456 456    нужный числовой значение добавлять еще один  fmap       value  fmapintdigits  value456 456     примечание  показывать свой коллега функция  one_or_more  вероятно рассердиться соблюдать руководство стиль сказать ты нужно использовать лямбда исправлять этот просто возможно удаваться обманывать помощь  functoolswraps      from functools import wraps  wrapslambda parser_ def one_or_moreparser     wrapslambda inp_     def parseinp              return parse  крайний мера случай функция выглядеть браться лямбда ктото потратить время изучение ее определение     домашний задание  просто переписывать  one_or_more  пользоваться ничто кроме лямбда рекурсия      последовательность  нужно спарсить один другой написать оператор последовательность     def seqparsers     def parseinp         result            for p in parsers             if not mpinp                 return false             value inp  m             resultappendvalue         return result inp     return parse   seq  получать вход произвольный количество парсер затем создавать новый парсер который выстраивать порядок другой успешный завершение парсинг парсер должный успешно выполнять задача пример      seqletter digit lettera4x a 4 x   seqletter digit letterabc false  seqletter fmapjoinone_or_moredigitx12345 x 12345     написать способ задание последовательность создавать полезный вариант например полезно выбирать левый правый часть пара     left  lambda p1 p2 fmaplambda p p0seqp1 p2 right  lambda p1 p2 fmaplambda p p1seqp1 p2  пример      leftletter digita4 a   rightletter digita4 4     домашний задание  написать версия  seq  исполь",
    "tags": [
        "ruvds_перевод",
        "regex",
        "regexp",
        "парсинг данных",
        "парсеры",
        "композиция"
    ]
}