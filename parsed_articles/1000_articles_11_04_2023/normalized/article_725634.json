{
    "article_id": "725634",
    "article_name": "Тестирование remote push notifications на iOS, когда используем Firebase Cloud Messaging",
    "content": "привет хабр звать максим толстиков iosразработчик учира отправка пушуведомление наш команда использовать   firebase cloud messaging  недавно появляться задача  написать свой шаблон запрос отправка тестовый пушить который эмулировать работа бэкенд мы важно оставлять возможность кастомизировать payload независимо инфраструктура компания разрабатывать клиентский часть пуша ход решение задача выясняться cloud messaging простой  приходиться немало потрудиться он разбираться собираться разрабатывать подобный запрос наш статья помогать сэкономить время сила материал рассчитать тот иметь некоторый навык программирование целое знакомый ios командный строка сталкиваться сервис firebase понимать устраивать пушуведомление отправка пушь firebase отправка пушить использовать notifications composer  который позволять отправлять пуш прямо ваш проект  firebase console  admin sdk  который требоваться интегрировать собственный сервер использовать сервисный протокол fcm http v1 api  legacy  http protocol  legacy  xmpp protocol  notifications composer  простой гибкий другой поэтому мы подходить  admin sdk  требовать дополнительный усилие развертывание готовый работать  xmpp protocol  считаться устаревать сеть  писать  работа возникать сложность поэтому отказываться оставаться  cloud messaging api legacy   firebase cloud messaging api v1   позволять довольно просто описывать отправлять запрос решать рассматривать fcm token независимо api использовать мы понадобиться  fcm token  это строка который возвращаться мы успешный регистрация устройство firebase токен служить адрес устройство который быть отправлять пуш подробно токен взять почитать   set up a firebase cloud messaging client app on  раздел документация посмотреть работать каждый api выбирать подходящий api legacy пуша хотеть передавать данные вид ключзначение воспользоваться api legacy  легко работать    aps      alert        title title text       body body text       sound default     badge 1     mutablecontent 1      custom_key custom_value  потребоваться просто подставлять  server key  авторизационный хедер запрос header authorization keyserver key находить server key  настройка ваш проект firebase  открывать настройка переходить вкладка  cloud messaging  поле server key  копировать токен состоять рандомный набор символ отмечать скриншот ниже  получать ключ  fcm token server key мочь  собирать свой запрос любой программа тестирование httpзапросов  например   postman  графический утилита лаконичность наглядно описывать атрибут запрос один место воспользоваться   curl  консольный утилита   использовать  cloud messaging api legacy  мочь написать запрос curl location  request post httpsfcmgoogleapiscomfcmsend  header authorization keyserver key  header contenttype applicationjson  dataraw      to fcmtoken     notification          mutable_content true   sound default         title title   body body       оставаться вставлять запрос терминал отправлять настраивать правильно устройство появляться пушуведомление либо допускать опечатка получать ответ ошибка скоро первый запрос вернуться именно ошибка описание ошибка полезный информация который помогать находить причина неудача  api v1 случай тело пушить необходимо передавать просто список параметр вид ключзначение  структура несколько уровень вложенность  использовать современный  api v1  это немного   сложный часть получение ключ авторизация запрос v1 использовать oauth2 access token целое разница этот подход посмотреть пример миграция  from legacy to v1  наглядно увидеть возможность современный api авторизационный токен  такой запрос согласно раздел  authorize send requests  получать вручную помощь  admin sdk  сделать просто  воспользоваться сервис  oauth 20 playground  который сгенерировать мы кратковременный токен наш аккаунт firebase получение токен нужно переходить сервис  oauth 20 playground  проделывать следующий шаг шаг 1 раздел  firebase cloud messaging api v1  нужно отмечать пункт  httpswwwgoogleapiscomauthfirebasemessaging   нажимать синий кнопка  authorize apis сервис запрашивать разрешение доступ аккаунт firebase нужно  разрешать доступ  сервис смочь сгенерировать временный access token шаг 2 генерировать токен нужно нажимать синий кнопка   exchange authorization code for tokens  результат ответ консоль увидеть токен отмечать скриншот либо ошибка который описывать пойти получать авторизационный токен нужно  составлять правильный url  запрос содержать  project id  который брать настройка проект открывать настройка вкладка general строка project id копировать значение вставлять url показывать скриншот httpsfcmgoogleapiscomv1project idmessagessend подготовить oauth token url  воспользоваться   fcm rest api   составлять требовать json  например тело пушить потребоваться передавать объект nested_struct мочь написать отправлять запрос  curl x post h authorization bearer oauth_access_token    h contenttype applicationjson    d         message             tokenfcmtoken           apns                headers                    apnspriority 10                   apnsid uuid                   apnspushtype alert                                payload                     aps                        mutablecontent 1                        sound default                      alert                             title title                            body body                                                nested_struct                             type notification_type                            uchi_unique_key uuid                            another another                                                                                          httpsfcmgoogleapiscomv1projectsprojectidmessagessend http11 ответ запрос прийти данные который декодировать такой структура struct pushentity codable    let googlesenderid string   let gcmmessageid string   let google string   let aps aps    enum codingkeys string codingkey      case googlesenderid  googlecsenderid     case gcmmessageid  gcmmessage_id     case google  googlecae     case aps      extension pushentity    struct aps codable      let alert alert     let nestedstruct string string       enum codingkeys string codingkey          case alert         case nestedstruct  nested_struct           extension pushentityaps    struct alert codable      let body string     let title string     получаться декодировать причина понимать описание ошибка который появляться консоль нужно оборачивать  payload отдельный объект  например такой образ инкапсулировать логика обработка данные пушить каждый отдельный приложение логика обработка пуша оставаться общий приложение меняться заключение итак узнавать какой возможность открываться разработка отправка тестовый пушь ios использовать различный вид api отправка подобный запрос намного легко находить подходящий вариант написать запрос эксперимент пушуведомление успешный разработка хотеть развивать школьный edtech вместе мы  присоединяться команда учира",
    "tags": [
        "пуш уведомления",
        "ios",
        "firebase cloud messaging"
    ]
}