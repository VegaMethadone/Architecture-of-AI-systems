{
    "article_id": "725612",
    "article_name": "Проверяй и доверяй: упрощаем функциональное API-тестирование в облаке",
    "content": "компания переводить свой продукт облако  сталкиваться весь сложность тестирование облако это непростой процесс каждый облако состоять множество сложный вторичный сервис широкий функциональность тесно связывать друг друг нужно думать написать тест универсальный переносить поставляться разный окружение    звать павел балахонов старший инженер автоматизированный тестирование статья рассказывать упрощать автоматизировать функциональный тестирование  private cloud vk   платформа построение частный облако крупный компания госорганизация какой решение использовать актив открыто общий использование     почему именно функциональный тестирование  важный проверять работоспособность продукт облако главный инструмент проверка  функциональный тестирование оно позволять проверять работа компонент контекст облако позиция взаимодействие конечный пользователь    поэтому наш команда приоритетный становиться именно функциональный apiтестирование apiтесты быстро ui мало привязывать структура изменение dom страница позволять проверять работа функциональность параметр который невозможно передавать фронтенд изза специфика интерфейс скажем создавать база данные trove знать наверняка реализоваться бэкап ломаться таблица    общий apiтестирование  ключ уверенность продукт жизнеспособный работать облако поэтому первый объект автоматизация становиться именно оно     выбор стек  этап выбор стек возможный вариант действие       взять классический стек pytest test runner  assertions allure report system requests http client     адаптировать фреймворка который использовать тестирование публичный облако     взять готовый инструмент написание функциональный apiтестов      первый вариант отмель сразу несколько причина     сложно  несмотря pytest allure  самый популярный рынок решение мы подходить самый простой функциональность случай потребовать очень ресурс например сделать гибкий авторизация облако нужно просто обеспечивать заведение необходимый ресурс keycloak iam озабочиваться поддержка ролевой модель получение токен авторизация разный группа пользователь сгенерировать пользователь разный роль брать ферма это увеличивать время прогон тест примерно час     гибкость  важный возможность запуск тест различный роль передача этот роль такой функциональность приходиться создавать ноль отнимать сила время     сложный интеграция  iaas paasкомпонентами облако который нужно добавлять огромный количество restклиентов     система чистка ресурс  поэтому приходиться неизбежно закладывать ресурс реализация    второй вариант казаться жизнеспособный проверка выясняться большинство фреймворков публичный облако невозможно очень сложно адаптировать частный наш случай месяц уходить вычитка кодовый база приходить простой вывод интеграция фреймворок публичный облако тесный просто сделать чтото свой    результат останавливаться третий вариант взять готовый инструмент адаптировать свой задача такой инструмент становиться tempest     tempest почему взять адаптировать получаться  почему решать останавливаться tempest       openstack  фреймворк относиться категория открытый     простой интеграция конвейер  tempest написать python большинство компонент частный облако это упрощать адаптация существовать разработка новый тест разработчик который писать новый сервис язык     интеграция iaas  серьезно упрощать адаптация наш облако     механизм чистка  коробка       адаптировать tempest  первый дело приходиться настраивать взаимодействие tempest коробка заводить пользователь проект keystone получать оттуда токенавторизация подписывать запрос умолчание считать достаточно взаимодействие iaas paasкомпонентами мы мало поэтому сделать сначала заходить keycloak создавать пользователь realm группа который синхронизироваться iam создавать проект iam распределять роль группа обмен токен авторизация keystone происходить этот действие  значит запрос отправляться создавать пользователь рамка реально создавать проект тот роль который добавлять группа    далее приходиться решать задача валидация ответ сначала решать ряд запрос быть валидировать схема функциональность нарушаться изза смена тип ответ причем возможно тип редкий неиспользуемый тест изза смена упасть мы приходиться тратить ресурс адаптация почему решать избавляться валидация ответ схема проверять функциональность    кроме решать paasтесты запускать тот проект который заводить iam iaas  пользователь заданный роль роль мочь менять тесткейс это прямой указание другой случай iaasфункциональность тестироваться администратор облако    договариваться покрывать автотест функциональный единица быть закрывать негативный тест это важный точка зрение входной данные пользователь являться генератор случайный данные важно иметь подстраховка случай какихто спецсимвол название виртуальный машина вообще два виртуальный машина одинаковый название этот доработка защищать большой количество баг негативный тесткейс     тестдизайн  тестдизайн стек несколько возможный вариант первый  написать монолит автоматизация включать тест компонент облако случай приходиться решать вопрос заказчик который различный окружение потребность один нужный iaas другой  кластер облако третий  база данные облако    поэтому выбор тестдизайн решать пойти путь тестирование компонент каждый репозиторий представлять себя tempestплагин сущность определение контекст тестирование каждый содержать тест свой компонент точка зрение разработка поддержка это сложно приходиться постоянно переключаться окно ide зато решаться вопрос предоставление индивидуальный окружение инженер приходить мы тестирование нейтрон получать необходимый тест весь монолит совокупность     архитектура  архитектура решать сделать двухуровневый sut restклиенты взаимодействие тест restклиенты состоять базовый интерфейс cruid create read update insert delete наследоваться родительский restклиента tempest который реализовать один важный функция  возможность получение различный тип endpoint сервис например public endpoint manila случай нужный сервис каталог endpoint обнаруживаться добавлять restклиент фреймворок возможность передача base url сервис     конфигурация  один важный преимущество tempest  простота конфигурирование конфигурация определять добавлять регистрировать категория опция configpy группа параметр группа     строиться работа автотест  изза стандарт безопасность автотест разрабатывать удаленный машина тот сеть который работать коллега собирать проект jenkins противный случай приходиться каждый ходить коллега иб просить сделать доступ порт    каждый автоматизатор создавать машина dev облако подключаться забирать кодовый база нужный компонент адаптировать наш облако разрабатывать новый автотест согласно сценарий один сторона это требовать время хотя подключение виртуальный машина devpoint сторона соблюдаться стандарт безопасность кодовый база храниться виртуальный машина внутри компания    помимо автоматизатор vk пользоваться наш тесто мочь сторонний команда  кто нужный готовый решение протестировать собственный продукт облако внешний автоматизатор готовить dockerобразы плагин тестирование различный компонент облако помощь который легко запускать автотест тестировать отдельный компонент любой окружение  публичный частный облако любой ванильный openstackсервисе     ресурс скорость поиск баг повышать доверие автоматизация  суть автотест сэкономить время ресурс тестирование продукт никакой экономия получаться тестироваться быть далекий реальность юзеркейс сам тест быть медленный застраховываться дорабатывать cleanupсервис tempest адаптировать наш коробка    чистка ресурс включать этап чистка слепок облачный платформа teardownсобытиям запущенный прогон тесто важно контролировать ресурс создавать запуск тесто регистрировать событие удаление это позволять создавать лишний ресурс тестировать квота максимально приближать квота заказчик    важный момент  поиск баг один главный химера мир автоматизация  flakyтесты тест поочередно становиться зеленый красный зеленый никто конец знать являться это баг просто ошибка тесто    долго спорить природа flakyтес",
    "tags": [
        "vk cloud",
        "api тестирование",
        "функциональное тестирование",
        "temptest",
        "flaky тесты",
        "private cloud"
    ]
}