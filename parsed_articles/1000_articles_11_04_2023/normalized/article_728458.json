{
    "article_id": "728458",
    "article_name": "Как выжать 1,5 терафлопса производительности для 32-битных чисел с плавающей точкой на одном процессоре M1",
    "content": "заниматься обучение крупный современный нейросеть этот статья тема a100 скорость сто высоко 156 терафлопс   интересный этот полтора терафлопс     работа один ядро macbook air 2020 год питание батарея   выполнение задержка 05  наносекунда  инструкция     говорить мощный ускоритель тензорный ядро графический процессор лишь настоящий производительность линейный алгебра который отстоять регистр процессор  цикл    странно apple прятать штука статья рассматривать код который позволять мы приподымать завеса тайна код использоваться заголовок  aarchh  замечательный  репозиторий  corsix   такой сопроцессор amx   суть это simd стероид важный особенность отношение amxcpu равный 11 сопроцессор amx каждый ядро   размер который использовать загрузка хранение значение     размер  minimum  равный ширина полный регистр avx512   откуда загружаться храниться значение понятно такой размер довольно быстро заполнять файл регистр neon отдельный регистровый файл специально amx выглядеть весьма странно   регистр распределять группа x y z группа x y храниться входной значение каждый инструкция группа z  выходной значение     группа x y маленький уходить целый килобайт z вообще какой ворота     спойлер 1024 байт 14 группа zрегистров мочь полностью занимать один инструкция amx попадать x y z способ едва умещаться кодировка isa поэтому большой часть информация инструкция apple закодировать регистр общий назначение оказываться это классно работать возможность конфигурировать код amx лет  время выполнение    цель пост  добиваться сопроцессор предельный мощность инструкция умножение вектор который выводить вектор одинаковый длина далеко исчерпывать вычислительный возможность микросхема добиваться реальный эффект приходиться вместо использовать внешний произведение   такой внешний произведение пусть вектор u v       внешний произведение этот вектор  это матрица который содержать произведение возможный попарный комбинация элемент это немного прояснять почему группа регистр z настолько группа x y       микросхема amx это сводиться очень простой инструкция     еще флаг который устанавливать суммировать нарастание accumulate данные прошлый результат     итак необходимый написать умножение матрица перезагружать 16 значение плавать точка входной матрица суммировать внешний произведение нарастание вывод размерность 16x16 уменьшение размерность k никакой роль играть   упрощать задача неявно транспонировать матричный умножение  a   b  наш входной данные основной размерность быть иметь размерность уменьшение  k  практика это иметь большой значение значительно упрощать код   ссылка помощь который предлагать решение проверять   void reference_16x16xkfloat a float b float c uint64_t k    for uint32_t m  0 m  16 m      for uint32_t n  0 n  16 n        cn  16  m  0       for uint32_t k  0 k  k k          cn  16  m  ak  16  m  bk  16  n                   проверять amx    only set for k  0 uint64_t reset_z  1ull  27  for uint32_t k  0 k  k k    uint64_t idx  k  4    64 bytes  16 floats   amx_ldxuint64_ta  k  64   amx_ldyuint64_tb  k  64     now we do 4 indepedent outer products avoiding pipeline hazards   amx_fma32reset_z   reset_z  0    примечательно обращаться адрес  один  регистр вернее обращаться тайно точно  reset_z  кодироваться битовый маска адрес регистр кодироваться аргумент передавать  amx_  указатель a b использовать лишь 56 бит поэтому инженер apple запрятывать данный оставаться восемь бита просто случайно устанавливать значение 0 итак данный случай применяться регистр 0 x y   код сохранение регистр z память немного сложно заполняться первый столбец это означать нужно занимать регистр 0 4 8 т д   for uint64_t i  0 i  16 i    const uint64_t z_register  i  4ull  56   amx_stzz_register  uint64_tc  i  64    сожаление загружать размещать выше код увидеть страшно тормозить это какаято пара сотня гигафлоп почему два причина   первый  конфликт конвейерный обработка pipeline hazard   pipeline hazard  общий название случай результат один инструкция требоваться выполнение последующий первый завершаться  каждый инструкция amx_fma32 зависеть предыдущий поскольку суммировать нарастание единый подмножество регистровый файл итог использоваться 25 регистровый файл полный мощность остальное оставлять незадействованный мешать распараллеливание уровень инструкция   второй причина  неэффективный загрузка память одновременно загружать 128 байт приводить выше код загружать 64 байт аналогично мочь выполнять загрузка  другой  регистр загружать каждый один тот это позволять немного распараллелиться уровень инструкция   план     планировать загружать 128 байт x y затем рассчитать блок 32x32 потребоваться 4 независимый расчет блок 16x16 позволять добиваться параллелизм уровень инструкция также эффективно использовать загружать память каждый 64байтовый регистр использоваться дважды   void mm32x32xkfloat a float b float c uint64_t k      flag to loadstore 128 bytes   const uint64_t load_store_2  1ull  62   const uint64_t load_store_width  128  in bytes     only set for k  0   uint64_t reset_z  1ull  27    for uint32_t k  0 k  k k      uint64_t idx  k  4      load to x y skipping every other index because were loading 128 bytes     amx_ldxload_store_2  idx  2  56  uint64_ta  k  load_store_width     amx_ldyload_store_2  idx  2  56  uint64_tb  k  load_store_width       offset into x and y registers is bytewise     const uint64_t offset  idx  load_store_width       now we do 4 indepedent outer products avoiding pipeline hazards     amx_fma32reset_z  0ull  20  offset   0ull  10  offset   0ull  0     amx_fma32reset_z  1ull  20  offset  64ull  10  offset   0ull  0     amx_fma32reset_z  2ull  20  offset   0ull  10  offset  64ull  0     amx_fma32reset_z  3ull  20  offset  64ull  10  offset  64ull  0     reset_z  0       for uint64_t i  0 i  16 i       store interleaved     amx_stzload_store_2  i  4ull  0  56  uint64_tc  i  load_store_width     amx_stzload_store_2  i  4ull  2  56  uint64_tc  16  i  load_store_width       высоко добавлять комментарий пара интересный штука флаг инструкция corsix отлично объяснять поэтому просто оставлять ссылка объяснение     загрузка хранение  флаг   флаг  fma     быстро это приходить это зависеть число килобайт 15tflops приходить высокий значение     удивительно большой задача получать хороший относительный производительность кеш возможность разогрев процессор  чередование инструкция   целое фон большой современный нейросеть работать общий искусственный интеллект размер просто микроскопический менее тип производительность открывать дверь меньший нейросеть который мочь находить место реальный современный вычисление прогноз выполнять ноутбук питание батарея пара десяток наносекунда скоро иметь ценность тот ценность который мочь добавлять место иначе мочь применяться эвристика   иной слово мнение автор выполнять прогноз иметь ценность тот ценность который добиваться эвристика думать этот повод спасибо внимание       профессия data scientist 25 месяц   профессия fullstackразработчик наpython 16 месяц                               краткий каталог курс                           data science иmachine learning     профессия data scientist   профессия data analyst   курс математика data science   курс математика иmachine learning data science   курс поdata engineering   курс machine learning иdeep learning   курс поmachine learning     python вебразработка     профессия fullstackразработчик наpython   курс python вебразработка   профессия frontendразработчик   профессия вебразработчик     мобильный разработка     профессия iosразработчик   профессия androidразработчик     java иса     профессия javaразработчик   профессия qaинженер наjava   профессия сразработчик   профессия разработчик игра наunity     отоснова вглубина     курс алгоритм иструктура данные   профессия c разработчик   профессия белый хакер     атакже     курс поdevops   курсы",
    "tags": [
        "skillfactory",
        "m1",
        "производительность",
        "математика",
        "программирование",
        "числа",
        "матрицы",
        "векторы",
        "c++",
        "amx"
    ]
}