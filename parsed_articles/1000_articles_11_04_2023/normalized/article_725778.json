{
    "article_id": "725778",
    "article_name": "Что под капотом у Leak Canary?",
    "content": "утечка память пожалуй один самый незаметный ошибка который допускать разработка такой ошибка никак влиять работа приложение сложно отлавливать этап тестирование однако приводить лаг устройство пора крэш насколько внимательно относиться код изза человеческий утечка рано поздно всплывать причем утечка память довольно часто бывать сторонний библиотека разработчик хотеться иметь инструмент который позволять отслеживать утечка память автоматически ручной анализ dump heap постоянный мониторинг потребление память ide перевес ребята небезызвестный square сделать инструмент год эдак 78 назад leakcanary  библиотека позволять находить утечка память работа приложение фоновый режим весь сторона клиент делать нужно просто указывать либ зависимость gradle сам сделать естественно инженерный любопытство заставлять задаваться вопрос работать этот магия этот статья давать поверхностный ответ вопрос статья постараться описывать запускаться leakcanary откуда браться ярлык вообще leakcanary находить утечка находить путь утекать ссылка запускаться leakcanary каждый android приложение файл androidmanifestxml файл нужный показывать система какой компонент какой событие хотеть отлавливать какой разрешение мы нужный дофига манифест показывать наш приложение уметь какой данные предоставлять приложение состоять многий android модуль каждый такой модуль определять свой androidmanifestxml который быть описываться использовать компонент activity service тд установка приложение собирать приложение компилятор мержать манифест большой конечный архивеарк система ожидать увидеть файл androidmanifestxml это нужный объединение манифест посреди основной компонент приложение использовать часто позволять делать интересный штука  content provider основной компонент предназначаться обмен данные приложение передача данные интересовать интересовать два особенность вопервых метод oncreate content provider вызываться oncreate application изза content provider часто использовать какойнибудь аналитик который нужно настраивать запуск самый приложение вовторых это единственный компонент приложение который создаваться момент старт приложение наш участие другой слово указывать content provider манифест система точно запускать порядок запуск компонент это давать возможность отслеживать момент запуск приложение получать контекст нужно нигде прописывать система сам создавать content provider дернуть метод oncreate получать вывод  вывод номер  1  нужно проверять код незнакомый библиотека один оказываться content provider который безнаказанно стырить данные пользователь отправлять левый сервер вывод номер  2  прикручивать функциональность прописывать код именно механизм использовать leakcanary библиотека просто подсовывать свой content provider самый отлавливать момент запуск приложение далее получать доступ context leakcanary получать доступ практически ко весь приложение навешивать куча листнер который позволять отслеживать activity fragment service тд схема работать некоторые библиотека гугл вроде firebase откуда браться отдельный ярлык этот пункт leakcanary просто вообще указывать система какой activity нужно запускать первый опятьтаки androidmanifestxml специальный intentfilter который указывать activity intentfilter прописывать  action  показывать какой действие система должный предлагать activity  category   показывать система дополнительный инф располагать activity главный activity  action    androidintentactionmain   category    androidintentcategorylauncher  система читать manifest исходить этот  action   category  понимать данный activity нужно отображать лаунчер интересный момент заключаться такой activity возможность сделать 3 разный точка вход приложение причем разный иконка разный название leakcanary свой манифест подсовывать такой activity свой иконка нажатие икона открываться главный activity ваш приложение activity библиотека информация утечка однако оставаться очень удобный поведение сначала запускать activity leakcanary затем запускать activity наш приложение неудобство понятно делать навигация тк это вроде два отдельный часть приложение который должный вместе убирать этот неудобство использоваться  taskaffinity  activity запускаться стек который чемто напоминать стек фрагмент хотя скоро наоборот стек фрагмент делать копия стек activity этот стек приложение несколько умолчание activity запускаться один стандартный однако использовать атрибут  taskaffinity  указывать прописывать какуюто уникальный строка taskaffinity желательно строка ваш applicationid дабы путаница другой приложение activity быть запускаться стандартный стек указанный вы лаунчер список запущенный приложение стек быть разный отдельный приложение leakcanary работать тупо делать отдельный стек свой activity это позволять сделать полный видимость один приложение первый основной второй который связывать исключительно информация утечка leakcanary вообще находить утечка основа механизм лежать простой идея понимать идея достаточно знать тип ссылка тот самый тип который большинство случай упоминаться собес нужно быстро пофиксить утечка память который знать  4 тип ссылка java интересовать 2 сильный strong reference слабый weak reference сильный ссылка просто пока этот ссылка существовать гдето gc точно удалять объект который ссылка привязывать  слабый ссылка такой кейс гарантировать сохранение объект другой слово создавать объект полагать слабый ссылка слабый ссылка понадобиться это объект ссылка оказываться просто null gc решать память мало просто удалять объект привязывать слабый ссылка однако одновременно слабый сильный ссылка объект gc удалять объект нехватка память соответственно разрывать связь слабый ссылка объект возвращаться работа leakcanary библиотека получать context приложение вешать специальный листенер который позволять отслеживать момент любой activity умирать перехватывать момент activity умирать leakcanary оборачивать activity слабый ссылка сохранять затем сразу запускать gc точно сказать рекомендовать jvm запускать gc  systemgc does not garbage collect every time runtimegc is  more likely to perform a gc runtimegetruntimegc threadsleep100 systemrunfinalization какогото время библиотека смотреть обнулиться ссылка обнулиться значит ока никакой утечка ссылка попрежнему null значит гдеть сильный ссылка означать утечка аналогичный принцип библиотека использовать view fragment service последний правда использоваться невероятно сложный костыль рефлексия перехватывать момент смерть установление факт утечка  leakcanary  начинать поиск путь ссылка изза который происходить утечка единственный способ это сделать это получать dump память любой jvm предоставлять функционал получение копия объект память удобный формат провожать анализ получать копия память android достаточно вызывать функция  debugdumphprofdatafile  функция передавать путь файл далеко система сделать итак получать файл который лежать информация объект jvm определенный момент время далеко нужно както начинать поиск утечка куча объект особо понятно вообще нужно начинать поиск leakcanary решать проблема самый простой способ библиотека использоваться обычный weakreferece подкласс keyedweakreference немой дополнительный инф ссылаться этот ссылка утекать объект это нужно различать какой ссылка ссылаться утечка какой просто висеть момент память далеко вспомнить такой gc root gc root это корень объяснение перевод писатель который тянуться ссылка heap частность это поток точно стек весь статика сlassloaders jni ссылка думать суть понятный анализатор утечка получать копия память искать объект класс   keyedweakreference  затем просто ссылка смотреть объект ссылаться такой образ находить утекать объект это activity view тд утекать  находить утекать объект нужно построить путь gc root находить ссылка изза который собстный утекать использоваться алгоритм граф поиск короткий путь недумывать алгоритм нужный разработка мобильный приложение  нахождение ссылка оставаться это сохранять путь отображать интерфейс сам концепция rocket science однако реализация алгоритм поиск путь g",
    "tags": [
        "android",
        "leakcanary",
        "tools",
        "android dev",
        "memory"
    ]
}