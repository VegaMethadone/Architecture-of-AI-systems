{
    "article_id": "726130",
    "article_name": "Kotlin Multiplatform Mobile: как усложнить жизнь себе и упростить её потомкам",
    "content": "навнутренний проект red_mad_robot нехватать iosразработчиков иhead ofandroid red_mad_robot central asia влад бауэр задумываться отом ускорять процесс ивитог решать пошарить часть код иперенести вkotlin multiplatform mobile спойлер унего получаться итеперь онрассказывать онюанс скоторое приходиться сталкиваться вred_mad_robot нетолько клиентский приложение ноивнутренний который помогать мы риск экспериментировать сновый технология один изтакие приложение qarent оно призывать автоматизировать учет тестовый девайс вофис уqarent два версия один девайса сотрудник другой тестовый натестовый мырегистрироваться вводить информация онема иосновной задача показывать qrкод сканирование личный девайс анань всваивать очередь мымочь посмотреть список иметься устройство отфильтровывать ихпоразличный параметр операционный система версия итд забронировать androidпроект приложение выглядеть стандартно uiнаcompose mvvm слой сетевой доменный иui разделение тип приложение наличный инатестовый девайса мыиспользовать  build flavours  каждый flavour представлять себя отдельный версия приложение нопофакт это один итоже просто сразный набор фич авот iosпроект интересно мыиспользовать redux presentationслоя проект поделить намножество модуль включая foundationмодули сбазовый логика featureмодули среализация конкретный функциональность модуль который собирать зависимость финальный модуль продукт подробно обэт рассказывать iosразработчики red_mad_robot стас анацкий ивлад марков  нанаш ноябрьский митапа  организация многомодульный работа изависимость мыиспользовать tuist изначально унас модуль тестовый личный иадминистративный девайс ноадминистративный модуль ios витог решать неделывать понимать мобильный приложение администрирование неочень удобно первый итерация ios иandroid вместе ходить всеть вкакойто момент iosразработчики расходиться надругой проект иandroidприложение становиться обгонять iosверсию сокращать отставание мырешить попробовать вынести часть логика вобщийкод уменя опыт работа сkotlin multiplatform mobile kmm ноприложение изначально такой незадумываться приходиться внедрять технология вуж существовать проект android все понятный jvm никуда недеваться ипофакт это просто очередной модуль впроект далеко вигра вступать kotlin native вместо генерировать байткод jvm kotlin компилироваться вмашинный код который оптимизировать взависимость отплатформа конкретно наios мыполучать фреймворк который подключать кпроект имож использовать нативный код решать начинать сотображение список устройство ифильтрация первый дело переводить сетевой слой вandroidпроекте сretrofit наktor проблема сэтим невозникать поэтому вынести сетевой слой вотдельный репозиторий иподключать кandroid kotlinбиблиотеку фич нужный авторизация номысчитывать делать еевобщий код это поспешный решение поэтому просто сделать интерфейс быть реализовывать наплатформа ичерез миниверсия самописный diпрокидывать вобщий код class platformdi constructorauthrepository authrepository      private val httpclient  httpclientrepository  authrepository     fun getfiltersapi filtersapi          return filtersapihttpclient       далеко нужно подключать весь это дело кiosпроекту издесить начинаться волшебный мир открытие исходить изпрошлое опыт ярассчитывать мывсе подключать спомощь  cocoapods  кстати недавно выходить  статья управление зависимость  подробно говорить число cocoapods новiosпроекте небыть авнутри tuist использоваться spm иcarthage яостанавливаться нат нужно превращать репозиторий сkmmпроектом вspmбиблиотеку поресерчивый плагин который помогать это сделать явыяснять пофакт происходить два вещь генерировать xcframework исоздавать файл packageswift сборка фреймворок вgradle  задача изкоробка  асоздавать файл ямочь исам ясобирать фреймворк пушить тег сверсия ився готовый подключение import packagedescription let packagename  shared let package  package     name packagename     platforms          iosv13          products          library             name packagename             targets packagename                   targets          binarytarget             name packagename             path sharedbuildxcframeworksreleasesharedxcframework                далеко tuist яподключать библиотека добавлять featureмодуль сфильтрация девайс посуть вios просто появляться еще сервис который ребята мочь использовать обычный suspendфункции  отлично работать  сasyncawait public final class filterserviceimpl filtersservice      private let filtersapi filtersapi     private let authrepo authrepository          public initauthrepo authrepository          selfauthrepo  authrepo         selffiltersapi  platformdiauthrepository authrepogetfiltersapi               public func getfilters async throws  filtersmodel          let filters  try await filtersapigetfilters         return filtersmodelfilters filters               public func getdevicesfilters devicefiltersmodel async throws  devicefullinfo          let devicefilters  filterstokotlinmodel         let devices  try await filtersapigetdevicesdevicefilters devicefilters         return devicesmap  devicefullinfodeviceinfo 0        ясоздавать мерджреквест ждать большой разочарование spm уметь тянуть общедоступный библиотека арепозиторий сkmm лежать нанаш приватный gitlab соответственно ci который крутить тест упасть изза немогать находить библиотека это сделать tuist  янеразобраться  идея быть рад ваш комментарий витог япросто полагать собирать фреймворк впроект решение быстрый нонесамое удачный даинеочень удобный приходиться каждый обновлять это весь вручную поздно янаходить решение водин строчка просто добавлять создание файл netrc савторизационный данные вci echo machine gitredmadrobotcom login ci_user password ci_token  netrc вынуждать признавать androidразработчик gradle довольно беспомощный создание второй итерация общий доменный слой вынести сетевой слой вkmm круто нонахабер это непохвастаться хотеться вынести вобщий модуль еще код наandroid разумеется проблема небыть скопировать доменный слой изпроект вставлять вkmmрепозиторий поправлять путь ивс круто яуж упоминать наios ребята вдохновляться redux единственный вчем приходиться отходить отканон вреализация presentationслоя этот наличие сущность presenter прослойка бизнеслогика иui водный проект сразу вариант реализация ui декларативный swiftui персональный девайс иuikit тестовый наswiftui писать становиться сios 13 старый оннедоступный ишь захотеть итерация решать заменять middleware неточтоба большой разница спредыдущий итерация ноуже мало код наплатформа вместо самописный diпоявился koin который прокидывать реализация авторизация вобщий код заодно немного переписаться работа сасинхронщина нужно работать несsuspendфункциями асflow сначала ядолго изобретать разный обертка апот просто  находить библиотека  немного обидно удалять пачка самописной wrapperов оверинжиниринг яуж говорить androidразработчик грустить gradle возникать потребность разделять приложение натестовый версия ирелизный вцелое задача состоять втом тестовый сборка ходить наодин api арелизный надруга тестировщик мочь создавать любой сущность нерисковать поломать работа приложение встор множество способ это сделать иявыбирать привычный разделение наdebug иrelease спомощь gradle номня казаться этот несамое удачный решение исейчас показывать почему вkotlin native проверка вкак режим скомпилироваться код platformisdebugbinary  вandroid классика  buildconfigdebug  спомощь expectфункции япроверять вобщий код ивыбирать нужный адрес нюанс проявляться передача общий код вios заодно ярешить немного это весь украшать нетягивать папка build врепозиторий сборка просто делиться наrelease иdebug ноназываться одинаково это выстреливать попытка стягивать сspm онбудет видеть одинаково называть бинарник расстраиваться ивыкинуть ошибка поэтому создавать отдельный фреймворок kotlinartifacts    nativexcframeworksdk   targetsiosx64 iosarm64 iossimulatorarm64   setmodules   projectshared      modesrelease      nativexcframeworksdkdebug   targetsiosx64 iosarm64 iossimulatorarm64   setmodules",
    "tags": [
        "red_mad_robot",
        "android development",
        "kotlin multiplatform mobile",
        "kotlin"
    ]
}