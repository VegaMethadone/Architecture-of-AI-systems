{
    "article_id": "727556",
    "article_name": "Настраиваем визуализацию",
    "content": "предыдущий статья  развертывать связка prometheusgrafana самый время подключать источник настраивать визуализация прежде напоминать какой элемент ита инфраструктура собираться собирать метрика прежде это оборудование операционный система дополнительный нормальный функционирование наш приложение невозможный затем мониторинг сам приложение например какой компонент расходовать тот иной ресурс мониторинг бизнеслогика приложение это например сбор информация активность пользователь поступление денежный средство тд мало просто собирать метрика важно правильно интерпретировать поэтому начало посмотреть именно хотеть мониторять затем быть визуализировать необходимый метрика зависимость тип ресурс который собираться метрика мы потребоваться различный информация собирать метрика хост мы потребоваться cpu memory processes disk network тд dockerконтейнер быть собирать cpu memory network block io  docker daemon  мониторинг приложение несколько сложно правило разработчик другой знать заниматься ваш приложение мочь реализовать релевантный метрика основной цель сбор метрика приложение являться выявление состояние производительность performance код также лишний мониторинг использование приложение конечный пользователь пример метрика собирать приложение являться время ответ запрос количество неудачный логинов пользователь тп отличительный особенность сбор метрика приложение являться данный метрика практически невозможно собирать внешний средство это делаться пример мониторинг операционный система сбор метрика описываться код сам приложение сбор бизнес метрика осуществляться средство сам приложение помощь дополнительный средство это возможный  рекомендация сбор метрика рассматривать рекомендация сбор различный метрика сбор инфраструктурный метрика подходить метод use utilization использование например загрузка диск saturation насыщение например очередь диск errors ошибка например ошибка io диск  типовой список ресурс который use рекомендовать осуществлять сбор метрика cpus sockets cores hardware threads virtual cpus memory capacity network interfaces storage devices io capacity controllers storage network cards interconnects cpus memory io стоить учитывать некоторый компонент представлять себя ресурс два тип устройство хранение данные  это ресурс запрос обслуживание io также ресурс емкость capacity оба этот тип ресурс мочь становиться узкий место система некоторый физический компонент опускать такой аппаратный кеш например mmu tlbtsb cpu метод use наиболее эффективный ресурс производительность который снижаться высокий загрузка насыщение приводить возникновение узкий место кеш повышать производительность высокий загрузка принимать решение нужно включать иной ресурс мониторинг необходимо опытный путем сначала включать мониторинг нужный ресурс посмотреть результат  устраивать например метрика информативный 0 константа посмотреть prometheus другой аналогичный метрика мониторинг разработчик метод use brendan gregg также предлагать метод определение тот ресурс метрика который необходимо собирать автор предлагать нарисовать функциональный блоксхема система который показывать взаимосвязь который мочь очень полезный поиск узкий место поток данный пример схема сервер sunfire основание подобный схема применительно оборудование указывать пропускной способность шина интерфейс применимый указывать объем память частота температура другой параметр результат благодаря обогащать значение схема мочь эффективно собирать метрика вести мониторинг целое метод use показывать вид блоксхема ниже    redметод метод use подходить мониторинг инфраструктура метод red подходить выбор метрика приложение сервис аббревиатура red расшифровываться rate  запрос секунда errors  ошибка секунда duration  время каждый запрос основной метрика который предлагаться снимать метод red это rate количество запрос секунда errors количество тот запрос который завершаться неудача duration количество время который занимать запрос отличительный особенность метод red являться возможность мониторять насколько мочь довольный ваш клиент ваш сайт ошибка загрузка время загрузка сайт исчисляться десяток секунда посетитель сайт вряд быть это довольный four golden signals google четыре золотой сигнал  принцип выбор метрика описывать книга site reliability engineering google это следующий четыре сигнал latency  время ответ traffic  частота запрос errors ошибка  частота ошибка saturation насыщение  насколько утилизировать загружать ресурс осуществлять мониторинг этот четыре вид сигнал смочь обнаруживать большинство проблема узкий место система данный метод использоваться мониторинг инфраструктура мониторинг приложение  визуализация самый дело нужный визуализация первый ответ который приходить голова это красота самый дело вариант бредовой дело красивый график который конечный итог получаться результат визуализация достаточно эффективно наблюдать изменение тот иной система отслеживать тенденция работа анализировать результат поэтому совершенно законный этап развитие любой система мониторинг являться визуализация собирать метрика предыдущий статья развертывать prometheus grafana качество пример подключать визуализировать метрика docker  следить контейнер начинать собирать метрика docker мы необходимо прежде создавать файл etcdockerdaemonjson следующий содержание   metricsaddr  1270019323  experimental  true  metricsaddr это адрес сервер prometheus  мой случай располагаться один хост порт 9323 настройка вступать сила необходимо перезапускать docker systemctl restart docker далее необходимо вносить правка настройка prometheus мы потребоваться файл etcprometheusprometheusyml немой находить scrape_configs он должный блок настройка сбор метрика самый prometheus добавлять туда следующий блок  job_name docker  static_configs   targets localhost9323 должный получаться примерно следующий идти prometheus statustargets убеждаться наличие задача сбор метрика docker prometheus переходить интерфейс grafana проверять источник данные prometheus порт 9090 раздел data sources переходить создание новый дашборд мой пример четыре панель  engine_daemon_image_actions  график показывать общий количество действие контейнер  engine_daemon_network_actions  сетевой активность  engine_daemon_events_total  общий количество событие  engine_daemon_container_states  статистика состояние контейнер  добавление панель нажимать new dashboard  add query далее указывать нужный метрика например  engine_daemon_container_states_containers  вводить запрос выводить статистика контейнер далее выбирать значок visualization слева внизу выбирать вид график свой пример метрика оставлять первый вариант третий шаг менять четвертый мочь указывать условие создание alert повторять действие остальной панель получать дашборд следующий вид дашборд отображать состояние docker заключение статья рассматривать основной рекомендация мониторинг инфраструктура приложение качество пример подключать prometheus grafana сбор метрика docker сделать соответствующий дашборд следующий статья полностью посвящать сбор трейс непосредственно приложение  заключение хотеться напоминать один простой истина сбор данные дешевый отсутствие случай необходимость обходиться очень дорого поэтому нужно обеспечивать сбор полезный данные который разумно собирать также хотеть приглашать  бесплатный вебинар  рассматривать основной инструмент работа сеть linux встречаться такой популярный дистрибутив centos ubuntu archlinux зарегистрироваться бесплатный вебинар",
    "tags": [
        "grafana",
        "prometheus",
        "docker",
        "linux"
    ]
}