{
    "article_id": "726620",
    "article_name": "Три причины передавать std::string_view по значению",
    "content": "передавать  stdstring_view  значение  идиоматичный давать разбираться почему начинать небольшой предыстория c умолчание передаваться значение писать widget w получать совершенно новый объект widget копирование большой объект достаточно дорогой поэтому качество  оптимизация  передача значение вводить передача константный ссылка советовать человек передавать большой ииль дорогой объект такой  stdstring  константный ссылка значение небольшой дешевый объект такой int char  stdpairint int   stdspanwidget  попрежнему предпочитать вполне целесообразный поведение умолчание передача значение сравнение передача константный ссылка передача значение иметь минимум преимущество точка зрение производительность пост собираться проиллюстрировать преимущество пример  string_view  важный фрагмент код представлять ниже следовать рассматривать изолированно друг друг должный присутствовать либо вызывать объект callee либо вызывать сторона caller компилятор увидеть вызывающий сторона вызывать объект давать флаг о2 решать встраивать вызывать объект вызывать сторона большой доля вероятность смочь устранять весь вред причинять неидиоматичный передача ссылка такой образ довольно часто мочь передавать  string_view  ссылка умудряться получать это рука сам должный передавать  string_view  значение компилятор приходиться совершать геройский труд ваш имя ваш кодревьюер приходиться терять понапрасну нервный клетка пытаться понимать ваш неидиоматичный решение передавать ссылка кратко передавать небольшой дешевый тип значение выигрывать давать рассматривать тот преимущество производительность который говорить вначале 1 позволять избегать косвенный адресация изза использование указатель вызывать объект передача константный ссылка означать передавать адрес объект передача значение означать передавать объект регистр это возможный объект который передавать являться нетривиальный цель abi например нетривиальный деструктор объект конечный итог передавать стек поэтому косвенный адресация применять любой случай тривиальный тип такой  int   string_view   span  нужно беспокоиться тип передаваться регистр передача значение устранять косвенный адресация изза использование указатель вызывать объект позволять мы избегать загрузка память  godbolt int byvaluestdstring_view sv  return svsize   int byrefconst stdstring_view sv  return svsize     byvalue     movq rsi rax     retq  byref     movl 8rdi eax     retq случай  byvalue   string_view  передаваться пара регистр rsi rdi возврат член size  этот простой перемещение один регистр отличие byref который получать  ссылка   string_view  передавать регистр rdi должный выполнять загрузка память извлекать член size 2 избегать spillа вызывать сторона передавать ссылка вызывать сторона должный помещать адрес объект регистр объект  должный иметь  адрес остальное касательно вызывать объект вызывающий сторона сделать вещь регистр акт передача объект вынуждать вызывать сторона spillить стек передача значение устранять необходимость spillа аргумент вообще устранять необходимость стекфрейм вызывающий сторона  godbolt int byvaluestdstring_view sv int byrefconst stdstring_view sv  void callbyvaluestdstring_view sv  byvaluehello   void callbyrefstdstring_view sv  byrefhello     lhello     asciz hello  callbyvalue     movl lhello edi     movl 5 esi     jmp byvalue     хвостовой рекурсия tail call  callbyref     subq 24 rsp     movq lhello 8rsp     movq 5 16rsp     leaq 8rsp rdi     callq byref     addq 24 rsp     retq  callbyvalue  устанавливать указатель данные аргумент  string_view  член  size   rdi   rsi  соответственно затем переходить  byvalue   callbyref  сторона мы нужно передавать  адрес  аргумент  string_view  поэтому подготавливать место стек происходить возврат  byref  мы нужно очищать этот пространство который подготовить ранее блог  очевидно tailcall optimization допустимый  20210109 3 устранение алиасинг передавать ссылка передавать вызывать объект ссылка объект который знать вызывать объект знать владеть указатель объект вызывать объект знать какойлибо собственный указатель указывать объект любой часть такой образ компилятор должный очень консервативно оптимизировать вызывать объект учитывать неизвестный передача значение давать вызывать объект совершенно новый копия объект  копия который определенно связанный какой другой объект программа такой образ вызывать объект иметь возможность оптимизация  godbolt void byvaluestdstring_view sv size_t p      p  0     for size_t i0 i  svsize i p  1   void byrefconst stdstring_view sv size_t p      p  0     for size_t i0 i  svsize i p  1     byvalue     movq rsi rdx     retq  byref     movq 0 rsi     cmpq 0 8rdi     je   lbottom     movl 1 eax  ltop     movq rax rsi     leaq 1rax rcx     cmpq 8rdi rax     movq rcx rax     jb   ltop  lbottom     retq clang  достаточно сообразительный понимать  byvalue  цикл инкремент  p  1  svsize  начинать ноль равносильно простой присваивание  p  svsize   byref   clang  сделать такой оптимизация почему  byref  должный вести правильно вызываться следующий образ stdstring_view sv  hello size_t size_p  sv__size_   адрес член size sv byrefsv size_p ситуация каждый инкремент  size_p  изменять результат  svsize  заставлять цикл выполняться бесконечно точно тот пора пока значение  sv_size  сбрасываться ноль останавливать цикл цикл  byref  отличие цикл  byvalue  являться эквивалентный простой присваивание компилятор должный генерировать машинный код соответствовать сложный поведение byvalue  нужно беспокоиться зловредный вызывающий сторона вызывающий сторона четко определять способ передавать копия  string_view  вместе указатель указывать внутрь копия пример говорить именно возможность алиасинг собственный элемент данные объект  string_view  представлять символ символ мочь псевдоним указатель другой место программа концентрироваться конкретный пример позволять это сбивать толк подытоживать умолчание передавать значение передача значение умолчание оптимальный небольшой дешевый копирование тип такой  int   char   pairint int  передача значение иметь минимум преимущество производительность подробно описывать выше стоимость копирование перевешивать преимущество большой ииль дорогостоящий тип такой  string   vector  передавать константный ссылка передача константный ссылка  это оптимизация передача значение небольшой тривиальный копировать parameteronly тип такой  string_view  c17 span 20  function_ref  с2b явно предназначать занимать тот категория  int   char  передавать значение почему нужно помнить исключение работа код видно помощь noexcept ускорять работа приложение обсуждать это  открытый урок  который пройти рамка онлайнкурс c developer professional записываться открытый урок",
    "tags": [
        "c++",
        "std::string_view",
        "исключения",
        "исключения в c++"
    ]
}