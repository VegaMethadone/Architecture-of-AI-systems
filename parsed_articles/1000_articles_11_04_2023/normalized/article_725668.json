{
    "article_id": "725668",
    "article_name": "Как создать свою собственную нейронную сеть с нуля на Python",
    "content": "создавать собственный нейронный сеть ноль python мотивация  рамка мой личный путь хороший понимание глубокий обучение решать создавать нейронный сеть ноль библиотека глубокий обучение tensorflow считать понимание внутренний работа нейронный сеть важно любой начинать специалист данные этот статья содержать узнавать надеяться полезный такой нейронный сеть   большинство вводный текст нейронный сеть описание использоваться аналогия мозг углубляться аналогия мозг считать просто описывать нейронный сеть математический функция который отображать заданный вход желаемый результат  нейронный сеть состоять следующий компонент входной слой x произвольный количество скрытый слой выходной слой y набор весы смещение каждый слой w b выбор функция активация каждый скрытый слой σ урок быть использовать функция активация приводить низко диаграмма показывать архитектура двухуровневый нейронный сеть обращать внимание входной слой обычно исключаться подсчет количество слой нейронный сеть создавать класс нейронный сеть python очень простой class neuralnetwork     def __init__self x y         selfinput  x         selfweights1  nprandomrandselfinputshape14          selfweights2  nprandomrand41                          selfy  y         selfoutput  npzerosyshape обучение нейронный сеть выход y простой двухслойный нейронный сеть мочь замечать приводить выше уравнение вес w смещение b являться единственный переменный влиять выход y естественно правильный значение весы смещение определять сила прогноз процесс точный настройка весы смещение основа входной данные известный обучение нейронный сеть каждый итерация процесс обучение состоять следующий шаг расчет прогнозировать выход y известный  прямой связь  обновление весы смещение известный  обратный распространение  последовательный график ниже иллюстрировать процесс прямой связь  видеть последовательный график высоко упреждающий связь  это просто простой исчисление базовый двухслойный нейронный сеть выходной данные нейронный сеть таков давать добавлять функция прямой связь наш код python сделать именно это обращать внимание простота принимать смещение равный 0 class neuralnetwork     def __init__self x y         selfinput  x         selfweights1  nprandomrandselfinputshape14          selfweights2  nprandomrand41                          selfy  y         selfoutput  npzerosselfyshape      def feedforwardself         selflayer1  sigmoidnpdotselfinput selfweights1         selfoutput  sigmoidnpdotselflayer1 selfweights2 однако мы попрежнему нужный способ оценивать хорошесть наш прогноз т е насколько далекий наш прогноз функция потеря позволять мы сделать именно это функция потеря доступный функция потеря природа наш проблема должный диктовать наш выбор функция потеря урок быть использовать простой ошибка сумма квадрат качество функция потеря ошибка сумма квадрат представлять себя просто сумма разница каждый предсказывать значение фактический значение разница возводиться квадрат измерять абсолютный значение разница наш цель вобучение находить хороший набор весы смещение который минимизировать функция потеря обратный распространение измерять ошибка наш прогноз потеря мы нужно находить способ распространять ошибка обратно обновлять наш вес смещение узнавать подходящий величина длякорректировка весы смещение мы нужно знать производная функция потеря поотношение квесы смещение  вспомнить изисчисление чтопроизводный функция это просто наклон функция унас производная мочь просто обновлять вес смещение увеличиваяуменьшать см диаграмма выше  это известно какградиентный спуск однако немогать напрямую вычислять производный функция потеря повеса смещение чтоуравнение функция потеря несодержать весы смещение поэтому мы нужный цепной правило помогать мы вычислять фу этобыть некрасиво нопозволять мы получать чтон нужно производная наклон функция потеря повеса мочь соответствующий образ скорректировать вес унас это давать добавлять функция обратный распространение внаш код python class neuralnetwork     def __init__self x y         selfinput  x         selfweights1  nprandomrandselfinputshape14          selfweights2  nprandomrand41                          selfy  y         selfoutput  npzerosselfyshape      def feedforwardself         selflayer1  sigmoidnpdotselfinput selfweights1         selfoutput  sigmoidnpdotselflayer1 selfweights2      def backpropself          application of the chain rule to find derivative of the loss function with respect to weights2 and weights1         d_weights2  npdotselflayer1t 2selfy  selfoutput  sigmoid_derivativeselfoutput         d_weights1  npdotselfinputt  npdot2selfy  selfoutput  sigmoid_derivativeselfoutput selfweights2t  sigmoid_derivativeselflayer1           update the weights with the derivative slope of the loss function         selfweights1  d_weights1         selfweights2  d_weights2 собирать вместе полный код python прямой обратный распространение давать применять наш нейронный сеть пример посмотреть насколько работать наш нейронный сеть должный изучать идеальный набор весы дляпредставление функция обращать внимание чтодлянас несовсем тривиальный определять вес путем проверка давать обучать нейронный сеть 1500итераций посмотреть чтополучаться глядеть наприведенный низко график потеря наитерация ясно видеть  потеря монотонно уменьшаться кминимум  это согласоваться салгоритм градиентный спуск который обсуждать ранее давать посмотреть окончательный прогноз выход нейронный сеть 1500 итерация сделать это наш алгоритм прямой обратный распространение успешно обучать нейронный сеть прогноз сходиться наистинный значение  обращать внимание чтоедать небольшой разница прогноз фактический значение этожелательно поскольку предотвращать переоснащение позволять нейронный сеть обобщать невидимый данные далеко ксчастие длянас наш путешествие незаканчивать мы многое предстоять узнавать онейронный сеть глубокий обучение  например какой функция активация мочь использовать кроме сигмовидный  использование скорость обучение приобучение нейронный сеть использование сверток длязадача классификация изображение последний мысль определенно многое научаться написать собственный нейронный сеть снуля хотя библиотека глубокий обучение такой какtensorflow keras упрощать создание глубокий сеть бесполный понимание внутренний работа нейронный сеть считать чтоначинающий специалист подавать полезно получать глубокий понимание нейронный сеть это упражнениебыть отличный вложение мой время надеяться чтооно полезный длявас",
    "tags": [
        "python",
        "нейросеть",
        "нейросети",
        "python3"
    ]
}