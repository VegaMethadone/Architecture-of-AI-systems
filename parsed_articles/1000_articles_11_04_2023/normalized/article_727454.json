{
    "article_id": "727454",
    "article_name": "Шаблон проектирования: Chain of Responsibility",
    "content": "все привет  данный статья полезный начинающий java разработчик понимание нужный шаблон проектирование цепочка ответственность использовать пример итак начинать самый начало основной суть данный шаблон связывание объектовполучатель цепочка передача запрос какой проблема решать данный шаблон обычный подход отправитель запрос тесно связанный получатель это затруднять изменение поведение система поскольку изменение получатель вероятно потребовать изменение отправитель шаблон цепочка ответственность помогать избегать привязка отправитель запрос получатель давать возможность обрабатывать данный запрос несколько объект это достигаться путем создание цепочка объект каждый который обрабатывать запрос передавать запрос цепочка тот пора пока обрабатывать данный шаблон отправитель нужно знать получатель начинать спервый пример допускать мы нужно решать такой задача какотправка сообщение обошибка взависимость отуровень данный ошибка ошибка незначительный низкий уровень писать влог файл ошибка серьезный средний уровень писать влог файл отправлять ошибка наемайл ошибка очень серьезный высокий уровень писать влог файл отправлять ошибка наемайл отправлять sms менеджер вначале написать enum prioritylevel уровень ошибка public enum prioritylevel      low middle high  далее написать класс messagesender поотправка сообщение абстрактный содержать общий логика включать внего уровень ошибка prioritylevel prioritylevel следующий отправитель messagesender nextmessagesender  далее добавлять конструктор который принимать уровень ошибка атакже добавлять сеттер устанавливать следующий отправитель  далее писать основной метод messagesendermanagerstring message prioritylevel level вкотор происходить основной логика наш пример данный метод принимать строка который быть передавать приоритет ошибка каквидный изкод уровень передаваемый приоритет илиравный наш приоритет отправлять сообщение пока иметься следующий отправитель снова вызывать данный метод унего  также добавлять абстрактный метод writestring message который быть переопределять вклассы наследник public abstract class messagesender      private prioritylevel prioritylevel     private messagesender nextmessagesender      public messagesenderprioritylevel prioritylevel          thisprioritylevel  prioritylevel           public void setnextmessagesendermessagesender nextmessagesender          thisnextmessagesender  nextmessagesender             public void messagesendermanagerstring message prioritylevel level         iflevelordinal  prioritylevelordinal             writemessage                  ifnextmessagesender  null             nextmessagesendermessagesendermanagermessage level                    public abstract void writestring message  далее создавать конкретный класс поотправка сообщение logreportmessagesender emailmessagesender smsmessagesender дляотправка сообщение влогфайл наэлектронный почта отправка смс соответственно каждый класс унаследовать откласс messagesender переопределять конструктор метод write каждый класс делать логика вданный метод public class logreportmessagesender extends messagesender      public logreportmessagesenderprioritylevel prioritylevel          superprioritylevel           override     public void writestring message          systemoutprintlnmessage sender using simple log report   message       public class emailmessagesender extends messagesender      public emailmessagesenderprioritylevel prioritylevel          superprioritylevel           override     public void writestring message          systemoutprintlnsending email   message       public class smsmessagesender extends messagesender     public smsmessagesenderprioritylevel prioritylevel          superprioritylevel           override     public void writestring message          systemoutprintlnsending sms to manager   message       наш пример готовый оставаться протестить написать класс bugevent метод mainstring args public class bugevent      public static void mainstring args          messagesender reportmessagesender  new logreportmessagesenderprioritylevellow         messagesender emailmessagesender  new emailmessagesenderprioritylevelmiddle         messagesender smsmessagesender  new smsmessagesenderprioritylevelhigh          reportmessagesendersetnextmessagesenderemailmessagesender         emailmessagesendersetnextmessagesendersmsmessagesender          reportmessagesendermessagesendermanagersomething is happening prioritylevellow          systemoutprintln         reportmessagesendermessagesendermanagersomething went wrong prioritylevelmiddle          systemoutprintln         reportmessagesendermessagesendermanagerwe had a problem prioritylevelhigh        создавать объект messagesender reportmessagesender emailmessagesender smsmessagesender иссоответствовать класс устанавливать свой уровень ошибка  далее строить цепочка ответственность назначать объект reportmessagesender следующий отправитель объект emailmessagesender аобъект emailmessagesender следующий отправитель smsmessagesender наш шаблон готовый тестировать вывести объект вконсоль сразный сообщение видеть чтонаш сообщение идти поцепочка выполняться разный обработчик дотой момент пока уровень ошибка мало илиравный заданный посмотреть общий схема класс вданный паттерн унас общий абстрактный класс messagesender споль prioritylevel messagesender метод дляустановка следующий отправитель абстрактный метод write переопределять вкаждый класс основной метод messagesendermanager вкотор выполнять какоето действие отправлять сообщение переходить кследующий отправитель давать рассматривать пример использование данный паттерн допускать унас задание нужно написать приложение вкоторой приходить число нужно определять отрицательный этот число этот число ноль илиэто положительный число задание очень простой длянего целое паттерн ненадо использовать нодать пример впростой вид показывать каккакойто реквест идти поцепочка дотеха пора пока ненаходиться получатель который обрабатывать  каки впредыдущий случай начинать сосновный класс называть handler public abstract class handler      protected handler next      public void setnexthandler next          thisnext  next           public abstract void handlerequestint request  данный класс просто предыдущий пример вкачество поле вводить следующий обработчик handler next делать метод setnexthandler next дляназначение следующий обработчик атакже абстрактный метод handlerequestint request который принимать наш реквест это число реализация данный метод представлять вкаждый класс унаследовать откласс handler написать класс negativenumberhandler обработка отрицательный число public class negativenumberhandler extends handler     public void handlerequestint request          if request  0              systemoutprintlnnegativenumberhandler handled the request number is negative   request          else if next  null              nexthandlerequestrequest                 унаследовать наш класс класс handler  логика переопределенный метод handlerequestint request очень простой передавать число мало 0 обрабатывать рексест метод останавливаться противный случай переходить следующий обработчикка такой образ написать класс zeronumberhandler public class zeronumberhandler extends handler     public void handlerequestint request          if request  0              systemoutprintlnzeronumberhandler handled the request number is zero   request          else if next  null              nexthandlerequestrequest                positivenumberhandler public class positivenumberhandler extends handler     public void handlerequestint request          if request  0              systemoutprintlnpositivenumberhandler handled the request number is positive   request          else if next  null              nexthandlerequestrequest                наш второй пример готовый написать класс client тестирование шаблон public class client      public static void mainstring args          handler negativenumberhandler  new negativenumberhandler         handler zeronumberhandler  new z",
    "tags": [
        "паттерны",
        "паттерны проектирования",
        "patterns"
    ]
}