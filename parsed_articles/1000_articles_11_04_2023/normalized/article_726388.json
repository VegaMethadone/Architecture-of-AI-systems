{
    "article_id": "726388",
    "article_name": "Подготовка к собеседованию на iOS разработчика (актуально на начало 2023 года)",
    "content": "небольшой предыстория  добрый время сутки iosразработчик хлопкихлопка получаться работать iosразработчиком один легасипроект компаниивендор октябрь прошлый год появляться желание сменить текущий проект переставать волноваться легасить начинать развиваться  поговорить начальство назначать встреча лид ios подготовить предстоящий собеседование однако несколько вопрос лида вердикт подходить текущий проект вопрос какой собственно критерий оценивание получать ответ ты никто рассказывать наш дело  начинать читать смотреть курсы видеоурок активно подаваться разный компания россия рубеж выяснять какой собственно говорить критерий прохождение постепенно разом сформировываться список наиболее часто встречаться вопрос собеседование iosразработчика который решать опубликовывать технический вопрос тк собеседование основное английский язык ваш позволение оставлять вопрос ответ английский поехать 1 what frameworks you used in your ios projects you can specify frameworks like uikit swiftui combine avframework pushnotification callkit gcd core bluetooth etc 2 how the optional is implemented in swift enum optionalwrapped      case none     case somewrapped  3 is there a difference between none and nil no 4 ways to unwrap optional variables var aint 1 a 2 if let s  a      prints  3 if let a      printa  4 guard let s  a else      prints     return  5 a  0 5 5 whats difference between reference and value types what reference and value types you know value types  structs enums arrays dictionaries strings reference types  classes closures ns types nsstring for example because they are classes  two differences between value and reference types value types are stored in stack and reference types are stored in heap if you assign one object to another for a reference type you just copy the reference not value  reference type example class c  var data int  1  var x  c var y  x x is copied to y xdata  42 changes the instance referred to by x and y printlnxdata ydata prints 42 42 for value types you will copy the value of the variable 6 whats difference between class and structure structures are value types classes are reference types structures dont support inheritance classes support inheritance structures dont support deinitializers  deinit  classes support deinitializers structures dont follow reference counting  look at the question 19 about arc  classes follow reference counting mutating keyword is needed to modify the property values in structures instance methods no need of mutating keyword to modify the class variables value 7 do you know what copyonwrite means if you assign one array to another not only array there are other objects then the second object will refer to the first array address until the second array is not changed func addressof_ o unsaferawpointer  string      let addr  unsafebitcasto to intself     return stringformat p addr  our array var array  1 2 3 4 5 addressofarray  0x600002e30ac0 here we assign one array to another var array2  array look  the address of the second array is the same addressofarray2  0x600002e30ac0 here we change the second array  array2append6 look again  address has changed addressofarray2  0x6000026119f0 8 do you know what are solid principles solid is abbreviation s  single responsibility principle its when a class has just one purpose a class shouldnt contain functions that could be moved to other classes o  openclosed principle ocp a class should be opened for extension but closed for changes open closed principle allows to  avoid this kind of code  protocol someprotocol    class asomeprotocol      func printclassaname          printim a        class bsomeprotocol      func printclassbname          printim b        class caller      func printclassnameobjsomeprotocol       to avoid this kind of code         if let unwrappeobj  obj as a              objprintclassaname                  else if let unwrappeobj  obj as b              objprintclassbname                it should be changed like that to avoid changes in caller class in the future protocol someprotocol      func printclassname   class asomeprotocol      func printclassname          printim a        class bsomeprotocol     func printclassname          printim b        class caller      func dosomethingobjsomeprotocol         printobjprintclassname       this principle is similar with d dependency inversion principle but ocp is more general the dip is an extension of the ocp l  liskov principle in simple words this principle says that you need to have a possibility to use a parent and a child classes without any difference class a someprotocol    class b someprotocol    let a  a let b  b var asomeprotocol  a b i  interface segregation classes  shouldnt  implement protocol methods they dont use if we noticed this situation just move these methods to a separate protocol d  dependency inversion it means that a class shouldnt depend on lowlevel modules  they both should depend on an abstraction for example class filesystemmanager    func savestring string       open a file      save the string in this file      close the file      class handler      let filemanager  filesystemmanager     func handlestring string          filemanagersavestring string       if in the future well need to add other methods for saving data data base for example we should inherit both  filesystemmanager  and this new data base interactor class from some storage protocol and use it instead of  filesystemmanager  and other possible data saving ways class filesystemmanagerstorage      func savestring string           open a file          save the string in this file          close the file        class databasemanagerstorage      func savestring string           open db          save the data          close db        class handler      let storagestorage     func handlestring string          storagesavestring string       this principle is similar with ocp is more general the dip is an extension of the ocp difference is that ocp is for similar functions but dip deals with the same input data 9 what is singleton the main point of singleton is to ensure that we initialized something only once and this something should be available from everywhere for example  uiapplicationshared ps  servicelocator  is a singleton with an array of some services 10 how are you doing your code reviews the best practice said that the code review should depend on cicd tests a style guide solid and some linter a syntax checker 11 application lifecycle use this taken from apple documentation 12 viewcontroller lifecycle viewdidload  called when you create the class and load from xib great for initial setup and onetimeonly work viewwillappear  called right before your view appears good for hidingshowing fields or any operations that you want to happen every time before the view is visible because you might be going back and forth between views this will be called every time your view is about to appear on the screen viewdidappear  called after the view appears  great place to start an animations or the loading of external data from an api viewwilldisappeardiddisappear  same idea asviewwillappearviewdidappear viewdidunloadviewdiddispose  in objectivec this is where you do your cleanup and release of stuff but this is handled automatically so not much you really need to do here ps can you say what viewcontroller lifecycle methods are calling when you started to segue from a view a to another view b but havent finish it 13 what architecture patterns you used better to mention mvc mvvm viper clean architecture i recommend to implement test samples for each of these patterns 14 what is viper viper  is an architecture pattern with these parts r  router  an entry point e  entity  model like in mvc for example p  presenter  holds the reference to interactor to a router and to a view presenter uses data received using fetching data functions from interactor to update view v  view but with additional protocol with updating functions",
    "tags": [
        "собеседование",
        "собеседование вопросы",
        "ios",
        "solid"
    ]
}