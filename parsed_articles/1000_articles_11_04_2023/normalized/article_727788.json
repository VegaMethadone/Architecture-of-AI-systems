{
    "article_id": "727788",
    "article_name": "Swift async/await. Чем он лучше GCD?",
    "content": "промпт иконка язык программирование swift черный фон проходить год момент выпуск asyncawait многие крупный очень проект успевать подымать минимальный версия ios 13 следовательно открываться возможность полноценный использовать новый языковой возможность работа многопоточный код начинать полноценный рефакторять старый код ииль писать новый код использовать относительно новый технология голова невольно всплывать вопрос это gcd вступительный статья серия asyncawait постараться вместе отвечать вопрос оглавление такой swift asyncawait такой этот ваш многопоточность инструмент работа многопоточность asyncawait проблема работа многопоточность asyncawait семантический проблема технический проблема итог такой swift asyncawait swift asyncawait  это новый фич язык добавлять swift 55 позволять работать асинхронный функция синхронный стиль это предыдущий инструмент работа многопоточный код  разбираться часть такой этот ваш многопоточность погружаться проблема работа многопоточный код очень кратко напоминать вообще такой многопоточность большинство случай писать синхронный код  statements  который следовать друг друг выполняться написать код  последовательно друг друг   например код func printcucumbers    for _ in 0100      print      printcucumbers  for _ in 0100    print  выводить консоль следующий    98 огурец     98 помидор  наш код выполняться один поток один ядро выполняться идентично то код прочитывать последовательно сверху вниз такой подход сложно работать тяжелый операция сетевой запрос обработка изображенийвидео тяжелый операция полностью блокировать поток другой функция быть вынуждать ждать завершение случай мобильный разработка работать синхронно один поток вечно фризивать интерфейс допустимый точка зрение пользовательский опыт многопоточность очередь  этот свойство позволять код выполняться несколько поток это полноценный параллельный выполнение разный ядро симуляция параллельный выполнение один ядро благодаря это мы обязательно ждать завершение ресурсоемкий операция тк мочь выполнять другой поток немного видоизменять пример func printcucumbers    dispatchqueueglobalasync      for _ in 0100        print           printcucumbers  for _ in 0100    print  исполнение данный код увидеть консоль          беспорядочный последовательность огурец помидор  функция  printcucumbers  вызываться друг поток изза   видеть последовательный 100 огурец помидор выводиться консоль беспорядочно начинать помидор говорить цикл выполняться  разный поток  это позволять мы параллеливать тяжелый операция блокировать текущий поток инструмент работа многопоточность asyncawait asyncawait появляться swift 55 сей день запуск код другой поток использовать grand central dispatch gcd operation thread обертка pthread который пользоваться напрямую работа thread pthread трудозатратный разработчик приходиться самостоятельно управлять поток строить система эффективный планирование задача запуск этот поток следствие вероятность допускать ошибка возрастать operation легкий тк разработчик предоставляться очередь коробка пропадать необходимость управлять поток напрямую функциональность  операция  зачастую избыточный причина часто разработка ios приложение использовать gcd тк это самый простой использование инструмент вышеперечисленный лишенный недостаток проблема работа многопоточность asyncawait  нижеперечисленный проблема полностью частично поправлять внедрять asyncawait разделять 2 подгруппа семантический  проблема связывать читаемость конструкция язык большинство человек привыкать читать текст сверху вниз чтение код  исключение читать анализировать синхронный код намного просто вникать множество вложенный друг друг замыкание который выполняться асинхронно технический  проблема связывать реализация использование текущий инструмент работа многопоточность  семантический проблема 1 pyramid of doom работать gcd swift оперировать замыкание пример передавать  completionhandler  замыкание оно вызываться завершение вызывать функция например хотеть загружать изображение сеть func loadimage   from url url    completionhandler escaping uiimage  void         loadimagefrom url  image in   selfimageviewimage  image  часто возникать необходимость както обрабатывать получать данные обработка осуществляться другой поток блокировать поток вызов функция вырождаться  pyramid of doom  дополнять пример func loadimage   from url url    completionhandler escaping uiimage  void         func applyblurfilter   to image uiimage    completionhandler escaping uiimage  void         func cachetodisk   _ image uiimage    completionhandler escaping   void         func loadandprocessimage   from url url    completionhandler escaping uiimage  void     loadimagefrom url  image in     applyblurfilterto image  blurredimage in       completionhandlerblurredimage       cachetodiskimage          printimage cached                  изображение загружаться сеть добавка накладываться фильтр оно сохраняться диск операция выполняться отдельный поток блокировать поток вызов функция поэтому образовываться вложенность замыкание который называться  pyramid of doom  основной проблема  это сложность визуальный восприятие такой код стоить отмечать это самый запущенный пример 2 неудобный обработка ошибка рассматривать выше пример лишенный один очень важный момент  немой обработка ошибка дорабатывать это упущение func loadimage   from url url    completionhandler escaping resultuiimage error  void         func applyblurfilter   to image uiimage    completionhandler escaping resultuiimage error  void         func cachetodisk   _ image uiimage    completionhandler escaping resultvoid error  void         func loadandprocessimage   from url url   completionhandler escaping resultuiimage error  void     loadimagefrom url  result in     switch result      case successlet image       applyblurfilterto image  result in         switch result          case successlet blurredimage           completionhandlersuccessblurredimage           cachetodiskblurredimage  result in             switch result              case success               printimage cached               completionhandlersuccessblurredimage             case failurelet failure               completionhandlerfailurefailure                                 case failurelet failure           completionhandlerfailurefailure                     case failurelet failure       completionhandlerfailurefailure          каждый функция наш цепочка вернуть ошибка обработка ошибка значительно раздувать наш функция сильно усугублять проблема  pyramid of doom  вникать данный код монокль получаться каждый обработка  result  увеличивать вложенность писать шаблонный код удобно использовать конструкция  dotrycatch  то swift позволять мы писать throwing замыкание наш случай замыкание являться обработчик завершение наш функция ошибка возникать вызов поэтому использование completionhandlerов мочь использовать  dotrycatch  синхронный функция такой ограничение пользоваться данный языковой конструкция весьма удобно 3 компилятор позволять мы совершать ошибка замыкание работа классический синхронный функция компилятор пристально следить заявлять сигнатура функция условие выполняться тело функция  func getbool  bool  возвращать заявлять  bool   код скомпилироваться функция вызывать  return  дважды  проблемный строчка подсветиться случай completionhandlerами разработчик самостоятельно должный следить вызов замыкание изза мочь всплывать ошибка давать вернуться наш пример он намеренно допускать ошибка попробовать находить func loadandprocessimage   from url url   completionhandler escaping resultuiimage error  void     loadimagefrom url  result in     switch result      case successlet image       applyblurfilterto image  result in         switch result          case successlet blurredimage           completionhandlersuccessblurredimage           cachetodiskblurredimage  result in             switch result              case success               printimage cached               completionhandlersuccessblurredimage             ca",
    "tags": [
        "swift",
        "async/await",
        "concurrency",
        "gcd",
        "ios",
        "kandinsky art"
    ]
}