{
    "article_id": "726904",
    "article_name": "Фортран: пишем параллельные программы для суперкомпьютера",
    "content": "первый часть статья  рассматривать написание современный фортран простой программа реализовать клеточный автомат жизнь вид классический последовательный код sisd матричный операция simd параллельный конструкция smp simd часть функция mimd быть рассматривать использование конструкция фортран программирование массивнопараллельный архитектура mpp который частность относиться современный суперкомпьютер такой архитектура реализовать классический схема mimd  прошлый статья использовать иллюстрация материал компилятор gnu fortran intel fortran постановка задача первый часть статья продолжать реализовывать самый клеточный автомат тот самый входной выходной данные сожаление компилятор intel fortran поддерживать использовать программирование mpp архитектура coarray операционный система macos поэтому пример intel fortran быть выполнять машина linux это делать невозможный сравнение результат абсолютный цифра относительный оценка все попрежнему ясно gnu fortran первый часть статья ипользоваться компилятор версия 1220 библиотека  opencoarrays   компьютер mac mini 4ядерным процессор intel core i3  36 ghz управление macos intel fortran быть использоваться компилятор ifort версия 202190 20230302 компилятор ifx 202310 20230320 компьютер ibm x3250 m4 8ядерным процессор xeon 4c e31270v2  39 ghz управление linux ядро процессор мак старый тормозной 04 повторение тема напоминать прошлый достигать следовать результат мак последовательный программа режим автопараллелизация gfortran ifort  life_seq_g      11 сечь  124773000 ячеекс  life_seq      4 сечь  338120000 ячеекс параллельный smp программа средство openmp хороший результат gfortran  life_omp_g 3 сечь 377022000 ячеекс  life_omp 3 сечь 356690000 ячеекс параллельный smp программа средство  do concurrent  хороший результат ifort  life_con 3 сечь 355890000 ячеекс повторять результат наш сервер linux дальнейший опираться какието сопоставимый значение автопараллелизация ifort ifx она поддерживать  life_seq_ifort       9 сечь   144360000 ячеекс  life_seq_ifx      19 сечь   71030000 ячеекс  life_con_ifort      8 сечь       162910000 ячеекс  life_con_ifx       37 сечь   37730000 ячеекс это целое совпадать результат приводить  mobi  комментарий первый часть статья прежде переходить изложение новый материал вспомнить логика работа наш программа архитектура smp  написать классический последовательный алгоритм затем применять он некоторый небольшой подсказка компилятор параллелизация позволять распараллеливать код несколько smp ядро сохранять логический эквивалентность последовательный алгоритм это очень важный обстоятельство вообще smp парадигма параллельный процесс делать совершенно разный вещь рассматривать мы логика просто ускорять последовательный процесс иметь вход выход метод логически эквивалентный преобразование частично параллельный сторона архитектура smp предопределять использовать мы модель оперативный память объект память разделяться весь параллельный процесс одинаково принадлежать весь исключение некоторый отдельный локальный процесс переменный который специально описывать  local   omp private  5 mpp параллелизм комассив модель массивнопараллельный вычисление совершенно другой просто излагаться легко укладываться голова практический применение поэтому нужный некоторый внимание начало давать разбираться вообще плохо smp особо париться пара подсказка компилятор мочь ускорять свой последовательный программа несколько  казаться хватить ядро пират мультфильм  сожаление пулеметный лента ядро организовывать мочь очень быстро узкий место становиться оперативный память разделение доступ память несколько арифметикологический устройство сложно чисто технически это весь нужный образ припаивать электрически нагружать все равный наш ядро быть конкурировать доступ один страница память разделять высокий уровень поэтому десяткадругой ядро архитектура smp эффективно подключать мы делать хотеть построить суперкомпьютер включать десяток тысяча вычислительный ядро собственно массивнопараллельный архитектура такой случай использоваться вычислительный узел каждый который содержать собственный оперативный память узел объединять специальный высокоскоростной вычислительный сеть позволять синхронизировать отдельный область память помощь сообщение узел узел часто внутри низкий уровень иерархия использовать несколько ядро объединять архитектура smp архитектура mpp обязательно ограничиваться два уровень иерархия упрощенно описывать уровень например стойка суперкомпьютер взаимодействовать себя меньший скорость узел внутри стойка программный архитектура mpp система восходить транспьютер ранний разработка массивнопараллельный код язык оккам  среда выполнение организовывать такой образ программа запускаться одновременно несколько экземпляр один экземпляр узел ядро узел пока логически неважно текст машинный код программа каждый использовать узел динамика выполнение код разный  код одинаковый получаться динамика выполнение должный зависеть какихто внешний обстоятельство самый главный такой обстоятельство являться простонапросто номер узел номер узел передаваться программа системный утилита запускать массивнопараллельный код массив узел фортран номер узел который данный момент выполняться код выдаваться функция  this_image  принимать значение 1 общий количество выполнять программа узел который очередь выдаваться функция  num_images  ясно вышесказанный каждый параллельно выполняться процесс архитектура mpp иметь собственный оперативный память причина переменный описывать фортрановский программа хранить собственный значение каждый номер узел качество исключение правило код мочь специальный образ описывать комассив позволять программа получать доступ оперативный память другой узел доступ элемент комассив иметь специальный синтаксис квадратный скобка применяться везде допустимый использование переменный локальный оперативный память узел например очевидный причина создавать указатель объект чужой оперативный память говориться весь фигня попытаться взлетать ясно модель однойдвуметь подсказка компилятор обходиться менять логика код наш общий подход типичный стиль программирование игровой поле объявлять комассив который потенциально иметь доступ узел фактически каждый узел заниматься свой часть поле разделять столбец матрица field полоса число узел каждый узел рассчитывать значение элемент массив свой полоса заполнять полоса массив свой оперативный память кроме край полоса узел находиться два единичный полоска интересный сосед значение этот полоска узел копировать оперативный память свой сосед важный понимать комассив field целый вообще физически нигде существовать момент окончательный сборка запись результат память раскидывать свой отображение узел который каждый узел физически работать свой полоса массив причина поменять программа также инициализация матрица занимать физический ноль оперативный память ненужный часть массив который фактически использоваться узел например массив иметь 1002 столбец 1000 основной 2 край сверток программа исполняться 10 узел узел номер 1 вычислять столбец 0100 узел номер 2  101200 тд столбец 100 рассчитать узел 1 помещаться оперативный память память узел 2 столбец понадобиться узел 2 расчет столбец 101 такой перекрываться часть комассив называться гало итак новый код program life_mpp      implicit none      integer parameter  matrix_kind  4     integer parameter  generations  2     integer parameter  rows  1000 cols  1000     integer parameter  steps  10000      integer kindmatrix_kind  field 0rows1 0cols1 generations      integer  thisstep  1 nextstep 2     integer  i     integer  clock_cnt1 clock_cnt2 clock_rate      integer allocatable  cols_lo  cols_hi   диапазон столбец узел      integer  me  номер текущий узел обращаться короткий      me  this_image      print  its me me       заполнять таблица верхний нижний граница полоса узел      allocate cols_lo num_images cols_hi 0num_images     cols_hi 0  0     do i  1 num_images       cols_lo i  cols_hi i1  1       cols_hi i  cols  i  num_images     end do       проинициализировать ",
    "tags": [
        "программирование",
        "fortran",
        "фортран",
        "параллельное программирование"
    ]
}