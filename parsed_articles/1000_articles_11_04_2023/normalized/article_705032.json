{
    "article_id": "705032",
    "article_name": "GitFlow в его простоте от dev до prod",
    "content": "ветка вести разработка ветка деплоить prod ветка чинить баг выявлять ift многий команда закрывать вопрос многий оставаться открытый пост содержать какихто особый ноухау киллерфич он рассказывать наиболее простой понятный лично практика релизный цикл основа git flow постараться объяснять каждый свой решение каждый подход итак поехать сколько понадобиться стенд видеал вдополнение кпрод иметь еще стенд интеграционнофункциональный далее ift dev описывать каждый стенд задача назначение подробно основной минимум стенд dev  стенд дляразработка новый фич починять баги врамок спринт впервый очередь выкатываться наэтот стенд активный тестирование фич исправлять баг происходить деплоить нанего восновной команда разработка содержать синтезировать данные ift  стенд дляинтеграционнофункциональный тестирование наэтап отладка фич исправлять баги тестироваться нань какправило размещаться втестовый окружение заказчик содержать реальный обезличенный данные увас проект сложно crud астенд ift увас разрабатывать больно prod  продуктивный стенд среальный посетитель вершина иерархия окружение деплой натакий стенд заниматься специальный команда внедрение уразработчик вообще небыть кнему доступ управлять разработка минимум стенд поговорить пост поделить спринт спринт поделить надва неравный часть  разработка   отладка  активный разработка это большой часть спринт вовремя который реализовываться фич заявлять вспринт исправляться баги находить наdevстенде отладка это второй часть спринт который наступать реализация фич спринт атестирование переноситься наiftстенд какой основный ветка потребоваться разработка итак 3 стенд каждый создавать ветка называть ее соответствующий образ  prodmaster   ifttest   devdevelop   угодно главное название понятный назначение хотя понятийный среда разработка наш пример ветка быть  master   test   develop  правило первый каждый стенд иметь однуединственный мастерветка разворачивание приложение стенд происходить она выглядеть это следующий образ правило деплоить стенд контракт необходимо поддерживать весь сила этап активный разработка активный разработка вестись   ветка  develop  реализовывать фич  ответвлять ветка  featurexxx   develop  исправлять баг  пожалуйста  bugxxx  окончание разработка ветка вливаться обратно  develop  оттуда изменение попадать devстенд активный разработка правило второе весь активный разработка вестись ветка образованный ветка  develop  который окончание разработка вливаться обратно  develop  devстенде размещать приложение состояние соответствовать текущий спринт ift prod  предыдущий выглядеть это версия приложение время активный разработка видно картинка ift prod код еще версия спринт devстенде версия спринт б этап отладка поокончание активный разработка весь код изветок  develop  вливаться вветка  test  тестирование наdevстенде прекращаться переноситься наiftстенд процесс называть  code freeze  врамок спринт сэтого момент разработчик брать задача следующий спринт продолжать реализовывать обычный способ вветка  develop  поокончание реализация который вобычный режим деплоиться наdevстенд происходить разделение стенд науровна спринт iftстенд принадлежать течь спринт какdevстенд будущее смомент отладка проводить планирование следующий спринт определять scope задача который разработчик брать вработа такой образ наэтап отладка каждый стенд находиться вверсия свой спринт какprod все еще вверсия предыдущий спринт ift вверсия нынешний аdev вверсия спринт будущий версия приложение время отладка такой образ разработчик простаивать время отладка сделать часть работа намечать следующий спринт этап отладка находить баг стенд ift интеграционнофункциональный стенд иметь несколько важный отличие отстенд разработка находиться вокружение заказчик чтопозволять отлаживать взаимодействие сэтимый окружение б наполнять несинтезировать мусор аобезличивать данные сprod это позволять тестировщик проводить тестирование фич науровна наиболее близкий кпродуктивный цель такой тестирование являться обнаружение новый баг итак тестировщик находить новый баг какм помнить ift находиться всостояние текущий спринт аdev будущий дляустранение баг создавать ветка  develop  ктому момент  develop  мочь оказываться фич следующий релиз который небыль еще протестировать недолжный попадать втекущий релиз устранение баг мы приходиться черрипикать изменение  develop   test  держать черрипик вум ноэто плохой выход исситуация целое практика черрипик являться костыль вразработка применяться отбезысходность отсюда вытекать правило третий правило третий помнить правило первый согласно который изменение настенд деплоиться иссвоя мастерветка сталобыть накакомто конкретный стендебыль находить причина дляизменение код разработка врамок этот изменение вестись измастерветка стенд иной слово наiftбыл находить баг дляего устранение образовывать ветка  test  исправление баг ветка вливаться обратно  test  происходить деплый наift баг тестироваться повторно все ока ветка  test  вливаться  develop  исправление баг ift притак подход сохраняться следующий взаимосвязь ветка  test  содержать всеба версия код актуальный потекущий релиз ветка  develop  содержать всеба версия код актуальный потекущий релиз  изменение врамок следующий релиз окончание этап отладка заход новый спринт единственный назначение стенд ift это тестирование приложение какбы напрод окружение наполнение iftстенда недолжно кардинальный отличаться отпрод какможно часто обогащаться оттуда обезличивать данные увас нетака быть тестировать напрод чтоуж окончание этап отладка изменение изветка  test  переноситься вветка  master  деплоиться наprod версионность стенд возвращаться ксостояние активный разработка следующий итерация начинаться новый спринт сей победа поражение начало новый спринт выглядеть полный релизный цикл соответствие вышеописанный полный релизный цикл выглядеть полный релизный цикл вместо заключение делать баг находить прод прикладывать усилие длятый это непроисходить ном точно знать чтоэто происходить чтоделать впервый очередь попробовать воспроизводить баг настенде ift держать ift всостояние актуальный prod вочень высокий доля вероятность воспроизводиться воспроизводиться переходить краздел  этап отладка еслибывать находить баг настенде ift  правило 3и далее вниз попост исправлять наift вливаться изift  develop  вливаться  master  зарелизиться наprod повторно баг невоспроизводиться наift значит это проблема чисто prod применять правило 3уже кнему бранчуяться  master  исправлять проблема далее переливать изменение  master    test    develop",
    "tags": [
        "git",
        "gitflow"
    ]
}