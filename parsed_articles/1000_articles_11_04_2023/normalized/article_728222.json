{
    "article_id": "728222",
    "article_name": "Кубернетес и микросервисы. О пользе стандартизации",
    "content": "введение думать многие доводиться слышать аналогия сравнение разработка производство сборочный конвейер попытка применение паттерн канбан система который сформировываться компания тойота фабрика микросервис сегодняшний день разработка скоро напоминать артель ремесленник 19 век современный автомобильный завод каждый компания выстраивать выстрадать свой уникальный процесс производство инструментарий крупный организация процесс мочь отличаться команда один отдел департамент программирование это творческий процесс место индивидуализм гениальный прорыв изобретение который полный унификация стандартизация становиться контрпродуктивный фактор случай жизненный цикл программный обеспечение доставка код потребитель строительство внутренний платформа инструмент стандартизация иметь мультипликативный эффект мало тратиться время проверка гипотеза прототипирование сборка тестирование проект  возможность создание доставка ценность конечный пользователь стандарт разработка относить общепринятый стандарт веб разработка сегодняшний день набор рекомендация известный статья  приложение двенадцать фактор  многий тезис статья прежний актуальный смотреть сформулировать выходец компания heroku возможно первый коммерчески успешный paas проект задолго появляться кубернетес docker docker compose компания docker docker inc однажды лишаться свой доминирующий позиция отрасль формат dockerfile давно превращаться стандарт вряд чтото изменяться будущее говорить сегодняшний день перспектива несколько год вперед облако набирать популярность бессерверный технология локально onpremise корпоративный сектор кубернетес постепенно занимать доминирующий позиция качество целевой платформа возникать ситуация разработчик требоваться понимание целевой инфраструктура разный платформа технологический стек _возникать необходимость создание единый стандарт описывать основной компонент современный веб приложение oam середина октябрь 2019 год microsoft alibaba cloud  представлять  новый стандарт моделирование приложение сфера облачный периферийный вычисление  open application model  oam  цель проект определять консистентный модель доставка приложение который зависеть платформа имплементация oam описывать интерфейс разработчик который определять должно состоять приложение оно должно работать микросервис oam микросервисный архитектурный паттерн становиться популярный разработка многий разработчик начинать разбивать монолитный приложение мелкий часть каждый такой часть согласно определение oam смоделировать компонент  oam component  вместе несколько компонент соединять приложение  oam application  yaml apiversion coreoamdevv1beta1 kind application metadata name webserverdemo spec components    name helloworld     type webserver           запрос развертывание компонент     properties                    задавать параметр       image myimagehelloworld       port 8000                  открывать порт       env        name foo         value bar       cpu 100m  такой объект кубернетес service ingress необходимый предоставляений сетевой доступ приложение persistentvolumeclaim нужный хранение данные объект который работать надстройка кубернетес  servicemonitor prometheus секрет нужный обеспечение наблюдаемость безопасность ресурс модификация нужный предоставление определенный возможность oam объект определять traits  oam traits  черта yaml apiversion coreoamdevv1beta1 kind application metadata name myapp spec components    name publicweb     type webui     properties       image myimagewebuiv101sha256hash       param_1 enabled     traits        type ingress         properties           path            port 8080    name backend     type companytestbackend     properties       debug true     traits        type scaler  черт scaler указывать количество реплика компонент backend         properties    родной кубернетес hpa например keda           replicas 4  черта компонент проект использовать oam kubevela alibaba enterprise distributed application service edas crossplane прежде интересовать kubevela проект выходить alibaba cloud crossplane который являться логический продолжение идея закладывать oam paasidp попытка создавать новый уровень абстракция поверх yaml api кубернетес  это обычный практика крупный организация  кубернетес оперировать инфраструктурный примитив возможность такой инструмент helm kustomize helmfile достаточно ограничивать поэтому следующий логический шаг внедрение кубернетес это разработка свой графический конфигуратор приложение упрощать работа разработчик платформенный команда вместо графический конфигуратор это манифест toml уберyaml который включать настройка приложение инфраструктура разработчик kubevela пойти другой путем yaml конфиг appfile каждый запрос развертывание приложение трансформироваться dag написать  cue  любой компонент kubevela кастомизировать помощь cue  язык конфигурация который похожий hcl bcl кубернетес yaml кроме гибкость такой решение обеспечивать хороший масштабируемость kubevela работать нагрузка тысяча приложение сказать доморощенный проект который обычно развивать небольшой команда разработчик kubevela  платформа приложение kubevela это программировать движок основа который построить собственный внутренний платформа разработка idp paas этот детище инженер alibaba cloud создавать принцип стандарт oam проект закладывать свой операционный опыт оптимальный подход построение платформа база кубернетес вполне возможно alibaba cloud являться крупный мир поставщик услуга управлять кубернетес поэтому опыт определенно заслуживать внимание архитектура kubevela kubevela core controller  ключевой компонент который отвечать логика управлять ресурс api оркестрация прасинг конфиг файл clustergateway  этот штука нужный предоставлять унифицировать доступ кластер кубернетес дополнение velaux  пользовательский интерфейс многое повторять функционал ui консоль rancher openshift включая возможность визуализация топология ресурс приложение приложение workflow  движок рабочий процесс который kubevela использовать сложный сценарий доставка приложение vela prism  надстройка  kubernetes api aggregation layer  kubevela использовать это дополнение работа grafana   terraform  оркестрация использовать контроллер  terraform  переиспользование существующий инфраструктура провайдер terraform это важный фактор речь идти создание гибридный облако связка kubevela terraform позволять покрывать автоматизация инфраструктура облако локально кластер кубернетес предел сценарий доступный кластер кубернетес  velad  отдельный   демон kubevela k3s который подключаться кластер кубернетес развертывание приложение каталог  дополнение  kubevela который случай openshift rancher расширять исключение процесс мой субъективный мнение kubevela гораздо просто логичный использовать стандартный кубернетес yaml cue создание пользовательский аддон это реализованный посмотреть пример аддон  certmanager  сопоставление синхронизация  crossplane  проект использовать стандарт oam kubevela  уметь  отслеживать расхождение конфигурация состояние инфраструктурыприложение встроенный механизм drift detection сложно представлять успешный внедрение gitops  один самый популярный данный момент тренд devops любой цена внедрять gitops  тема написать отдельный статья cicd kubevela это полнофункциональный платформа доставка код капот такой возможность развертывание приложение несколько кластер  gitops  мультикластерный конвейер доставка код реализовать помощь интеграция  fluxcd  развертывание helm чарт реализованный fluxcd конвейер развертывание один стек приложение помощь встроенный легковесный  движок рабочий процесс  такой подход весомый преимущество сравнение написание доморощенный конвейер непрерывный развертывание случай необходимо реализовывать канареечный релиз писать конвейер сам внедрять специализированный система непрерывный доставка зависеть требование организация kubevela позволять обходиться лишь встроенный платформа инструмент родные кубернетес api  мочь лишь предполагать alibaba принимать решение публикация исходный код kubevela про",
    "tags": [
        "kuber",
        "kubernetes",
        "k8s",
        "микросервисы",
        "разработка",
        "software engineering",
        "ci/cd",
        "sre",
        "kandinsky art"
    ]
}