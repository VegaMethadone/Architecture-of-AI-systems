{
    "article_id": "727850",
    "article_name": "Как на самом деле работает Async/Await в C# (Часть 1)",
    "content": "оригинальный статья довольно объемный взять смелость разбивать несколько независимый часть легкое перевод восприятие disclaimer  являться профессиональный переводчик перевод подготовить скоро коллега быть благодарный любой исправление помощь перевод статья очень интересный давать сделать она доступный русский язык часть 1 самый начало часть 2 асинхронный модель основа событие eap появление tasks асинхронный модель основа задача tap valuetasks итератор c помощь asyncawait внутренний устройство преобразование компилятор synchronizationcontext configureawait поле state machine заключение несколько неделя назад блог  net blog  появляться статья  такой net почему должный выбирать  он представлять высокоуровневый обзор платформа кратко описывать различный компонент архитектурный решение также обещать подробный пост затрагивать тема пост являться первый такой продолжение который подробно рассматриваться история создание архитектурный решение деталь реализация asyncawait c net   поддержка asyncawait существовать десять год этот время изменять способ написание масштабировать код net использование функциональность понимание именно происходить капот являться работоспособный чрезвычайно распространенный способ работа начинать синхронный метод подобный следующий метод являться синхронный вызывающий сторона смочь делать другой пока весь операция завершаться управление возвращать вызывающий сторона    synchronously copy all data from source to destination public void copystreamtostreamstream source stream destination      var buffer  new byte0x1000     int numread     while numread  sourcereadbuffer 0 bufferlength  0              destinationwritebuffer 0 numread       затем добавлять несколько ключевой слово изменять несколько имя метод итог получать следовать асинхронный метод метод являться асинхронный ожидаться управление возвращать вызывающий сторона очень быстро возможно завершение работа связанный весь операция  asynchronously copy all data from source to destination public async task copystreamtostreamasyncstream source stream destination      var buffer  new byte0x1000     int numread     while numread  await sourcereadasyncbuffer 0 bufferlength  0              await destinationwriteasyncbuffer 0 numread       идентичный синтаксис возможность использовать тот конструкция поток управление неблокирующий свой суть значительно отличаться основной модель выполнение весь тяжелый работа который выполнять компилятор c основной библиотека хотя обычно использовать поддержка знать точно происходить капот твердо убежденный понимание чтото работать помогать использовать это частность asyncawait понимание механизм работа особенно полезный хотеть заглядывать поверхность например пытаться отлаживать пойти улучшать производительность остальное пойти правильно пост подробно рассматривать именно работать await уровень язык компилятор библиотека мочь максимально использовать ценный возможность самый начало net framework 10 появляться шаблон модель асинхронный программирование известный шаблон apm известный шаблон beginend известный шаблон iasyncresult высокий уровень паттерн простой синхронный операция dostuff class handler      public int dostuffstring arg  шаблон соответствующий метод метод begindostuff метод enddostuff class handler      public int dostuffstring arg      public iasyncresult begindostuffstring arg asynccallback callback object state     public int enddostuffiasyncresult asyncresult  begindostuff принимать тот параметр dostuff дополнительно принимать делегат asynccallback неявный объект состояние оба который мочь нулевой метод begin отвечать инициирование асинхронный операция предоставляться обратный вызов часто называть продолжение начальный операция также отвечать обратный вызов вызывать завершение асинхронный операция метод begin также создавать экземпляр тип реализованный iasyncresult использовать необязательный состояние заполнение свойство asyncstate iasyncresult namespace system      public interface iasyncresult              object asyncstate  get          waithandle asyncwaithandle  get          bool iscompleted  get          bool completedsynchronously  get            public delegate void asynccallbackiasyncresult ar  экземпляр iasyncresult возвращать метод begin также передавать asynccallback вызывать пользователь готовый получать результат операция передавать экземпляр iasyncresult метод end который отвечать обеспечение завершение операция синхронный ожидание завершение блокирование противный случай затем возвращать любой результат операция включая распространение любой ошибокисключение который мочь возникать такой образ вместо написать код подобный следующий синхронный выполнение операция try      int i  handlerdostuffarg      usei  catch exception e        handle exceptions from dostuff and use  метод beginend мочь использовать следующий образ выполнение тот операция асинхронно try      handlerbegindostuffarg iar               try                      handler handler  handleriarasyncstate             int i  handlerenddostuffiar             usei                  catch exception e2                        handle exceptions from enddostuff and use               handler  catch exception e        handle exceptions thrown from the synchronous call to begindostuff  иметь дело api основа обратный вызов любой язык это должно показываться знакомый однако далеко становиться сложно например существовать проблема погружение стек погружение стек  это код неоднократно выполнять вызов который глубоко глубоко погружаться стек степень это приводить переполнение стек метод begin вызывать обратный вызов синхронно операция завершаться синхронно вызов begin непосредственно вызывать обратный вызов  асинхронный операция который завершаться синхронно самый дело очень распространять являться асинхронный гарантировать асинхронный завершение скоро просто разрешать например рассматривать асинхронный чтение какойлибо сетевой операция например получение сокет нужно небольшой количество давать каждый отдельный операция например чтение некоторый заголовочный данные ответ мочь устанавливать буфер избегать накладный расход множество системный вызов вместо выполнять небольшой чтение объем данные который нужный немедленно выполнять крупный чтение буфер затем потреблять данные буфер пока исчерпываться это позволять сокращать количество дорогостоящий системный вызов необходимый реальный взаимодействие сокет буфер существовать асинхронный абстракция который использовать первый асинхронный операция который выполнять заполнение буфер завершаться асинхронно последующий операция исчерпание базовый буфер самый дело требовать вводавывод просто извлекаться буфер поэтому мочь завершаться синхронно метод begin выполнять один этот операция обнаруживать завершаться синхронно синхронно вызывать обратный вызов это означать стековый кадр который вызывать метод begin стековый кадр сам метод begin стековый кадр обратный вызов происходить обратный вызов развертываться снова вызывать begin этот операция завершаться синхронно обратный вызов вызывать синхронно снова оказываться несколько кадр глубина стек далее далее пока конец конец стек заканчиваться это реальный возможность который легко воспроизводить попробовать программа net core using systemnet using systemnetsockets  using socket listener  new socketaddressfamilyinternetwork sockettypestream protocoltypetcp listenerbindnew ipendpointipaddressloopback 0 listenerlisten  using socket client  new socketaddressfamilyinternetwork sockettypestream protocoltypetcp clientconnectlistenerlocalendpoint  using socket server  listeneraccept _  serversendasyncnew byte100_000  var mres  new manualreseteventslim byte buffer  new byte1  var stream  new networkstreamclient  void readagain      streambeginreadbuffer 0 1 iar               if streamendreadiar  0                      readagain  uh oh                  else                      mresset               null  readagain  mreswait устанавливать простой клиентский сокет серверный сокет соединять друг друг серв",
    "tags": [
        ".net",
        "c#",
        "асинхронное программирование"
    ]
}