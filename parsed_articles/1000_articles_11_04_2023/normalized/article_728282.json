{
    "article_id": "728282",
    "article_name": "О снижении затрат на PostgreSQL в облаке",
    "content": "использовать postgresql облако существовать очень большой вероятность тратить нужно покрывать необходимость ваш бизнес давать разбираться выжимать postgre максимум потратить минимм основа статья ложиться рекомендация дань гусман бургос dani guzmán burgos наш технический руководитель  мониторинг управление percona  pmm сокращение расход стоить обращать внимание снижать затрата postgresql облако первый шаг путь снижение затрата  использовать действительно нужно платить ресурс который нужный сокращение расход  это непрерывный процесс определять ресурс который отказываться уменьшать ежемесячный счет довольно сложно мочь оценивать реальный требование ваш приложение помощь анализ соответствующий метрика видеть главный дашборд pmm низкий нагруженность процессор какойлибо отслеживать служба база данные это скоро означать сервер неактивный ресурс выделять избыток overprovisioned рисунок 1 красный отмечать сервер который процессор загружать менее 30 свой допустимый мощность pmm также отображать исторический данные который помогать определять долго служба находиться состояние дашборд изменять конфигурация метрика процессор представлять ниже цветовой индикация состояние доступный дашборд pmm 2320 поздний версия рисунок 1 главный дашборд pmm согласно  документация  amazon web services aws инстанс считаться выделять избыток ресурс overprovisioned крайний мера такой показатель нагрузка процессор сеть потребление память уменьшать сохранение соответствие требование производительность ваш рабочий нагрузка этот ресурс выделять недостаточный объем underprovisioned overprovisioned инстанс являться один основной причина излишний затрата инфраструктура повышение эффективность использование ресурс уменьшение влияние бюджет выделять облачный вычисление  это разовый мероприятие непрерывный цикл оценка необходимый объем ресурс борьба избыточный выделение сокращение расход масштаб предполагать самый культурный сдвиг инженер нужно начинать учитывать стоимость качество один  kpi  развертывание наряду память пропускной способность сеть качество пример представлять игровой студия создавать игра который становиться популярный поэтому количество ресурс необходимый поддержка больший число пользователь значительно возрастать игра начинать терять популярность сервер неизбежно переходить overprovisioned состояние  нужно корректировать выделение ресурс соответствовать реальный потребность приложение определение адекватный масштаб цель экономия подход сокращение расход сокращение переплата cloud waste переработка архитектура снижение выделять ресурс необходимый масштаб независимо метод который использовать развертывание свой инстанс postgresql показатель который определяться необходимость изменение масштаб загрузка процессор использование память пропускной способность сеть использование хранилище помнить цель оптимизация ваш инфраструктура являться один лишь минимизация затрата должный уверять ваш решение основывать анализ метрика повлиять операция самый главный задача заключаться гарантировать сервис потерять производительность исчерпывать доступный ресурс postgresql облако процессор допускать выбирать качество облачный платформа aws  конфигурация подбирать ваш инфраструктура очень сильно влиять производительность ваш приложение ежемесячный расход например инстанс amazon elastic compute cloud ec2 процессор  graviton2  хороший выбор нежели вариант arm дешево получать быстрый ядро это быть реальный физический ядро процессор  hyperthreading  поток процессор graviton2 предназначать работа  зарезервированный инстанс  экономия затрата долгосрочный перспектива преимущество процессор graviton2 хороший соотношение цена качество широкий спектр рабочий нагрузка всесторонний поддержка программный обеспечение повышенный безопасность облачный приложение доступный управляемый сервис aws хороший производительность ватт энергия использование amazon ec2 хранилище данные развивать пример aws выбор правильный вариант хранение данные также иметь ключевой значение производительность amazon elastic block store ebs  это отличный вариант дисковый пространство согласно  документация  aws amazon ebs  это простой использование масштабировать высокопроизводительный сервис блочный хранилище разрабатывать amazon ec2 рисунок 2  amazon elastic block storage работа реляционный nosql база данные  это юзкейс который рекомендоваться использовать ebs мочь развертывать масштабировать помощь ряд база данные среди который выделять sap hana oracle microsoft sql server postgresql mysql cassandra mongodb ebs позволять задействовать том основа жесткий диск hdd оптимизировать большой потоковый рабочий нагрузка том основа твердотельный накопитель рекомендоваться рабочий нагрузка база данные оптимизировать транзакционный рабочий нагрузка твердотельный ssd любой следующий тип io1 io2 io2 block express gp2 gp3 именно многообразие выбирать качество хранилище данные это зависеть требование конкретно ваш рабочий нагрузка дисковый пространство количество операция вводавывод секунда iops пропускной способность мбс также ваш конфигурация также должный оптимальный точка зрение стоимость этот вопрос рекомендовать почитать  блогпост  ави драбкина avi drabkin который анализировать конфигурация каждый тип том который быть хороший образ удовлетворять требование конкретный юзкейс информация тип том ebs мочь находить страница  тип том amazon ebs  развертывание несколько зона доступность readреплики развертывание несколько зона доступность multiaz deployment рамка  развертывание несколько зона доступность  amazon rds автоматически создавать первичный primary инстанс база данные синхронно реплицировать данные инстанс зона доступность обнаружение сбой amazon rds автоматически переключаться резервный инстанс ручной вмешательство рисунок 3  развертывание amazon rds несколько зона доступность readреплика read replica amazon rds создавать второй инстанс база данные использовать снапшот исходный инстанс затем использовать встроенный движок асинхронный репликация обновление readреплики каждый изменение исходный инстанс база данные  readреплика  работать инстанс база данные который разрешать соединение чтение приложение мочь подключаться readреплике точно любой другой инстанс база данные amazon rds реплицировать база данные исходный инстанс рисунок 4 readреплики amazon rds вариант развертывание несколько зона доступность иметь ряд преимущество особенно обеспечение высокий доступность аварийный восстановление минус заключаться вариант стоять дорого самый хороший вариант развертывать readerинстансы использовать обратный проксисервер например  pgpoolii  pgbouncer readerинстансы стоить дорого стандартный сетап мочь использовать обработка повседневный трафик база данные продакшень pgpoolii использовать цель сокращение использование соединение connection usage помогать снижать нагрузка процессор память также  балансировка нагрузка  благодаря балансировка нагрузка мочь перераспределять трафик автоматически отправлять запрос чтение данные ваш readрепликам запрос запись ваш основной инстанс база данные касаться readреплик aws продвигать rds postgresql readреплику означать readреплика становиться основной инстанс всякий быть пытаться сделать это readреплика отсоединяться первичный инстанс становиться свой собственный первичный инстанс результат получать разный кластер один возможный решение являться использование расширение pglogical создание реплика вне rds сочетание pglogicalрепликации обратный проксисервер сохранять преимущество управляемый база данные именно резервный копирование обслуживание незначительный обновление поддержка восстановление привязка конфигурация несколько зона доступность давать полный контроль запланировать переключение ресурс кроме преобразование реплика первичный инстанс  хороший подход обновление например нужно обновлять база данные большой объем данные процесс затягиваться несколько час это время ваш инстанс недоступный рамка подобный конфигурация мочь обновлять реплика затем преобразовывать реплика первичный инстанс прерывать операция инфор",
    "tags": [
        "postgresql",
        "postgresql cloud solutions",
        "снижение затрат"
    ]
}