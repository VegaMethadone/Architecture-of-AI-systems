{
    "article_id": "725994",
    "article_name": "10 причуд Zig",
    "content": "последний время блог автор выходить несколько публикация zig  httpzig  logzig websocketzig  автор полагать область еще учиться учиться часто сталкиваться вещь который оставаться удивительный непонятный пожалуй автор поэтому полезно разбирать причуда zig  возможно многий читатель некоторые этот вещь просто очевидный 1  const self  this    начинать просматривать исходный код zig достаточно скоро увидеть const self  this начинать функция начинаться    например this  это встроенный функция  такой функция предоставляться компилятор this возвращать тип самый глубокий экземпляр структурыперечисленияобъединение например следующий код выводить консоль true const tea  struct    const self  this   pub fn main void     синтаксис  поговорить поздно    выводить true   stddebugprintn tea  teaself  код часто использоваться метод указание получатель const tea  struct    const self  this    fn drinkself self void           весь употребительность вариант применение  поверхностный мочь успех написать  fn drinkself tea void   вариант понастоящему полезный случай анонимный структура    fn beverage type    return struct      full bool  true      const self  this      fn drinkself self void        selffull  false           pub fn main void     beverage возвращать тип экземпляр который создаваться помощь     full умолчание иметь значение true поэтому мы обязательно указывать   var b  beverage   stddebugprintfull n bfull    bdrink   stddebugprintfull n bfull  код выводить консоль true затем false пример надумывать мы понадобиться анонимный структура должный именно такой подход основывать реализация дженерик zig работа дженерик мы понадобиться код похожий вышеприведенный плюс передача тип  type наш функция поэтому мы понадобиться this  ссылаться анонимный структура изнутри анонимный структура файл  это структура zig файл  это структура допускать мы нужный структура tea  мочь создавать файл название teazig добавлять следующий код  содержимое teazig pub const tea  struct   full bool  true   const self  this    pub fn drinkself self void      selffull  false     вызывать сторона использовать наш структура tea примерно const tea  importteazig   var t  teatea либо такой косметический изменение     быть использовать структура tea teazig  предпочтительно поступать const tea  importteazigtea   var t  tea поскольку файл  это структура наш  tea  фактически вкладывать неявно создавать структуруфайл качество альтернатива полный содержимое teazig такой    full bool  true const self  this  pub fn drinkself self void    selffull  false  импортировать    const tea  importteazig выглядеть странно воображать содержимое оборачивать pub const default  struct    смысл просматриваться первый встреча такой код всерьез запутываться     3  соглашение именование    вообще функция записываться верблюжий регистр camelcase тип записываться паскальрегистр pascalcase переменный записываться змеиный регистр lowercase_with_underscores основной исключение правило  функция возвращать тип часто использоваться дженерик записываться pascalcase имя файл правило записываться змеиный регистр lowercase_with_underscore тот файл который предоставлять тип напрямую наш последний чайный пример следовать тот соглашение именование тип следовательно файл должный называться teazig такой правило придерживаться легко цветистый мочь привыкать  4      код zig дело попадаться   это анонимный структура следующий код компилироваться выводить консоль keemun pub fn main void    const tea  type  keemun   stddebugprintsn teatype  самый дело пример 2 анонимный структура первый  тот который присваивать переменный  tea  другой  это второй параметр который передавать print  тот  teatype  второй версия  это особый тип анонимный структура неявный имя поль имя поле  0 1 2  zig это называться кортеж проверять неявный имя поле обращаться напрямую pub fn main void    const tea  keemun 10   stddebugprinttype s quality dn tea0 tea1  синтаксис 0 необходимый поскольку 0и1не являться стандартный идентификатор тот начинаться буква следовательно должный заключаться кавычка также встречать синтаксис  тот случай структура вывести правило такой происходить функция  init некоторый структура pub const tea  struct    full bool    const self  this    fn init self       тип структура выводиться возвращать тип функция     return        full  true           также обращать внимание параметр функция var server  httpzserverinitallocator  второй параметр httpzconfig   выводить средство zig zig требоваться каждый поле инициализировать httpzconfig задавать значение умолчание каждый поле поэтому пустой инициализатор структура вполне подходить также явно указывать один поле  var server  httpzserverinitallocator port  5040 zig  словно сообщать компилятор сделать это помещаться 5  field  значение    вышеприведенный код пользоваться full  true port  5040  именно задаваться поле инициализироваться структура знать намеренно это сделать принцип согласоваться вообще устанавливаться поле думать следующий пример демонстрировать почему синтаксис field  value резонный var tea  teafull  true   эй посмотреть похоже teafull  false 6  приватный поле структура    касаться поле структура  известно публичный структура функция умолчание приватный существовать опция сделать публичный поле структура мочь публичный рекомендоваться документировать допустимыеправильный вариант использование каждый поле  хотеться пускаться пост лишний разглагольствование такой ситуация приводить вполне ожидать проблема мир 1x количество скоро возрастать 7  const tmp    версия zig 010 первый строка код const r  stdranddefaultprnginit0random stddebugprintdn ruintatmostu16 1000 эквивалентный    var t  stdranddefaultprnginit0 const r  trandom 010 выше первый приводить строка эквивалентный const t  stdranddefaultprnginit0 const r  trandom обращать внимание t превращаться var const  этот разница важный  random требоваться изменять значение иной слово код оригинальный вид работать получать ошибка который сообщать программа рассчитывать randxoshiro256  вместо находить const randxoshiro256  код зарабатывать оригинальный вариант нужно разделять явно вводить временный переменный  var  var t  stdranddefaultprnginit0 const r  trandom 8  comptime_int    zig мощный фич comptime позволять разработчик делать многий вещь время компиляция логично предполагать выполнение время компиляция применимый тот данные который известный время компиляция поддержка такой операция zig предусматривать тип comptime_int comptime_float  рассматривать следующий пример    var x  0 while true    if somecondition break   x  2  код скомпилироваться тип x выводиться comptime_int  поскольку значение0 известно время компиляция проблема заключаться comptime_int обязанный const  изменять объявление  const x  0 получать другой ошибка данный случай попытаться приплюсовывать 2 const  решение явно определять  x  usize целочисленный тип время выполнение например u64  var x usize  0 9  stdtestingexpectequal    возможно первый написать вы тест приводить удивительный ошибка компиляция рассматривать код     fn adda i64 b i64 i64    return a  b   test add    try stdtestingexpectequal5 add2 3  показывать сигнатура expectequal  мочь объяснять почему скомпилироваться    pub fn expectequalexpected anytype actual typeofexpected void это сложный улавливать фактический значение принудительно приводиться тот тип ожидать приводить выше тест сложение скомпилироваться поскольку  i64 невозможно принудительно приводить comptime_int  простой решение  поменять параметр test add    try stdtestingexpectequaladd2 3 5  это работать  многий поступать основной недостаток такой подход сообщение отказ перемешиваться ожидать фактический значение правильно решаться случай ожидать значение приводиться фактический тип использование встроенный as  test add    try stdtestingexpectequalasi64 5 add2 3  возвращать значение get равный const u8  это опциональный сводить ноль строка ожидать значение верно равный ноль const u8 невозможно принудительно приводить null  исправлять это необходимый принудит",
    "tags": [
        "rust",
        "zig",
        "чистый код",
        "соглашения"
    ]
}