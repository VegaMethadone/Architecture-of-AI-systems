{
    "article_id": "721650",
    "article_name": "OpenApiGenerator — или как мы генерируем документацию для 3k сервисов API на PHP без погружения в openapi",
    "content": "вначале делать документация word google docs confluence попытка написать openapiспецификацию api вручную увидеть сколько нужно писать  бросать затея нужно вести документация знакомый отрасль формат расти количество сервис api делать это максимально подручный api большой штука 20 разный версия модуль свой клиент  сайт мобильный приложение каждый который 20 50 вебсервис первый версия новый причем каждый квартал добавляться новый версия который api состоять 8090 копия предыдущий версия остальной 1020 отличаться незначительно штука 20 набор сервис 1020 вебсервис интеграция разный размер авторизация специфический  каждый свой интегрировать система функциональность некоторый вебсервис повторять таковой основной api итого суммарно около  3000 различный вебсервис 50 разный версия api  который  8090 иметь одинаковый описание  идея начало новый история полагать идея коллега  сделать автоматический препроцессоргенератор описание api учет специфика проект новый версия api наследоваться предыдущий  версионироваться весь api вместо версия отдельный вебсервис приводить повторение один тот редко изменять вебсервис каждый версия api изменение изза дублироваться описание больший часть сервис  прямой следствие наследование также переиспользование вебсервис разный api интеграция документация openapi никто вести проект  начинать она вести ноль довольно большой api показываться отчаянный идея  напротив написать парсергенератор проект  показываться хороший идея отсутствие желание вручную составлять openapiспецификацию  уберегать разработчик ручной редактирование openapiфайлов весь разработчик  ide phpфайлы желание иметь документация рядом код  максимально снижать вероятность ситуация код изменять документация api  технический условие упрощение допуск технически api довольно простой это позволять реализовать первый версия минимум функция относительно небольшой срок http метод взаимодействие  getpost параметр передаваться вид getпараметров либо jsonтела postзапросов возвращаться 200й httpкод случай ошибка случай успешный выполнение сервис бэкэнд возвращать ответ один тот структура формат ответ сервис  json стэк бэкэнд реализовать полностью фреймворка использовать yii2 версия api являться отдельный модуль приложение endpointы размещать контроллер  новый версия api контроллер наследоваться предыдущий версия требовать изменение endpointы переопределяться использоваться единый подход аутентификация 80 api остальной 20 либо авторизация вовсе либо один кастомный сложный запрос множество поле проверка использоваться валидация помощь классмодель model yii2 formrequest laravel endpointы возвращать либо скаляр либо объектdto описывать подробный весь поле число вложенный либо dtoподобный объектгенератор ответ небольшой магия забегать вперед стоить упоминать примерно тот допуск оставаться соответственно прикручивать генератор свой xmlapi получаться забегать вперед дважды идея продумывать реализация недостающий функция обсуждение открывать приниматься mr принцип работа качество формат описание взять phpdoc расширять помощь кастомный параметр нарушать psr5 который находиться стадия драфт  источник данные точка вход  список endpointов  api метод взаимодействие  getpost составлять список тег api yii2  отдельный модуль другой  часть url endpointов кроме последний первый источник данный должный становиться  метод  отвечать endpointы api программный код описание endpointов авторизация вложенность документация второй третий источник данный становиться  параметр запрос структура возвращать значение  параметр метод сложный запросывалидатор  например formrequest laravel также тип возвращать значение  сигнатура phpdoc завершать источник быть данные приложение  базовый url способ аутентификация тег тд задаваться явно классенаследник scraperа генератор собирать информация проходить все список endpointов api анализировать описание phpdoc сигнатура далее заниматься анализ использовать описание endpointом объект входной  валидатор выходной  возвращать данные  версионирование очень сильно принцип реализация зависеть архитектура проект механизм версионирование каждый новый версия api  это отдельный модуль yii2 контроллер который наследоваться контроллер предыдущий версия  class v001 extends yiibasemodule  class v002 extends v001  class v003 extends v002  сервис который нужно изменять api либо логика либо формат переопределяться контроллер новый версия  v001 class profilecontroller extends controller      public function actions        return          get  getprofileactionclass         update  updateprofileactionclass               v002 class profilecontroller extends appmodulesv002controllersprofilecontroller      public function actions        return array_mergeparentactions          update  updateprofilev002actionclass              зачастую сервис переопределяться полностью слой  view   форматсостав возвращать данный  генератор ответ который мочь полностью перекраивать ответ сервис новый версия изменение логика сервис получаться каждый новый версия 90 сервис api полностью идентичный таковой предыдущий версия остальной 10 либо переопределять логика новый actionкласс либо формат вывод итог выходить 90 api описание новый версия браться описание старый версия остальной 10 нужно заново описывать phpdocом поле запрос ииль ответ  пример разбирать сражать основной элемент api  endpoint    описание сервис     выдавать список айтем проектамессенджерановость   auth differentauthtype   param string firstname имя запрашивать   paramexample firstname сергей   param string list тип список   paramenum list newsmessagesproject   return indexdto объект поле который возвращать ответ сервис   public function actionindex   string firstname   string list         return     несколько параметр скалярный краткий описание также указание формат ответ который описывать примерно описывать phpdoc явный параметр  настраивать анализ первый второй оба настройка генератор умолчание просматриваться оба способ class indexdto         var indexlist пагинировать список       public list         var int количество элемент список       public int count         var bool признак последний страница       public bool lastpage    phpdoc     property indexlist list пагинировать список   property int count количество элемент список   propertyexample count 169   property bool lastpage признак последний страница   class indexdto           который несколько поле указывать список  сложность описание api зачастую состоять описывать уровень вложенность объект связывание этот объект точно описание себя использовать следующий способ явно указывать тип объект  schema  phpdocкласса   хотеть подменивать текущий объект другой объектовскаляроммассив объектовскаляр явно указывать вложенный тип объект объект  schema  phpdocкласса   хотеть подменивать текущий объект другой объектовскаляроммассив объектовскаляр допускать возможность переопределение явно указывать вложенный тип объект поле  property  явно свойство   уверенный вкладывать объект тип явно указывать вложенный тип объект поле  property  ссылка свойство который хранить ссылка класс   возможность переопределение вложенный объект например контроллер зависимость версия api   также возможность указывать свойство массив сразу объект приложение нужно инициализировать создавать иерархия dto это выходить рамка статья мочь использовать подмена тип  schema   указывать конкретный тип определять другой тип список элемент другой тип  это использоваться динамический подмена реализация    schema indexdtoitem   class indexdto    class indexdtoitem    public int id   public string title  подмена динамически выглядеть    schema itemclass   class indexdto    public itemclass  indexdtoitemclass  отрабатывать точно зато мочь инициализация подменивать реализация замена ссылка  itemclass  такой образ довольно легко реализовывать переопределение отдельный узел dto новый версия api например самый мочь сделать  indexlist  правда приходиться определять поле явно phpdoc    property indexclass list пагинировать список   class indexdt",
    "tags": [
        "api",
        "openapi",
        "swagger",
        "документация",
        "phpdoc",
        "php",
        "yii",
        "yii2",
        "slim",
        "laravel"
    ]
}