{
    "article_id": "727432",
    "article_name": "Artery AT32F403A. Знакомство новичка",
    "content": "добрый день  писать первый аудитория поэтому представляться звать артем разработчик приложение  vestaxr  автомобиль lada этот приложение являться бортовой компьютер машина магнитола гу база андроид который взаимодействовать машина электронный плата канбас отправлять сигнал каншин гу обратно позволять получать данные управлять некоторый настройка автомобиль изначально канбас строиться база stm32f405 наставать время микроконтроллер становиться дорога  попадать санкция воля судьба приходиться время переквалифицироваться программист приложение андроид программист микроконтроллер мк работать приходиться мк информация который очень мало сказать она толком все это сайт производитель пример led github речь идти мк artery at32f403a  спецификация это очень наворотить мк опыт работа stm32f405 правило готовый прошивка поэтому знакомый оболочка keil принцип работа понимать все другой кроме язык программирование итак два неделя мозговой штурм поиск информация тупой копирование код приносить свой результат получать действующий канбас весь функция который должный работа usb can usart хотеть вы поделиться свой опыт надеяться комуто это сэкономить время все порядок первый статья самый простой таймер led сказать hello world знакомиться документ выкладывать сайт производитель  httpswwwarterytekcomenproductat32f403ajsp работа мы понадобиться скачать следующий файл архив скачать файл конец статья at32f403a_407_firmware_library_v214  пример основной шаблон keil5_at32mcu_addon_v219  файл данные keil другой средство разработка at_link_20221221  драйвер программатор далее тестовый плата готовый канбас перепаять мк стоять stm32f405 поставлять at32f403a разводка плата приходиться менять жирный плюс  canbusxr программатор atlink итак запускать keil нажимать pack installer далее import packs находить расположение папка keil5_at32mcu_addon_v219 выбирать наш мк нажимать открывать итог получать такой картинка справа появляться ваш мк все готовый открывать папка пример at32f403a_407_firmware_library_v214projectat_start_f403aexamplestmr это пример таймер находить папка timer_base следовать название это базовый пример работа таймер открывать проект папка mdk_v5 все стандартно знакомый правда сказать спасибо пример лежать полочка осторожно пример тестовый доска artery мой случай плата толькотолько открывать проект файл mainc void clkout_config  функция настройка внешний генератор частота void tmr1_ovf_tmr10_irqhandler  функция обработка таймер main  главное тело программа который состоять system_clock_config  настройка тактирование весь плата трогать это вернуться еще следующий пост at32_board_init  настройка отладочный плата мы нужный поэтому закомментировать  get system clock   crm_clocks_freq_getcrm_clocks_freq_struct  следовать комментарий настройка системный часы  turn led2led3led4 on   at32_led_onled2  at32_led_onled3  at32_led_onled4  включение led плата закомментировать все  enable tmr1 clock   crm_periph_clock_enablecrm_tmr1_periph_clock true  tmr1 configuration     time base configuration     systemclock2400010000  1hz   tmr_base_inittmr1 9999 crm_clocks_freq_structahb_freq  10000  1  tmr_cnt_dir_settmr1 tmr_count_up  overflow interrupt enable   tmr_interrupt_enabletmr1 tmr_ovf_int true  tmr1 overflow interrupt nvic init   nvic_priority_group_confignvic_priority_group_4  nvic_irq_enabletmr1_ovf_tmr10_irqn 0 0  enable tmr1   tmr_counter_enabletmr1 true  собственно объявляться работа таймер clkout_config  настройка внешний генератор частота находить строчка  tmr_base_inittmr1 9999 crm_clocks_freq_structahb_freq  10000  1 задавать время работа таймер  формула такой время_сечь  10000  1 9999 это 1 секунда 999 это 100 мс 29999  3 секунда обращать внимание надпись tmr1 нажимать f7 проект компилироваться мы доступный переход тело проект переходить tmr1 видеть сделать 14 таймер прекрасно правда итак добавлять тело главный функция main строчка tmr2    enable tmr1 tmr2 clock    crm_periph_clock_enablecrm_tmr1_periph_clock true   crm_periph_clock_enablecrm_tmr2_periph_clock true     tmr1 tmr2 configuration     time base configuration     systemclock2400010000  1hz    tmr_base_inittmr1 9999 crm_clocks_freq_structahb_freq  10000  1   tmr_cnt_dir_settmr1 tmr_count_up   tmr_base_inittmr2 29999 crm_clocks_freq_structahb_freq  10000  1   tmr_cnt_dir_settmr2 tmr_count_up     overflow interrupt enable    tmr_interrupt_enabletmr1 tmr_ovf_int true   tmr_interrupt_enabletmr2 tmr_ovf_int true     tmr1 overflow interrupt nvic init    nvic_priority_group_confignvic_priority_group_4   nvic_irq_enabletmr1_ovf_tmr10_irqn 0 0     enable tmr1 tmr2    tmr_counter_enabletmr1 true   tmr_counter_enabletmr2 true строчка 19  этот объявление главный функция работа таймер меняться искать функция исправлять tmr2 void tmr1_ovf_tmr10_irqhandlervoid    iftmr_flag_gettmr1 tmr_ovf_flag  reset         add user code      at32_led_toggleled3     tmr_flag_cleartmr1 tmr_ovf_flag      iftmr_flag_gettmr2 tmr_ovf_flag  reset         add user code      at32_led_toggleled3     tmr_flag_cleartmr2 tmr_ovf_flag     получаться срабатывание таймер флаг переходить reset выполняться код скобка каждый таймер отдельно  касаться внешний генератор объявление код пин мк artery объявление пин обозначаться gpio_init_structgpio_pins  gpio_pins_8 указание a b c d f e зависеть количество ножка мк указываться два строчка  enable gpio port clock    crm_periph_clock_enablecrm_gpioa_periph_clock true   это регистр     set default parameter    gpio_default_para_initgpio_init_struct     clkout gpio init    gpio_init_structgpio_drive_strength  gpio_drive_strength_stronger   gpio_init_structgpio_out_type  gpio_output_push_pull   gpio_init_structgpio_mode  gpio_mode_mux   gpio_init_structgpio_pins  gpio_pins_14   это пин мк   gpio_init_structgpio_pull  gpio_pull_none   gpio_initgpioa gpio_init_struct   это регистр плата внешний генератор подцеплять pa14 нога менять три место gpioa gpiob gpioc далее код разбираться настраивать программатор режим debug переходить options for target выбирать cmsisdap нажимать далее settings выбирать программатор нажимать f7 компилировать нажимать меню debug  startstop debug session 5 секунда снова нажимать f5 запуск плата тишина давать проверять таймер работать поставлять breakpoint строчка первый таймер видеть выполнение останавливаться значит таймер работать отлично нажимать breakpoint tmr2 увидеть срабатывать 3 секунда выходить режим debug добавлять функция инициализация led вписывать она запуск main void init_ledvoid      gpio_init_type gpio_init      crm_periph_clock_enablecrm_gpioc_periph_clock true   очень важно пропустить  gpio_initgpio_mode  gpio_mode_output     gpio_initgpio_out_type  gpio_output_push_pull     gpio_initgpio_pull  gpio_pull_none     gpio_initgpio_pins  gpio_pins_1     gpio_initgpio_drive_strength  gpio_drive_strength_stronger     gpio_initgpioc gpio_init      gpio_initgpio_mode  gpio_mode_output     gpio_initgpio_out_type  gpio_output_push_pull     gpio_initgpio_pull  gpio_pull_none     gpio_initgpio_pins  gpio_pins_2     gpio_initgpio_drive_strength  gpio_drive_strength_stronger     gpio_initgpioc gpio_init  led подключать pc1 pc2 включение выключение готовый функция      at32_led_offled3     at32_led_onled2 нажимать f12 led3 переходить код настройка обозначение 2 led поэтому led_num  2 нажимать f12 at32_led_off тело main переходить функция прокручивать код вверх менять создавать текст объявление переменный led убирать лишний писать вызов функция включение led тело main     at32_led_onled3     at32_led_onled2 нажимать f7 далее debug загораться оба led ура поздравлять модифицировать функция обработка таймер void tmr1_ovf_tmr10_irqhandlervoid      iftmr_flag_gettmr1 tmr_ovf_flag  reset           add user code          at32_led_toggleled3         tmr_flag_cleartmr1 tmr_ovf_flag          iftmr_flag_gettmr2 tmr_ovf_flag  reset           add user code          at32_led_toggleled2         tmr_flag_cleartmr2 tmr_ovf_flag       снова запускать led перемигиваться частота 1 секунда второй частота 3 секунда ",
    "tags": [
        "keil",
        "artery",
        "at32f403a"
    ]
}