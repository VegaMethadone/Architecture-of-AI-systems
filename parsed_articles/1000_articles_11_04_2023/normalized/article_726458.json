{
    "article_id": "726458",
    "article_name": "Создание и тестирование процессоров аннотаций (с кодогенерацией) для Kotlin",
    "content": "разработка использование kotlin java создание класс верхнеуровневый описание часто использоваться маркировка аннотация например модель таблица база данные сетевой запрос инъекция зависимость подключение процессор аннотация который также мочь генерировать код доступный основной проект запуск процессор аннотация выполняться внутри gradle javaпроектов annotationprocessor kotlin  kapt встраиваться зависимость цель сборка проект любой другой код процессор аннотация необходимо иметь возможность разрабатывать тест статья рассматривать основа использование кодогенерация использование kapt разработка тест создавать генератор код второй часть статья речь пойти разработка процессор основа kotlin symbol processing ksp создание тест начинать классический механизм кодогенерация kapt kotlin annotation processing tool kapt встраиваться gradle плагин maven добавление  goalsgoalkaptgoalgoals  описание  execution  конфигурация проект общий вид конфигурация проект kapt plugins      kotlinjvm version 1820     kotlinkapt version 1820     application   group  techdzolotov version  10snapshot  repositories      mavencentral   kotlin      jvmtoolchain17   application      mainclasssetmainkt  подключение кодогенерация наkapt становиться возможный подключать процессор команда kapt например подключать кодогенерация autovalue длясоздание иммутабельный класс фактически вkotlin могутбывать реализовать dataклассы autovalue решать туго задача дляjava вомногое похожий наlombok норабатывать иначе dependencies      implementationcomgoogleautovalueautovalueannotations1101     kaptcomgoogleautovalueautovalue1101  kaptпроцессор работать аналогично процессор аннотация java сначала исходный текст kotlin преобразовываться javaкод передаваться генератор это целое снижать скорость кодогенерация сравнение проект java решение проблема создаваться альтернативный механизм ksp который поговорить далее принцип кодогенерация создавать код java kotlin любой другой язык многий использовать kapt генератор разрабатывать изначально java например room hilt тп добавлять простой класс описание пользователь автоматический определение идентификатор import comgoogleautovalueautovalue  autovalue abstract class userinfo      abstract fun getid int     abstract fun getlogin string     abstract fun getpassword string      companion object          var id  0         fun createloginstring passwordstringuserinfo              id             return autovalue_userinfoid login password                выполнение кодогенерация запускать задача gradle  gradlew kaptkotlin сгенерировать код большинство размещаться buildкаталоге  buildgeneratedsourcekaptmain  представлять исходный текст java кроме создание getметодов также переопределять  equals   hashcode   tostring  отдельно импортировать необходимость поскольку размещаться пакет находиться исходный аннотировать класс создавать класс помечать аннотация  generated  указание класс процессор который создавать класс generatedcomgoogleautovalueprocessorautovalueprocessor final class autovalue_userinfo extends userinfo    определение поле   getфункции   tostring equals hashcode  сделать пример код использование сгенерировать класс fun main      val users  mutablelistofuserinfo     usersadduserinfocreateuser1 password1     usersadduserinfocreateuser2 password2     printlnusers  результат строковый представление список userinfoid1 loginuser1 passwordpassword1 userinfoid2 loginuser2 passwordpassword2 разбираться создание собственный кодогенератор основа быть использовать  шаблон  три модуль модуль приложение который использовать процессор аннотация модуль аннотация модуль процессор определять аннотация использование кодогенератор retentionannotationretentionsource annotation class sampleannotation реализовывать процессор который определяться метод process классерасширение  javaxannotationprocessingabstractprocessor  autoserviceprocessorclass supportedsourceversionsourceversionrelease_17 supportedannotationtypeskaptexampleannotationsampleannotation class sampleannotationprocessor  abstractprocessor      override fun processannotations mutablesetout typeelement roundenv roundenvironment boolean          roundenvgetelementsannotatedwithsampleannotationclassjavaforeach              processingenvmessagerprintmessagediagnostickindwarning itsimplename is processed                  return true       использоваться библиотека autoservice автоматический регистрация класс процессор кодогенерация подключаться buildgradlekts dependencies       implementationcomgoogleautoserviceautoservice101     kaptcomgoogleautoserviceautoservice101  метод process вызываться обнаружение аннотация перечислять  supportedannotationtypes  иметь доступ определение исходный код реализация  roundenvironment  получать  roundenv  также внутри  abstractprocessor  доступ  processingenv  который получать аргумент kapt options создавать файл поле  filer  выводить сообщение ide консоль gradle сообщение указываться тип перечисление diagnosticskind  error   ошибка  warning  отображаться информационный сообщение  other   любой другой тип сообщение прерывать выполнение кодогенерация roundenv получать информация аннотировать определение пакет интерфейсомкласс функциейметод определение переменный каждый определение представлять реализация интерфейс element позволять получать метаинформация определение simplename   название пакет kind   тип элемент определять elementkind getannotationtype   получение объект аннотация вместе аргумент определять modifiers   модификатор определение например private static enclosingelement   давать доступ элемент верхний уровень например определение класс аннотировать метод enclosedelements   возвращать список вложенный элемент например определение свойство метод аннотировать класс определять простой класс аннотация jvmfield использоваться исключение автоматический генерация getметодов sampleannotation class sampleclass      jvmfield     val x int  0     jvmfield     val y int  0  создавать процессор который обнаруживать отображать находить свойство класс autoserviceprocessorclass supportedsourceversionsourceversionrelease_17 supportedannotationtypeskaptexampleannotationsampleannotation class sampleannotationprocessor  abstractprocessor      override fun processannotations mutablesetout typeelement roundenv roundenvironment boolean          roundenvgetelementsannotatedwithsampleannotationclassjavaforeach  outer              outerenclosedelementsforeach inner                  if innerkind elementkindfield                      processingenvmessagerprintmessage                         diagnostickindwarning                         field innersimplename modifier innermodifiers                                                                     return true       добавлять генерация код получать объект filer мочь создавать байткод  createclassfile  ресурс  createresource  сгенерировать новый файл исходный текст  createsourcefile  далее создавать файл получать доступ  writer  записывать туда сгенерировать исходный текст завершение работа создавать файл проверять корректность синтаксис например хотеть добавлять поле id автоматический увеличение сначала подготовить шаблон исходный код java kotlin public class generatedsampleclass    generatedsampleclassсписок поле      заполнение поле значение конструктор      static int id  0   int getid      id     return id      подставлять определение поле исходный класс  использовать шаблон информация обнаруживать объект название пакет извлекаться enclosingelement аннотировать класс название сигнатура определение поле enclosedelements класс autoserviceprocessorclass supportedsourceversionsourceversionrelease_17 supportedannotationtypeskaptexampleannotationsampleannotation class sampleannotationprocessor  abstractprocessor      override fun processannotations mutablesetout typeelement roundenv roundenvironment boolean          roundenvgetelementsannotatedwithsampleannotationclassjavaforeach  outer              val fields  mutablelistofelement              var pkgnamestring  ",
    "tags": [
        "codegen",
        "annotation processing",
        "kotlin",
        "kapt",
        "otus"
    ]
}