{
    "article_id": "708986",
    "article_name": "Автоматическое построение плоской панорамы",
    "content": "введение статья представлять простой алгоритм автоматический сшивание несколько фотография плоский называть перспективный панорамный изображение planarperspective panoramic image статья содержать код язык python использование библиотека opencv  плоский панорамный изображение  исходный фотография край построение плоский панорама требоваться изображение снимать один точка камера повертывать вокруг входной зрачок объектив перемещать практика небольшой перемещение страшный давать небольшой искажение итоговый изображение плоский панорама охватывать область  вертикаль горизонталь другой диаметр отличие панорамный изображение сферический цилиндрический некоторый другой проекция плоский панорама оставлять прямой линия прямой  получать такой изображение какой получаться съемка тот точка камера большой угол обзор меньший фокусный расстояние панорама сферический слева плоский справа проекция теория начало мы понадобиться вещественный проективный   проективный плоскость состоять конечный точка вид   идеальный точка вид   точка   задавать элемент     задавать класс эквивалентность  домножать однородный координата ненулевой множитель быть задавать тот точка       элемент проективный плоскость воспринимать конечный точка плоскость   дополнять идеальный точка    точка бесконечность направление   также элемент проективный плоскость воспринимать линия плоскость   теорема проективный плоскость работать принцип двойственность поменять место точка линия получать двойственный теорема  пример теорема проективный плоскость красиво важно дальнейший повествование теорема 1 прямой точка   лежать прямой   доказательство    точка подставлять уравнение прямой двойственный прямая   пересекать точка   доказательство    точка подставлять уравнение прямой обращать внимание идеальный точка вид   лежать прямой    она называть прямой бесконечность теорема 2 прямой 2 точка  проходить прямой  доказательство прямой проходить оба точка  свойство векторный произведение двойственный 2 прямой  пересекаться точка  доказательство точка лежать оба прямой  свойство векторный произведение обращать внимание 2 идеальный точка пересекаться прямой бесконечность 2 параллельный прямой  пересекаться идеальный точка    также представлять множество луч хотя точно сказать прямой вложенный   проходить начинать координата луч пересекать плоскость   соответствовать конечный точка   луч плоскость    идеальный гомография  проективный преобразование  этот преобразование   который прямой переводить прямой важно гомография задаваться умножение однородный координата обратимый матрица   обращать внимание гомография   задавать один преобразование ненулевой множитель   давать вспомнить работать  модель пинхол камера  задавать 3dточка  проецироваться точка   плоскость изображение точка  проецироваться точка луч   модель камера сопоставлять 2dточку плоскость изображение луч 3d пространство    сопоставлять точка   плоскость   луч прямой   отождествление точка плоскость луч 3d подразумеваться сам проецирование происходить соответствовать модель пинхол камера оставаться сделать растяжение смещение плоскость это сделать следующий гомография давать проверять пусть задавать точка   спроецировать она плоскость изображение помощь гомография     самый предполагаться модель камера кроме операция проецирование мы интересный операция поворот 3d поворот 3d задаваться обратимый матрица   этот матрица являться матрица гомография  работать точно элемент   вращать точка   луч прямой применение теория задача построение плоский панорама   изображение снимать один точка быть считать кадр сьемок вестись начало координата матрица   задавать  поворот каждый камера  матрица   задавать операция проецирование  каждый камера  матрица мы неизвестный рассматривать произвольный точка  наш 3dсцены кадр     обращать внимание воспринимать точка элемент   работать луч терять информация положение точка вдоль луч кадр     проекция точка   точка     матрица гомография обратимый мочь выражать точка луч   первый уравнение  подставлять второй обозначать  получать   проекция 3dточки   кадр     связанный некоторый гомография   брать точка   произвольно этот два изображение этот связь работать 3dточек сцена смочь кадр     находить набор 2d2d соответствие пара 2dточек который соответствовать один 3dточке получаться набор линейный уравнение вид    матрица 9 неизвестный число точность ненулевой множитель это сделать помощь алгоритм  dlt  такой образ получать гомография который переводить точка изображение   точка изображение   пара изображение посчитать гомография переводить точка один изображение точка другой мочь применять она ко весь изображение такой образ перевести один изображение плоскость другой общий алгоритм построение плоский панорама мы нужно объединять исходный изображение один плоскость упрощение наш алгоритм быть использовать плоскость первый изображение работать быть этот три изображение первый изображение слева первый изображение преобразовывать сам помощь identity гомография   каждый остальной изображение требоваться находить гомография   который переводить изображение   плоскость первый изображение это получаться сделать плохой случай наш панорама состоять первый изображение нахождение гомография набор изображение соответствующий матрица гомография мочь вычислять граница панорамный изображение объединять исходный фотография один изображение код import cv2 import numpy as np from typing import tuple list optional   for type hints rgbimg  nparray                    shape  h w 3 point2dlist  nparray               shape  n 2 descriptorslist  nparray           shape  n descriptor_size hmat  nparray                      shape  3 3 bbox  tupleint int int int     boundingboxx y right top   def build_panoramic_imageimgs listrgbimg  rgbimg     used_imgs listtuplergbimg hmat  _find_all_homographyimgs     result_bbox bbox  _get_result_panorama_bboxused_imgs     return _join_panoramic_imageused_imgs result_bbox функция  _find_all_homography  каждый исходный изображение пытаться находить матрица гомография   список used_imgs содержать минимум элемент первый изображение функция  _get_result_panorama_bbox  находить прямоугольник ограничивать результирующий плоский панорама функция  _join_panoramic_image  объединять изображение один помощь находить матрица гомография поиск 2d2d соответствие вычисление гомография два изображение мы требоваться находить 2d2d соответствие они набор пара 2dточек первый второй изображение такой каждый пара предполагать соответствовать какойто 3dточке сцена изображать фотография существовать способ получать 2d2d соответствие быть использовать детектор локальный особенность sift детектор локальный особенность принимать вход изображение возвращать набор находить ключевой точка дескриптор случай sift дескриптор вектор 128 число тип float ключевой точка дескриптор находить оба изображение они искаться соответствие это делаться использование дескриптор дескриптор два точка разный изображение близкий расстояние вероятно соответствовать один тот 3dточке сцена простой реализация каждый дескриптор первый изображение искать близкий расстояние дескриптор второй изображение алгоритм называться nearest neighbour nn быть использовать сложный алгоритм  firsttosecond nn ratio check snn сложно показывать заметно хороший результат он каждый дескриптор первый изображение искаться близкий дескриптор второй изображение проверяться соотношение расстояние оно близко единица второй близкий дескриптор второй изображение находиться примерно такой расстояние дескриптор первый изображение первый этот соответствие считаться плохой соотношение мало   это соответствие использовать часть 2d2d соответствие получать помощь sift firsttosecond nn ratio check замечать большой количество неправильный соответствие код def _detect_sift_points_and_descriptorsimg rgbimg           tuplepoint2dlist descriptorslist     img_gray  cv2cvtcolorimg cv2color_rgb2gray     sift  cv2sift_create     keypoints descriptors  siftdetectandcomputeimg_gray none     return nparraykppt for kp in k",
    "tags": [
        "компьютерное зрение",
        "3d computer vision",
        "computer vision",
        "opencv",
        "panorama",
        "панорамное фото",
        "python",
        "математика",
        "обработка изображений"
    ]
}